/// <reference types="node" resolution-mode="require"/>
import { type IOracleJob } from "./index.js";
type VerifiedFeed = {
    /**
     *  UTC timestamp of the verification.
     */
    verifiedAt: number;
    /**
     *  The wallet that verified this feed definition.
     */
    verifier: string;
    /**
     *  The address of the queue that the feed was verified on.
     */
    queueAddress: string;
    /**
     *  The jobs of this feed definition.
     */
    jobs: IOracleJob[];
};
export declare class FeedHash {
    /**
     *  Disable object instantiation.
     */
    private constructor();
    /**
     *  Validate that a provided string is indeed a valid feed hash.
     *
     *  To be a valid feed hash, the string should be a hex string that is 64 characters in length.
     *
     *  @returns the transformed feed hash (hex value) if valid.
     */
    static validate(feedHash: string): string;
    /**
     *  After validating {@linkcode feedHash}, return it as a {@linkcode Buffer}.
     *
     *  @returns Buffer
     */
    static serialize(feedHash: string): Buffer;
    /**
     *  Given a feed definition (a list of jobs), produce the associated feed hash and return it as a
     *  buffer.
     */
    static compute(queue: Buffer, jobs: IOracleJob[]): Buffer;
    /**
     *  Validate that {@linkcode feedHash} is ok and try to fetch a verified feed definition for it.
     *
     *  @returns VerifiedFeed
     *  @throws If {@linkcode feedHash} is invalid or if there is no associated verified feed data.
     */
    static fetchVerified(feedHash: string): Promise<VerifiedFeed>;
}
export {};
//# sourceMappingURL=FeedHash.d.ts.map