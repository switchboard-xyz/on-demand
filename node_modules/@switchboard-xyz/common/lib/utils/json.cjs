"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonReplacers = void 0;
const SwitchboardDecimal_js_1 = require("../SwitchboardDecimal.cjs");
const string_js_1 = require("./string.cjs");
const big_js_1 = require("big.js");
const bn_js_1 = __importDefault(require("bn.js"));
function big2NumberOrString(big) {
    const oldStrict = big_js_1.Big.strict;
    big_js_1.Big.strict = true;
    try {
        const num = big.toNumber();
        big_js_1.Big.strict = oldStrict;
        return num;
    }
    catch { }
    big_js_1.Big.strict = oldStrict;
    return big.toString();
}
/**
 * Utility function for JSON.stringify to convert common types
 */
function jsonReplacers(key, value) {
    if (typeof value === "string" ||
        typeof value === "number" ||
        typeof value === "boolean") {
        return value;
    }
    // bigint
    if (typeof value === "bigint") {
        return value.toString();
    }
    // BN
    if (bn_js_1.default.isBN(value)) {
        return value.toNumber();
    }
    // name and metadata replacers
    if (key === "name" || key === "metadata") {
        if (Array.isArray(value) || Buffer.isBuffer(value)) {
            return (0, string_js_1.buf2String)(value);
        }
    }
    // Switchboard Decimal
    if (value instanceof SwitchboardDecimal_js_1.SwitchboardDecimal ||
        (value &&
            typeof value === "object" &&
            "mantissa" in value &&
            "scale" in value)) {
        const swbDecimal = new SwitchboardDecimal_js_1.SwitchboardDecimal(value.mantissa, value.scale);
        return big2NumberOrString(swbDecimal.toBig());
    }
    // big.js
    if (value instanceof big_js_1.Big) {
        return big2NumberOrString(value);
    }
    // pubkey
    if ("toBase58" in value && typeof value.toBase58 === "function") {
        return value.toBase58();
    }
    // toString
    if ("toString" in value && typeof value.toString === "function") {
        return value.toString();
    }
    // Fall through for nested objects
    return value;
}
exports.jsonReplacers = jsonReplacers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9FQUE4RDtBQUU5RCwyQ0FBeUM7QUFFekMsbUNBQTZCO0FBQzdCLGtEQUF1QjtBQUV2QixTQUFTLGtCQUFrQixDQUFDLEdBQVE7SUFDbEMsTUFBTSxTQUFTLEdBQUcsWUFBRyxDQUFDLE1BQU0sQ0FBQztJQUM3QixZQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNsQixJQUFJLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0IsWUFBRyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDdkIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztJQUNWLFlBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0lBQ3ZCLE9BQU8sR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3hCLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxHQUFRLEVBQUUsS0FBVTtJQUNoRCxJQUNFLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDekIsT0FBTyxLQUFLLEtBQUssUUFBUTtRQUN6QixPQUFPLEtBQUssS0FBSyxTQUFTLEVBQzFCLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTO0lBQ1QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsS0FBSztJQUNMLElBQUksZUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ25CLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCw4QkFBOEI7SUFDOUIsSUFBSSxHQUFHLEtBQUssTUFBTSxJQUFJLEdBQUcsS0FBSyxVQUFVLEVBQUUsQ0FBQztRQUN6QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ25ELE9BQU8sSUFBQSxzQkFBVSxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUM7SUFDSCxDQUFDO0lBRUQsc0JBQXNCO0lBQ3RCLElBQ0UsS0FBSyxZQUFZLDBDQUFrQjtRQUNuQyxDQUFDLEtBQUs7WUFDSixPQUFPLEtBQUssS0FBSyxRQUFRO1lBQ3pCLFVBQVUsSUFBSSxLQUFLO1lBQ25CLE9BQU8sSUFBSSxLQUFLLENBQUMsRUFDbkIsQ0FBQztRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksMENBQWtCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkUsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsU0FBUztJQUNULElBQUksS0FBSyxZQUFZLFlBQUcsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFNBQVM7SUFDVCxJQUFJLFVBQVUsSUFBSSxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ2hFLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxXQUFXO0lBQ1gsSUFBSSxVQUFVLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUUsQ0FBQztRQUNoRSxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsa0NBQWtDO0lBQ2xDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQXZERCxzQ0F1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTd2l0Y2hib2FyZERlY2ltYWwgfSBmcm9tIFwiLi4vU3dpdGNoYm9hcmREZWNpbWFsLmpzXCI7XG5cbmltcG9ydCB7IGJ1ZjJTdHJpbmcgfSBmcm9tIFwiLi9zdHJpbmcuanNcIjtcblxuaW1wb3J0IHsgQmlnIH0gZnJvbSBcImJpZy5qc1wiO1xuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiO1xuXG5mdW5jdGlvbiBiaWcyTnVtYmVyT3JTdHJpbmcoYmlnOiBCaWcpOiBudW1iZXIgfCBzdHJpbmcge1xuICBjb25zdCBvbGRTdHJpY3QgPSBCaWcuc3RyaWN0O1xuICBCaWcuc3RyaWN0ID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBjb25zdCBudW0gPSBiaWcudG9OdW1iZXIoKTtcbiAgICBCaWcuc3RyaWN0ID0gb2xkU3RyaWN0O1xuICAgIHJldHVybiBudW07XG4gIH0gY2F0Y2gge31cbiAgQmlnLnN0cmljdCA9IG9sZFN0cmljdDtcbiAgcmV0dXJuIGJpZy50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIEpTT04uc3RyaW5naWZ5IHRvIGNvbnZlcnQgY29tbW9uIHR5cGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqc29uUmVwbGFjZXJzKGtleTogYW55LCB2YWx1ZTogYW55KTogYW55IHtcbiAgaWYgKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCJcbiAgKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy8gYmlnaW50XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8vIEJOXG4gIGlmIChCTi5pc0JOKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS50b051bWJlcigpO1xuICB9XG5cbiAgLy8gbmFtZSBhbmQgbWV0YWRhdGEgcmVwbGFjZXJzXG4gIGlmIChrZXkgPT09IFwibmFtZVwiIHx8IGtleSA9PT0gXCJtZXRhZGF0YVwiKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBidWYyU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvLyBTd2l0Y2hib2FyZCBEZWNpbWFsXG4gIGlmIChcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIFN3aXRjaGJvYXJkRGVjaW1hbCB8fFxuICAgICh2YWx1ZSAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICBcIm1hbnRpc3NhXCIgaW4gdmFsdWUgJiZcbiAgICAgIFwic2NhbGVcIiBpbiB2YWx1ZSlcbiAgKSB7XG4gICAgY29uc3Qgc3diRGVjaW1hbCA9IG5ldyBTd2l0Y2hib2FyZERlY2ltYWwodmFsdWUubWFudGlzc2EsIHZhbHVlLnNjYWxlKTtcbiAgICByZXR1cm4gYmlnMk51bWJlck9yU3RyaW5nKHN3YkRlY2ltYWwudG9CaWcoKSk7XG4gIH1cblxuICAvLyBiaWcuanNcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQmlnKSB7XG4gICAgcmV0dXJuIGJpZzJOdW1iZXJPclN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICAvLyBwdWJrZXlcbiAgaWYgKFwidG9CYXNlNThcIiBpbiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9CYXNlNTggPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB2YWx1ZS50b0Jhc2U1OCgpO1xuICB9XG5cbiAgLy8gdG9TdHJpbmdcbiAgaWYgKFwidG9TdHJpbmdcIiBpbiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgLy8gRmFsbCB0aHJvdWdoIGZvciBuZXN0ZWQgb2JqZWN0c1xuICByZXR1cm4gdmFsdWU7XG59XG4iXX0=