"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BNtoDateTimeString = exports.toDateTimeString = exports.BNtoDateString = exports.toDateString = void 0;
const padTime = (number_) => {
    return number_.toString().padStart(2, "0");
};
/** Convert a Date object to YYYY-MM-DD */
function toDateString(d) {
    if (d)
        return `${d.getFullYear()}-${padTime(d.getMonth() + 1)}-${padTime(d.getDate())} L`;
    return "";
}
exports.toDateString = toDateString;
/** Convert an BN timestamp to YYYY-MM-DD */
function BNtoDateString(ts) {
    try {
        return toDateString(new Date(ts.toNumber() * 1000));
    }
    catch {
        return "N/A";
    }
}
exports.BNtoDateString = BNtoDateString;
/** Convert a Date object to YYYY-MM-DD HH:mm:ss */
function toDateTimeString(d) {
    if (d)
        return `${d.getFullYear()}-${padTime(d.getMonth() + 1)}-${padTime(d.getDate())} ${padTime(d.getHours())}:${padTime(d.getMinutes())}:${padTime(d.getSeconds())} L`;
    return "";
}
exports.toDateTimeString = toDateTimeString;
/** Convert an BN timestamp to YYYY-MM-DD HH:mm:ss */
function BNtoDateTimeString(ts) {
    try {
        return toDateTimeString(new Date(ts.toNumber() * 1000));
    }
    catch {
        return "N/A";
    }
}
exports.BNtoDateTimeString = BNtoDateTimeString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDMUMsT0FBTyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRiwwQ0FBMEM7QUFDMUMsU0FBZ0IsWUFBWSxDQUFDLENBQW1CO0lBQzlDLElBQUksQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQy9ELENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FDWixJQUFJLENBQUM7SUFDUixPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFORCxvQ0FNQztBQUVELDRDQUE0QztBQUM1QyxTQUFnQixjQUFjLENBQUMsRUFBTTtJQUNuQyxJQUFJLENBQUM7UUFDSCxPQUFPLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQUMsTUFBTSxDQUFDO1FBQ1AsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0FBQ0gsQ0FBQztBQU5ELHdDQU1DO0FBRUQsbURBQW1EO0FBQ25ELFNBQWdCLGdCQUFnQixDQUFDLENBQW1CO0lBQ2xELElBQUksQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQy9ELENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FDWixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksT0FBTyxDQUM5RCxDQUFDLENBQUMsVUFBVSxFQUFFLENBQ2YsSUFBSSxDQUFDO0lBQ1IsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBUkQsNENBUUM7QUFFRCxxREFBcUQ7QUFDckQsU0FBZ0Isa0JBQWtCLENBQUMsRUFBTTtJQUN2QyxJQUFJLENBQUM7UUFDSCxPQUFPLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFBQyxNQUFNLENBQUM7UUFDUCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7QUFDSCxDQUFDO0FBTkQsZ0RBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSBCTiBmcm9tIFwiYm4uanNcIjtcblxuY29uc3QgcGFkVGltZSA9IChudW1iZXJfOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gbnVtYmVyXy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbn07XG5cbi8qKiBDb252ZXJ0IGEgRGF0ZSBvYmplY3QgdG8gWVlZWS1NTS1ERCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZVN0cmluZyhkOiBEYXRlIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgaWYgKGQpXG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWRUaW1lKGQuZ2V0TW9udGgoKSArIDEpfS0ke3BhZFRpbWUoXG4gICAgICBkLmdldERhdGUoKVxuICAgICl9IExgO1xuICByZXR1cm4gXCJcIjtcbn1cblxuLyoqIENvbnZlcnQgYW4gQk4gdGltZXN0YW1wIHRvIFlZWVktTU0tREQgKi9cbmV4cG9ydCBmdW5jdGlvbiBCTnRvRGF0ZVN0cmluZyh0czogQk4pOiBzdHJpbmcge1xuICB0cnkge1xuICAgIHJldHVybiB0b0RhdGVTdHJpbmcobmV3IERhdGUodHMudG9OdW1iZXIoKSAqIDEwMDApKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFwiTi9BXCI7XG4gIH1cbn1cblxuLyoqIENvbnZlcnQgYSBEYXRlIG9iamVjdCB0byBZWVlZLU1NLUREIEhIOm1tOnNzICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlVGltZVN0cmluZyhkOiBEYXRlIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgaWYgKGQpXG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWRUaW1lKGQuZ2V0TW9udGgoKSArIDEpfS0ke3BhZFRpbWUoXG4gICAgICBkLmdldERhdGUoKVxuICAgICl9ICR7cGFkVGltZShkLmdldEhvdXJzKCkpfToke3BhZFRpbWUoZC5nZXRNaW51dGVzKCkpfToke3BhZFRpbWUoXG4gICAgICBkLmdldFNlY29uZHMoKVxuICAgICl9IExgO1xuICByZXR1cm4gXCJcIjtcbn1cblxuLyoqIENvbnZlcnQgYW4gQk4gdGltZXN0YW1wIHRvIFlZWVktTU0tREQgSEg6bW06c3MgKi9cbmV4cG9ydCBmdW5jdGlvbiBCTnRvRGF0ZVRpbWVTdHJpbmcodHM6IEJOKTogc3RyaW5nIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdG9EYXRlVGltZVN0cmluZyhuZXcgRGF0ZSh0cy50b051bWJlcigpICogMTAwMCkpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gXCJOL0FcIjtcbiAgfVxufVxuIl19