import { SwitchboardDecimal } from "../SwitchboardDecimal.js";
import { buf2String } from "./string.js";
import { Big } from "big.js";
import BN from "bn.js";
function big2NumberOrString(big) {
    const oldStrict = Big.strict;
    Big.strict = true;
    try {
        const num = big.toNumber();
        Big.strict = oldStrict;
        return num;
    }
    catch { }
    Big.strict = oldStrict;
    return big.toString();
}
/**
 * Utility function for JSON.stringify to convert common types
 */
export function jsonReplacers(key, value) {
    if (typeof value === "string" ||
        typeof value === "number" ||
        typeof value === "boolean") {
        return value;
    }
    // bigint
    if (typeof value === "bigint") {
        return value.toString();
    }
    // BN
    if (BN.isBN(value)) {
        return value.toNumber();
    }
    // name and metadata replacers
    if (key === "name" || key === "metadata") {
        if (Array.isArray(value) || Buffer.isBuffer(value)) {
            return buf2String(value);
        }
    }
    // Switchboard Decimal
    if (value instanceof SwitchboardDecimal ||
        (value &&
            typeof value === "object" &&
            "mantissa" in value &&
            "scale" in value)) {
        const swbDecimal = new SwitchboardDecimal(value.mantissa, value.scale);
        return big2NumberOrString(swbDecimal.toBig());
    }
    // big.js
    if (value instanceof Big) {
        return big2NumberOrString(value);
    }
    // pubkey
    if ("toBase58" in value && typeof value.toBase58 === "function") {
        return value.toBase58();
    }
    // toString
    if ("toString" in value && typeof value.toString === "function") {
        return value.toString();
    }
    // Fall through for nested objects
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM3QixPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFdkIsU0FBUyxrQkFBa0IsQ0FBQyxHQUFRO0lBQ2xDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDN0IsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDbEIsSUFBSSxDQUFDO1FBQ0gsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUM7SUFDVixHQUFHLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVEsRUFBRSxLQUFVO0lBQ2hELElBQ0UsT0FBTyxLQUFLLEtBQUssUUFBUTtRQUN6QixPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLE9BQU8sS0FBSyxLQUFLLFNBQVMsRUFDMUIsQ0FBQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVM7SUFDVCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzlCLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxLQUFLO0lBQ0wsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbkIsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELDhCQUE4QjtJQUM5QixJQUFJLEdBQUcsS0FBSyxNQUFNLElBQUksR0FBRyxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ3pDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbkQsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQztJQUNILENBQUM7SUFFRCxzQkFBc0I7SUFDdEIsSUFDRSxLQUFLLFlBQVksa0JBQWtCO1FBQ25DLENBQUMsS0FBSztZQUNKLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDekIsVUFBVSxJQUFJLEtBQUs7WUFDbkIsT0FBTyxJQUFJLEtBQUssQ0FBQyxFQUNuQixDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RSxPQUFPLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxTQUFTO0lBQ1QsSUFBSSxLQUFLLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDekIsT0FBTyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsU0FBUztJQUNULElBQUksVUFBVSxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDaEUsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELFdBQVc7SUFDWCxJQUFJLFVBQVUsSUFBSSxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ2hFLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxrQ0FBa0M7SUFDbEMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3dpdGNoYm9hcmREZWNpbWFsIH0gZnJvbSBcIi4uL1N3aXRjaGJvYXJkRGVjaW1hbC5qc1wiO1xuXG5pbXBvcnQgeyBidWYyU3RyaW5nIH0gZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5cbmltcG9ydCB7IEJpZyB9IGZyb20gXCJiaWcuanNcIjtcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcblxuZnVuY3Rpb24gYmlnMk51bWJlck9yU3RyaW5nKGJpZzogQmlnKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgY29uc3Qgb2xkU3RyaWN0ID0gQmlnLnN0cmljdDtcbiAgQmlnLnN0cmljdCA9IHRydWU7XG4gIHRyeSB7XG4gICAgY29uc3QgbnVtID0gYmlnLnRvTnVtYmVyKCk7XG4gICAgQmlnLnN0cmljdCA9IG9sZFN0cmljdDtcbiAgICByZXR1cm4gbnVtO1xuICB9IGNhdGNoIHt9XG4gIEJpZy5zdHJpY3QgPSBvbGRTdHJpY3Q7XG4gIHJldHVybiBiaWcudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBKU09OLnN0cmluZ2lmeSB0byBjb252ZXJ0IGNvbW1vbiB0eXBlc1xuICovXG5leHBvcnQgZnVuY3Rpb24ganNvblJlcGxhY2VycyhrZXk6IGFueSwgdmFsdWU6IGFueSk6IGFueSB7XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiXG4gICkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIGJpZ2ludFxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvLyBCTlxuICBpZiAoQk4uaXNCTih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudG9OdW1iZXIoKTtcbiAgfVxuXG4gIC8vIG5hbWUgYW5kIG1ldGFkYXRhIHJlcGxhY2Vyc1xuICBpZiAoa2V5ID09PSBcIm5hbWVcIiB8fCBrZXkgPT09IFwibWV0YWRhdGFcIikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gYnVmMlN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3dpdGNoYm9hcmQgRGVjaW1hbFxuICBpZiAoXG4gICAgdmFsdWUgaW5zdGFuY2VvZiBTd2l0Y2hib2FyZERlY2ltYWwgfHxcbiAgICAodmFsdWUgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgXCJtYW50aXNzYVwiIGluIHZhbHVlICYmXG4gICAgICBcInNjYWxlXCIgaW4gdmFsdWUpXG4gICkge1xuICAgIGNvbnN0IHN3YkRlY2ltYWwgPSBuZXcgU3dpdGNoYm9hcmREZWNpbWFsKHZhbHVlLm1hbnRpc3NhLCB2YWx1ZS5zY2FsZSk7XG4gICAgcmV0dXJuIGJpZzJOdW1iZXJPclN0cmluZyhzd2JEZWNpbWFsLnRvQmlnKCkpO1xuICB9XG5cbiAgLy8gYmlnLmpzXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJpZykge1xuICAgIHJldHVybiBiaWcyTnVtYmVyT3JTdHJpbmcodmFsdWUpO1xuICB9XG5cbiAgLy8gcHVia2V5XG4gIGlmIChcInRvQmFzZTU4XCIgaW4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvQmFzZTU4ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gdmFsdWUudG9CYXNlNTgoKTtcbiAgfVxuXG4gIC8vIHRvU3RyaW5nXG4gIGlmIChcInRvU3RyaW5nXCIgaW4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8vIEZhbGwgdGhyb3VnaCBmb3IgbmVzdGVkIG9iamVjdHNcbiAgcmV0dXJuIHZhbHVlO1xufVxuIl19