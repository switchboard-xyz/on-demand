/** Sleep for a given number of milliseconds
 * @param ms number of milliseconds to sleep for
 * @return a promise that resolves when the sleep interval has elapsed
 */
export const sleep = (ms) => new Promise((s) => setTimeout(s, ms));
/**
 * Typescript assertion that a promise was successfully fulfilled
 *
 * Usage
 * ```ts
 * const promises: PromiseSettledResult<any> = await Promise.allSettled([..somePromises]);
 * const resolvedPromises: PromiseFulfilledResult<any> = promises.filter(assertFulfilled);
 * ```
 */
export function assertFulfilled(item) {
    return item.status === "fulfilled";
}
export class TimeoutError extends Error {
    ms;
    constructor(ms, msg) {
        super(`TimeoutError${msg
            ? ": " + msg
            : `timed out after ${Math.round(ms / 1000).toFixed(3)} seconds`}`);
        this.ms = ms;
        Object.setPrototypeOf(this, TimeoutError.prototype);
    }
}
/** Returns a promise that resolves successfully if returned before the given timeout has elapsed.
 * @param ms the number of milliseconds before the promise expires
 * @param promise the promise(s) to wait for
 * @param timeoutError the error to throw if the promise expires
 * @return the promise result
 */
export async function promiseWithTimeout(ms, promise, timeoutError) {
    const promises = Array.isArray(promise) ? promise : [promise];
    // create a promise that rejects in N milliseconds
    const timeout = new Promise((_, reject) => {
        setTimeout(() => {
            // for (const p of promises) {
            //   if ("unref" in p && typeof p.unref === "function") {
            //     p.unref();
            //   }
            // }
            reject(new TimeoutError(ms, timeoutError));
        }, ms).unref(); // dont hold up closing NodeJS process if this is the only timer scheduled
    });
    return Promise.race([...promises, timeout]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvYXN5bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsRUFBVSxFQUFnQixFQUFFLENBQ2hELElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFeEM7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUM3QixJQUE2QjtJQUU3QixPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLE9BQU8sWUFBYSxTQUFRLEtBQUs7SUFDaEI7SUFBckIsWUFBcUIsRUFBVSxFQUFFLEdBQVk7UUFDM0MsS0FBSyxDQUNILGVBQ0UsR0FBRztZQUNELENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRztZQUNaLENBQUMsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUN6RCxFQUFFLENBQ0gsQ0FBQztRQVBpQixPQUFFLEdBQUYsRUFBRSxDQUFRO1FBUTdCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLEVBQVUsRUFDVixPQUF1QyxFQUN2QyxZQUFxQjtJQUVyQixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFOUQsa0RBQWtEO0lBQ2xELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQy9DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCw4QkFBOEI7WUFDOUIseURBQXlEO1lBQ3pELGlCQUFpQjtZQUNqQixNQUFNO1lBQ04sSUFBSTtZQUNKLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQywwRUFBMEU7SUFDNUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUksQ0FBQyxHQUFHLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogU2xlZXAgZm9yIGEgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIG1zIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gc2xlZXAgZm9yXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNsZWVwIGludGVydmFsIGhhcyBlbGFwc2VkXG4gKi9cbmV4cG9ydCBjb25zdCBzbGVlcCA9IChtczogbnVtYmVyKTogUHJvbWlzZTxhbnk+ID0+XG4gIG5ldyBQcm9taXNlKChzKSA9PiBzZXRUaW1lb3V0KHMsIG1zKSk7XG5cbi8qKlxuICogVHlwZXNjcmlwdCBhc3NlcnRpb24gdGhhdCBhIHByb21pc2Ugd2FzIHN1Y2Nlc3NmdWxseSBmdWxmaWxsZWRcbiAqXG4gKiBVc2FnZVxuICogYGBgdHNcbiAqIGNvbnN0IHByb21pc2VzOiBQcm9taXNlU2V0dGxlZFJlc3VsdDxhbnk+ID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFsuLnNvbWVQcm9taXNlc10pO1xuICogY29uc3QgcmVzb2x2ZWRQcm9taXNlczogUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxhbnk+ID0gcHJvbWlzZXMuZmlsdGVyKGFzc2VydEZ1bGZpbGxlZCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZ1bGZpbGxlZDxUPihcbiAgaXRlbTogUHJvbWlzZVNldHRsZWRSZXN1bHQ8VD5cbik6IGl0ZW0gaXMgUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxUPiB7XG4gIHJldHVybiBpdGVtLnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIjtcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgbXM6IG51bWJlciwgbXNnPzogc3RyaW5nKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGltZW91dEVycm9yJHtcbiAgICAgICAgbXNnXG4gICAgICAgICAgPyBcIjogXCIgKyBtc2dcbiAgICAgICAgICA6IGB0aW1lZCBvdXQgYWZ0ZXIgJHtNYXRoLnJvdW5kKG1zIC8gMTAwMCkudG9GaXhlZCgzKX0gc2Vjb25kc2BcbiAgICAgIH1gXG4gICAgKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVGltZW91dEVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuLyoqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgc3VjY2Vzc2Z1bGx5IGlmIHJldHVybmVkIGJlZm9yZSB0aGUgZ2l2ZW4gdGltZW91dCBoYXMgZWxhcHNlZC5cbiAqIEBwYXJhbSBtcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhlIHByb21pc2UgZXhwaXJlc1xuICogQHBhcmFtIHByb21pc2UgdGhlIHByb21pc2UocykgdG8gd2FpdCBmb3JcbiAqIEBwYXJhbSB0aW1lb3V0RXJyb3IgdGhlIGVycm9yIHRvIHRocm93IGlmIHRoZSBwcm9taXNlIGV4cGlyZXNcbiAqIEByZXR1cm4gdGhlIHByb21pc2UgcmVzdWx0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9taXNlV2l0aFRpbWVvdXQ8VD4oXG4gIG1zOiBudW1iZXIsXG4gIHByb21pc2U6IFByb21pc2U8VD4gfCBBcnJheTxQcm9taXNlPFQ+PixcbiAgdGltZW91dEVycm9yPzogc3RyaW5nXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgcHJvbWlzZXMgPSBBcnJheS5pc0FycmF5KHByb21pc2UpID8gcHJvbWlzZSA6IFtwcm9taXNlXTtcblxuICAvLyBjcmVhdGUgYSBwcm9taXNlIHRoYXQgcmVqZWN0cyBpbiBOIG1pbGxpc2Vjb25kc1xuICBjb25zdCB0aW1lb3V0ID0gbmV3IFByb21pc2U8bmV2ZXI+KChfLCByZWplY3QpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGZvciAoY29uc3QgcCBvZiBwcm9taXNlcykge1xuICAgICAgLy8gICBpZiAoXCJ1bnJlZlwiIGluIHAgJiYgdHlwZW9mIHAudW5yZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgLy8gICAgIHAudW5yZWYoKTtcbiAgICAgIC8vICAgfVxuICAgICAgLy8gfVxuICAgICAgcmVqZWN0KG5ldyBUaW1lb3V0RXJyb3IobXMsIHRpbWVvdXRFcnJvcikpO1xuICAgIH0sIG1zKS51bnJlZigpOyAvLyBkb250IGhvbGQgdXAgY2xvc2luZyBOb2RlSlMgcHJvY2VzcyBpZiB0aGlzIGlzIHRoZSBvbmx5IHRpbWVyIHNjaGVkdWxlZFxuICB9KTtcblxuICByZXR1cm4gUHJvbWlzZS5yYWNlPFQ+KFsuLi5wcm9taXNlcywgdGltZW91dF0pO1xufVxuIl19