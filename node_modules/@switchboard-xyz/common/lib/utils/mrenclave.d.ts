/**
 * Checks if an array of mrEnclaves contains a specific mrEnclave.
 * @param mrEnclaves - The array of mrEnclaves to search in.
 * @param targetMrEnclave - The mrEnclave to search for.
 * @returns True if the target mrEnclave is found in the array, false otherwise.
 */
export declare function containsMrEnclave(mrEnclaves: number[][], targetMrEnclave: number[] | Uint8Array): boolean;
/**
 * Filters out empty MrEnclaves from an array of MrEnclaves.
 * @param mrEnclaves - An array of MrEnclaves to filter.
 * @returns An array of non-empty MrEnclaves.
 */
export declare function filterEmptyMrEnclaves(mrEnclaves: number[][]): Array<number[]>;
/**
 * Combines two arrays of MrEnclaves and returns a new array with non-empty and non-repeating entries.
 * @param mrEnclavesA - An array of MrEnclaves.
 * @param mrEnclavesB - An array of MrEnclaves.
 * @returns A new MrEnclave array with no empty or repeated elements.
 */
export declare function combineMrEnclaveSets(mrEnclavesA: Array<number[]>, mrEnclavesB: Array<number[]>): Array<number[]>;
//# sourceMappingURL=mrenclave.d.ts.map