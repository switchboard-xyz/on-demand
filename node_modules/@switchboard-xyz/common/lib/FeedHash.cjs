"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedHash = void 0;
const index_js_1 = require("./index.cjs");
const crypto_1 = require("crypto");
class FeedHash {
    /**
     *  Disable object instantiation.
     */
    constructor() { }
    /**
     *  Validate that a provided string is indeed a valid feed hash.
     *
     *  To be a valid feed hash, the string should be a hex string that is 64 characters in length.
     *
     *  @returns the transformed feed hash (hex value) if valid.
     */
    static validate(feedHash) {
        // Make the feed hash lower case and remove the optional '0x' prefix if necessary.
        const transformed = (() => {
            const lowerCase = feedHash.toLowerCase();
            return lowerCase.startsWith("0x") ? lowerCase.substring(2) : lowerCase;
        })();
        // Validate that the result is 64 characters long and lower-case hex.
        if (/^[a-f0-9]{64}$/.test(transformed))
            return transformed;
        throw new Error(`FeedHash.validate failed: ${feedHash}`);
    }
    /**
     *  After validating {@linkcode feedHash}, return it as a {@linkcode Buffer}.
     *
     *  @returns Buffer
     */
    static serialize(feedHash) {
        const validated = FeedHash.validate(feedHash);
        return Buffer.from(validated, "hex");
    }
    /**
     *  Given a feed definition (a list of jobs), produce the associated feed hash and return it as a
     *  buffer.
     */
    static compute(queue, jobs) {
        const hasher = (0, crypto_1.createHash)("sha256");
        hasher.update(queue);
        jobs.forEach((job) => {
            hasher.update(index_js_1.OracleJob.encodeDelimited(job).finish());
        });
        return hasher.digest();
    }
    /**
     *  Validate that {@linkcode feedHash} is ok and try to fetch a verified feed definition for it.
     *
     *  @returns VerifiedFeed
     *  @throws If {@linkcode feedHash} is invalid or if there is no associated verified feed data.
     */
    static async fetchVerified(feedHash) {
        const validated = FeedHash.validate(feedHash);
        if (!validated)
            throw new Error("`feedHash` parameter is invalid.");
        // TODO: implement this function when we have a centralized place to load verified feeds from.
        throw new Error("NotImplemented");
    }
}
exports.FeedHash = FeedHash;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmVlZEhhc2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRmVlZEhhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQXdEO0FBRXhELG1DQUFvQztBQXFCcEMsTUFBYSxRQUFRO0lBQ25COztPQUVHO0lBQ0gsZ0JBQXVCLENBQUM7SUFDeEI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFnQjtRQUM5QixrRkFBa0Y7UUFDbEYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDeEIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pDLE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDTCxxRUFBcUU7UUFDckUsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQUUsT0FBTyxXQUFXLENBQUM7UUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBZ0I7UUFDL0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWEsRUFBRSxJQUFrQjtRQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFBLG1CQUFVLEVBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBZSxFQUFFLEVBQUU7WUFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxvQkFBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBZ0I7UUFDekMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsU0FBUztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUVwRSw4RkFBOEY7UUFDOUYsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQXpERCw0QkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIElPcmFjbGVKb2IsIE9yYWNsZUpvYiB9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tIFwiY3J5cHRvXCI7XG5cbnR5cGUgVmVyaWZpZWRGZWVkID0ge1xuICAvKipcbiAgICogIFVUQyB0aW1lc3RhbXAgb2YgdGhlIHZlcmlmaWNhdGlvbi5cbiAgICovXG4gIHZlcmlmaWVkQXQ6IG51bWJlcjtcbiAgLyoqXG4gICAqICBUaGUgd2FsbGV0IHRoYXQgdmVyaWZpZWQgdGhpcyBmZWVkIGRlZmluaXRpb24uXG4gICAqL1xuICB2ZXJpZmllcjogc3RyaW5nO1xuICAvKipcbiAgICogIFRoZSBhZGRyZXNzIG9mIHRoZSBxdWV1ZSB0aGF0IHRoZSBmZWVkIHdhcyB2ZXJpZmllZCBvbi5cbiAgICovXG4gIHF1ZXVlQWRkcmVzczogc3RyaW5nO1xuICAvKipcbiAgICogIFRoZSBqb2JzIG9mIHRoaXMgZmVlZCBkZWZpbml0aW9uLlxuICAgKi9cbiAgam9iczogSU9yYWNsZUpvYltdO1xufTtcblxuZXhwb3J0IGNsYXNzIEZlZWRIYXNoIHtcbiAgLyoqXG4gICAqICBEaXNhYmxlIG9iamVjdCBpbnN0YW50aWF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG4gIC8qKlxuICAgKiAgVmFsaWRhdGUgdGhhdCBhIHByb3ZpZGVkIHN0cmluZyBpcyBpbmRlZWQgYSB2YWxpZCBmZWVkIGhhc2guXG4gICAqXG4gICAqICBUbyBiZSBhIHZhbGlkIGZlZWQgaGFzaCwgdGhlIHN0cmluZyBzaG91bGQgYmUgYSBoZXggc3RyaW5nIHRoYXQgaXMgNjQgY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gICAqXG4gICAqICBAcmV0dXJucyB0aGUgdHJhbnNmb3JtZWQgZmVlZCBoYXNoIChoZXggdmFsdWUpIGlmIHZhbGlkLlxuICAgKi9cbiAgc3RhdGljIHZhbGlkYXRlKGZlZWRIYXNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIE1ha2UgdGhlIGZlZWQgaGFzaCBsb3dlciBjYXNlIGFuZCByZW1vdmUgdGhlIG9wdGlvbmFsICcweCcgcHJlZml4IGlmIG5lY2Vzc2FyeS5cbiAgICBjb25zdCB0cmFuc2Zvcm1lZCA9ICgoKSA9PiB7XG4gICAgICBjb25zdCBsb3dlckNhc2UgPSBmZWVkSGFzaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIGxvd2VyQ2FzZS5zdGFydHNXaXRoKFwiMHhcIikgPyBsb3dlckNhc2Uuc3Vic3RyaW5nKDIpIDogbG93ZXJDYXNlO1xuICAgIH0pKCk7XG4gICAgLy8gVmFsaWRhdGUgdGhhdCB0aGUgcmVzdWx0IGlzIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgbG93ZXItY2FzZSBoZXguXG4gICAgaWYgKC9eW2EtZjAtOV17NjR9JC8udGVzdCh0cmFuc2Zvcm1lZCkpIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZlZWRIYXNoLnZhbGlkYXRlIGZhaWxlZDogJHtmZWVkSGFzaH1gKTtcbiAgfVxuICAvKipcbiAgICogIEFmdGVyIHZhbGlkYXRpbmcge0BsaW5rY29kZSBmZWVkSGFzaH0sIHJldHVybiBpdCBhcyBhIHtAbGlua2NvZGUgQnVmZmVyfS5cbiAgICpcbiAgICogIEByZXR1cm5zIEJ1ZmZlclxuICAgKi9cbiAgc3RhdGljIHNlcmlhbGl6ZShmZWVkSGFzaDogc3RyaW5nKTogQnVmZmVyIHtcbiAgICBjb25zdCB2YWxpZGF0ZWQgPSBGZWVkSGFzaC52YWxpZGF0ZShmZWVkSGFzaCk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbGlkYXRlZCwgXCJoZXhcIik7XG4gIH1cbiAgLyoqXG4gICAqICBHaXZlbiBhIGZlZWQgZGVmaW5pdGlvbiAoYSBsaXN0IG9mIGpvYnMpLCBwcm9kdWNlIHRoZSBhc3NvY2lhdGVkIGZlZWQgaGFzaCBhbmQgcmV0dXJuIGl0IGFzIGFcbiAgICogIGJ1ZmZlci5cbiAgICovXG4gIHN0YXRpYyBjb21wdXRlKHF1ZXVlOiBCdWZmZXIsIGpvYnM6IElPcmFjbGVKb2JbXSk6IEJ1ZmZlciB7XG4gICAgY29uc3QgaGFzaGVyID0gY3JlYXRlSGFzaChcInNoYTI1NlwiKTtcbiAgICBoYXNoZXIudXBkYXRlKHF1ZXVlKTtcbiAgICBqb2JzLmZvckVhY2goKGpvYjogSU9yYWNsZUpvYikgPT4ge1xuICAgICAgaGFzaGVyLnVwZGF0ZShPcmFjbGVKb2IuZW5jb2RlRGVsaW1pdGVkKGpvYikuZmluaXNoKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBoYXNoZXIuZGlnZXN0KCk7XG4gIH1cblxuICAvKipcbiAgICogIFZhbGlkYXRlIHRoYXQge0BsaW5rY29kZSBmZWVkSGFzaH0gaXMgb2sgYW5kIHRyeSB0byBmZXRjaCBhIHZlcmlmaWVkIGZlZWQgZGVmaW5pdGlvbiBmb3IgaXQuXG4gICAqXG4gICAqICBAcmV0dXJucyBWZXJpZmllZEZlZWRcbiAgICogIEB0aHJvd3MgSWYge0BsaW5rY29kZSBmZWVkSGFzaH0gaXMgaW52YWxpZCBvciBpZiB0aGVyZSBpcyBubyBhc3NvY2lhdGVkIHZlcmlmaWVkIGZlZWQgZGF0YS5cbiAgICovXG4gIHN0YXRpYyBhc3luYyBmZXRjaFZlcmlmaWVkKGZlZWRIYXNoOiBzdHJpbmcpOiBQcm9taXNlPFZlcmlmaWVkRmVlZD4ge1xuICAgIGNvbnN0IHZhbGlkYXRlZCA9IEZlZWRIYXNoLnZhbGlkYXRlKGZlZWRIYXNoKTtcbiAgICBpZiAoIXZhbGlkYXRlZCkgdGhyb3cgbmV3IEVycm9yKFwiYGZlZWRIYXNoYCBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cbiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbiB3aGVuIHdlIGhhdmUgYSBjZW50cmFsaXplZCBwbGFjZSB0byBsb2FkIHZlcmlmaWVkIGZlZWRzIGZyb20uXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90SW1wbGVtZW50ZWRcIik7XG4gIH1cbn1cbiJdfQ==