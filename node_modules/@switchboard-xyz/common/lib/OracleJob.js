import { OracleJob } from "./protos.js";
import { Big } from "big.js";
/**
 * Serialize a stringified OracleJob and replace any json comments
 * @param job - Stringified OracleJob or object with an array of Switchboard tasks defined
 * @throws {String}
 * @returns {OracleJob }
 */
export function serializeOracleJob(job) {
    if (!job) {
        throw new Error(`No job to serialize`);
    }
    let jobObj;
    if (typeof job === "string") {
        const parsedFileString = job
            // replace all json comments https://regex101.com/r/B8WkuX/1
            .replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/g, "");
        jobObj = OracleJob.fromObject(JSON.parse(parsedFileString));
    }
    else {
        if (!("tasks" in job) || !Array.isArray(job.tasks)) {
            throw new Error(`OracleJob is missing the 'tasks' property`);
        }
        if (job.tasks.length === 0) {
            throw new Error(`OracleJob has no tasks defined`);
        }
        jobObj = OracleJob.fromObject(job);
    }
    try {
        const err = OracleJob.verify(jobObj);
        if (err !== null) {
            throw new Error(err);
        }
        return OracleJob.create(jobObj);
    }
    catch (error) {
        throw new Error(`failed to serialize oracle job: ${error}`);
    }
}
/**
 * Deserialize an OracleJob from on-chain data
 * @param jobData - Serialized OracleJob data
 * @returns {OracleJob}
 */
export function deserializeOracleJob(jobData) {
    return OracleJob.decodeDelimited(jobData);
}
export function base64EncodeOracleJob(job) {
    const serialized = serializeOracleJob(job);
    const encoded = OracleJob.encodeDelimited(serialized).finish();
    return Buffer.from(encoded).toString("base64");
}
/**
 * Make an Http request to the task-runner endpoint to simulate an OracleJob result
 * @param jobs - array of {@type OracleJob} to run
 * @param network - the task simulator network to use
 * @returns the task simulator response
 */
export async function simulateOracleJobs(jobs, network = "mainnet-beta") {
    const response = await fetch("https://task.switchboard.xyz/simulate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            jobs: jobs.map((j) => j.toJSON()),
            cluster: network,
        }),
    });
    if (!response.ok) {
        throw new Error(`Failed to simulate job definition, Status=${response.status}`);
    }
    const payload = await response.json();
    return {
        results: payload.results.map((r) => new Big(r)),
        result: new Big(payload.result),
        taskRunnerVersion: payload.task_runner_version,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JhY2xlSm9iLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL09yYWNsZUpvYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFN0I7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLEdBQThDO0lBRTlDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSSxNQUFrQixDQUFDO0lBQ3ZCLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDNUIsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHO1lBQzFCLDREQUE0RDthQUMzRCxPQUFPLENBQUMscUNBQXFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEQsTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztTQUFNLENBQUM7UUFDTixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBQ0QsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNELE1BQU0sR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkIsQ0FBQztRQUNELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztBQUNILENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE9BQTRCO0lBQy9ELE9BQU8sU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxHQUE4QztJQUU5QyxNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQy9ELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQW1CRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLElBQXNCLEVBQ3RCLFVBQWdDLGNBQWM7SUFFOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsdUNBQXVDLEVBQUU7UUFDcEUsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7UUFDL0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQyxPQUFPLEVBQUUsT0FBTztTQUNqQixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNqQixNQUFNLElBQUksS0FBSyxDQUNiLDZDQUE2QyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQy9ELENBQUM7SUFDSixDQUFDO0lBQ0QsTUFBTSxPQUFPLEdBSVQsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFMUIsT0FBTztRQUNMLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDL0IsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLG1CQUFtQjtLQUMvQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSU9yYWNsZUpvYiB9IGZyb20gXCIuL3Byb3Rvcy5qc1wiO1xuaW1wb3J0IHsgT3JhY2xlSm9iIH0gZnJvbSBcIi4vcHJvdG9zLmpzXCI7XG5cbmltcG9ydCB7IEJpZyB9IGZyb20gXCJiaWcuanNcIjtcblxuLyoqXG4gKiBTZXJpYWxpemUgYSBzdHJpbmdpZmllZCBPcmFjbGVKb2IgYW5kIHJlcGxhY2UgYW55IGpzb24gY29tbWVudHNcbiAqIEBwYXJhbSBqb2IgLSBTdHJpbmdpZmllZCBPcmFjbGVKb2Igb3Igb2JqZWN0IHdpdGggYW4gYXJyYXkgb2YgU3dpdGNoYm9hcmQgdGFza3MgZGVmaW5lZFxuICogQHRocm93cyB7U3RyaW5nfVxuICogQHJldHVybnMge09yYWNsZUpvYiB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVPcmFjbGVKb2IoXG4gIGpvYjogc3RyaW5nIHwgSU9yYWNsZUpvYiB8IFJlY29yZDxzdHJpbmcsIGFueT5cbik6IE9yYWNsZUpvYiB7XG4gIGlmICgham9iKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBqb2IgdG8gc2VyaWFsaXplYCk7XG4gIH1cblxuICBsZXQgam9iT2JqOiBJT3JhY2xlSm9iO1xuICBpZiAodHlwZW9mIGpvYiA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IHBhcnNlZEZpbGVTdHJpbmcgPSBqb2JcbiAgICAgIC8vIHJlcGxhY2UgYWxsIGpzb24gY29tbWVudHMgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9COFdrdVgvMVxuICAgICAgLnJlcGxhY2UoL1xcL1xcKltcXHNcXFNdKj9cXCpcXC98KFteXFxcXDpdfF4pXFwvXFwvLiokL2csIFwiXCIpO1xuICAgIGpvYk9iaiA9IE9yYWNsZUpvYi5mcm9tT2JqZWN0KEpTT04ucGFyc2UocGFyc2VkRmlsZVN0cmluZykpO1xuICB9IGVsc2Uge1xuICAgIGlmICghKFwidGFza3NcIiBpbiBqb2IpIHx8ICFBcnJheS5pc0FycmF5KGpvYi50YXNrcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgT3JhY2xlSm9iIGlzIG1pc3NpbmcgdGhlICd0YXNrcycgcHJvcGVydHlgKTtcbiAgICB9XG4gICAgaWYgKGpvYi50YXNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgT3JhY2xlSm9iIGhhcyBubyB0YXNrcyBkZWZpbmVkYCk7XG4gICAgfVxuICAgIGpvYk9iaiA9IE9yYWNsZUpvYi5mcm9tT2JqZWN0KGpvYik7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGVyciA9IE9yYWNsZUpvYi52ZXJpZnkoam9iT2JqKTtcbiAgICBpZiAoZXJyICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIE9yYWNsZUpvYi5jcmVhdGUoam9iT2JqKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBzZXJpYWxpemUgb3JhY2xlIGpvYjogJHtlcnJvcn1gKTtcbiAgfVxufVxuXG4vKipcbiAqIERlc2VyaWFsaXplIGFuIE9yYWNsZUpvYiBmcm9tIG9uLWNoYWluIGRhdGFcbiAqIEBwYXJhbSBqb2JEYXRhIC0gU2VyaWFsaXplZCBPcmFjbGVKb2IgZGF0YVxuICogQHJldHVybnMge09yYWNsZUpvYn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplT3JhY2xlSm9iKGpvYkRhdGE6IEJ1ZmZlciB8IFVpbnQ4QXJyYXkpOiBPcmFjbGVKb2Ige1xuICByZXR1cm4gT3JhY2xlSm9iLmRlY29kZURlbGltaXRlZChqb2JEYXRhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NEVuY29kZU9yYWNsZUpvYihcbiAgam9iOiBzdHJpbmcgfCBJT3JhY2xlSm9iIHwgUmVjb3JkPHN0cmluZywgYW55PlxuKSB7XG4gIGNvbnN0IHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVPcmFjbGVKb2Ioam9iKTtcbiAgY29uc3QgZW5jb2RlZCA9IE9yYWNsZUpvYi5lbmNvZGVEZWxpbWl0ZWQoc2VyaWFsaXplZCkuZmluaXNoKCk7XG4gIHJldHVybiBCdWZmZXIuZnJvbShlbmNvZGVkKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cblxuZXhwb3J0IHR5cGUgVGFza1NpbXVsYXRvck5ldHdvcmsgPSBcImRldm5ldFwiIHwgXCJtYWlubmV0LWJldGFcIjtcblxuZXhwb3J0IHR5cGUgVGFza1J1bm5lclJlc3BvbnNlID0gVGFza1J1bm5lckVycm9yIHwgVGFza1J1bm5lclN1Y2Nlc3M7XG5cbmV4cG9ydCB0eXBlIFRhc2tSdW5uZXJNZXRhID0ge1xuICB0YXNrUnVubmVyVmVyc2lvbjogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVGFza1J1bm5lckVycm9yID0gVGFza1J1bm5lck1ldGEgJiB7XG4gIGVycm9yOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBUYXNrUnVubmVyU3VjY2VzcyA9IFRhc2tSdW5uZXJNZXRhICYge1xuICByZXN1bHRzOiBBcnJheTxCaWc+O1xuICByZXN1bHQ6IEJpZztcbn07XG5cbi8qKlxuICogTWFrZSBhbiBIdHRwIHJlcXVlc3QgdG8gdGhlIHRhc2stcnVubmVyIGVuZHBvaW50IHRvIHNpbXVsYXRlIGFuIE9yYWNsZUpvYiByZXN1bHRcbiAqIEBwYXJhbSBqb2JzIC0gYXJyYXkgb2Yge0B0eXBlIE9yYWNsZUpvYn0gdG8gcnVuXG4gKiBAcGFyYW0gbmV0d29yayAtIHRoZSB0YXNrIHNpbXVsYXRvciBuZXR3b3JrIHRvIHVzZVxuICogQHJldHVybnMgdGhlIHRhc2sgc2ltdWxhdG9yIHJlc3BvbnNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaW11bGF0ZU9yYWNsZUpvYnMoXG4gIGpvYnM6IEFycmF5PE9yYWNsZUpvYj4sXG4gIG5ldHdvcms6IFRhc2tTaW11bGF0b3JOZXR3b3JrID0gXCJtYWlubmV0LWJldGFcIlxuKTogUHJvbWlzZTxUYXNrUnVubmVyUmVzcG9uc2U+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vdGFzay5zd2l0Y2hib2FyZC54eXovc2ltdWxhdGVcIiwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGpvYnM6IGpvYnMubWFwKChqKSA9PiBqLnRvSlNPTigpKSxcbiAgICAgIGNsdXN0ZXI6IG5ldHdvcmssXG4gICAgfSksXG4gIH0pO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRmFpbGVkIHRvIHNpbXVsYXRlIGpvYiBkZWZpbml0aW9uLCBTdGF0dXM9JHtyZXNwb25zZS5zdGF0dXN9YFxuICAgICk7XG4gIH1cbiAgY29uc3QgcGF5bG9hZDoge1xuICAgIHJlc3VsdHM6IEFycmF5PHN0cmluZz47XG4gICAgcmVzdWx0OiBzdHJpbmc7XG4gICAgdGFza19ydW5uZXJfdmVyc2lvbjogc3RyaW5nO1xuICB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0czogcGF5bG9hZC5yZXN1bHRzLm1hcCgocikgPT4gbmV3IEJpZyhyKSksXG4gICAgcmVzdWx0OiBuZXcgQmlnKHBheWxvYWQucmVzdWx0KSxcbiAgICB0YXNrUnVubmVyVmVyc2lvbjogcGF5bG9hZC50YXNrX3J1bm5lcl92ZXJzaW9uLFxuICB9O1xufVxuIl19