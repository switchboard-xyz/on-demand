import { Big } from "big.js";
import BN from "bn.js";
import { Decimal } from "decimal.js";
export interface WeightedValue {
    idx: number;
    value: Big;
    weight: number;
}
export declare function median(results: Array<Big>): Big;
export declare function weightedAverage(v1: Big, w1: Big, v2: Big, w2: Big): Big;
export declare function weightedMedian(results: Array<WeightedValue>): Big;
export declare function min(results: Array<Big>): Big;
export declare function max(results: Array<Big>): Big;
export declare function variance(results: Array<Big>): Big;
export declare function safeDiv(number_: Big, denominator: Big, decimals?: number): Big;
export declare function safeMul(...n: Big[]): Big;
export declare function safeNthRoot(big: Big, nthRoot: number, decimals?: number): Big;
export declare function safeSqrt(n: Big, decimals?: number): Big;
export declare function safePow(n: Big, exp: number, decimals?: number): Big;
/**
 * Convert a BN.js to a Big.js
 * @param n - the BN.js object to convert
 * @param decimals - the number of decimal places to scale the BN.js
 *
 * @returns Big.js
 */
export declare function fromBN(n: BN, decimals?: number): Big;
/**
 * Convert a BigInt to a Big.js
 * @param n - the BigInt to convert
 *
 * @returns Big.js
 */
export declare function fromBigint(n: bigint): Big;
/**
 * Convert a Big.js to a Decimal.js
 * @param big - the Big.js object to convert
 * @param decimals - the number of decimal places
 *
 * @returns Decimal.js
 */
export declare function toDecimal(big: Big, decimals?: number): Decimal;
/**
 * Convert a Decimal.js to a Big.js
 * @param decimal - the Decimal.js object to convert
 * @param decimals - the number of decimal places
 *
 * @returns Big.js
 */
export declare function fromDecimal(decimal: Decimal, decimals?: number): Big;
//# sourceMappingURL=big.d.ts.map