"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SUPPORTED_EVM_CHAIN_IDS = exports.SWITCHBOARD_CHAINS = exports.SWITCHBOARD_EVM_CHAINS = void 0;
///////////////////////////////////////////////////////////////////////////////
/////////////// Supported Chains///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/** The current EVM chains Switchboard is currently deployed on. */
exports.SWITCHBOARD_EVM_CHAINS = [
    "arbitrum",
    "base",
    "coredao",
    "ethereum",
    "optimism",
    "aurora",
];
/** The current chains Switchboard is currently deployed on. */
exports.SWITCHBOARD_CHAINS = [
    "aptos",
    "near",
    "solana",
    "starknet",
    "sui",
    ...exports.SWITCHBOARD_EVM_CHAINS,
];
///////////////////////////////////////////////////////////////////////////////
/////////////// Supported Chain IDs ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
exports.SUPPORTED_EVM_CHAIN_IDS = [
    // arbitrum
    42161, 421613, 421614,
    // base
    8453, 84531,
    // core
    1116, 1115,
    // ethereum
    1, 5,
    // optimism
    10, 420,
    // aurora
    1313161554, 1313161555,
];
///////////////////////////////////////////////////////////////////////////////
/////////////// Supported Networks ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
const EVM_SUPPPORTED_NETWORKS = ["mainnet", "testnet"];
const SUPPPORTED_NETWORKS = [...EVM_SUPPPORTED_NETWORKS, "devnet"];
//# sourceMappingURL=data:application/json;base64,