export const SWITCHBOARD_BASE_MAINNET_CONFIG = {
    chain: "base",
    chainId: 8453,
    networkName: "Mainnet",
    address: "",
    sbPushOracle: "",
    metadata: {
        defaultRpcUrl: "https://mainnet.base.org",
        defaultExplorer: "https://basescan.org",
    },
    queues: [],
    attestationQueues: [
        {
            name: "SwitchboardLabs Attestation Queue",
            address: "",
        },
    ],
};
export const SWITCHBOARD_BASE_TESTNET_CONFIG = {
    chain: "base",
    chainId: 84531,
    networkName: "Goerli",
    address: "0x9640b33Ef3CB1a8b1f943Fb20FB6ff70d5F4DE96",
    sbPushOracle: "0xC29aAabf235c1E71633fb7365E95772B97F425d7",
    metadata: {
        defaultRpcUrl: "https://goerli.base.org",
        defaultExplorer: "https://goerli.basescan.org",
    },
    queues: [],
    attestationQueues: [
        {
            name: "SwitchboardLabs Attestation Queue",
            address: "0x80391284b2C81a2E11696EFb8825412c8D0d2a4d",
        },
    ],
};
/**
@defaultValue the default Base configuration

```json
{
  "mainnet": {
    "chain": "base",
    "chainId": 8453,
    "networkName": "Mainnet",
    "address": "",
    "sbPushOracle": "",
    "metadata": {
      "defaultRpcUrl": "",
      "defaultExplorer": "https://basescan.org"
    },
    "queues": [],
    "attestationQueues": [
      {
        "name": "SwitchboardLabs Attestation Queue",
        "address": ""
      }
    ]
  },
  "testnet": {
    "chain": "base",
    "chainId": 84531,
    "networkName": "Goerli",
    "address": "",
    "sbPushOracle": "",
    "metadata": {
      "defaultRpcUrl": "",
      "defaultExplorer": ""
    },
    "queues": [],
    "attestationQueues": [
      {
        "name": "SwitchboardLabs Attestation Queue",
        "address": ""
      }
    ]
  }
}
```
 */
export const SWITCHBOARD_BASE_CONFIG = {
    mainnet: SWITCHBOARD_BASE_MAINNET_CONFIG,
    testnet: SWITCHBOARD_BASE_TESTNET_CONFIG,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uZXR3b3Jrcy9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFzQjtJQUNoRSxLQUFLLEVBQUUsTUFBTTtJQUNiLE9BQU8sRUFBRSxJQUFJO0lBQ2IsV0FBVyxFQUFFLFNBQVM7SUFDdEIsT0FBTyxFQUFFLEVBQUU7SUFDWCxZQUFZLEVBQUUsRUFBRTtJQUNoQixRQUFRLEVBQUU7UUFDUixhQUFhLEVBQUUsMEJBQTBCO1FBQ3pDLGVBQWUsRUFBRSxzQkFBc0I7S0FDeEM7SUFDRCxNQUFNLEVBQUUsRUFBRTtJQUNWLGlCQUFpQixFQUFFO1FBQ2pCO1lBQ0UsSUFBSSxFQUFFLG1DQUFtQztZQUN6QyxPQUFPLEVBQUUsRUFBRTtTQUNaO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXNCO0lBQ2hFLEtBQUssRUFBRSxNQUFNO0lBQ2IsT0FBTyxFQUFFLEtBQUs7SUFDZCxXQUFXLEVBQUUsUUFBUTtJQUNyQixPQUFPLEVBQUUsNENBQTRDO0lBQ3JELFlBQVksRUFBRSw0Q0FBNEM7SUFDMUQsUUFBUSxFQUFFO1FBQ1IsYUFBYSxFQUFFLHlCQUF5QjtRQUN4QyxlQUFlLEVBQUUsNkJBQTZCO0tBQy9DO0lBQ0QsTUFBTSxFQUFFLEVBQUU7SUFDVixpQkFBaUIsRUFBRTtRQUNqQjtZQUNFLElBQUksRUFBRSxtQ0FBbUM7WUFDekMsT0FBTyxFQUFFLDRDQUE0QztTQUN0RDtLQUNGO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQWlCO0lBQ25ELE9BQU8sRUFBRSwrQkFBK0I7SUFDeEMsT0FBTyxFQUFFLCtCQUErQjtDQUN6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJQ2hhaW5Db25maWcsIElFdm1OZXR3b3JrQ29uZmlnIH0gZnJvbSBcIi4vdHlwZXMuanNcIjtcblxuZXhwb3J0IGNvbnN0IFNXSVRDSEJPQVJEX0JBU0VfTUFJTk5FVF9DT05GSUc6IElFdm1OZXR3b3JrQ29uZmlnID0ge1xuICBjaGFpbjogXCJiYXNlXCIsXG4gIGNoYWluSWQ6IDg0NTMsXG4gIG5ldHdvcmtOYW1lOiBcIk1haW5uZXRcIixcbiAgYWRkcmVzczogXCJcIixcbiAgc2JQdXNoT3JhY2xlOiBcIlwiLFxuICBtZXRhZGF0YToge1xuICAgIGRlZmF1bHRScGNVcmw6IFwiaHR0cHM6Ly9tYWlubmV0LmJhc2Uub3JnXCIsXG4gICAgZGVmYXVsdEV4cGxvcmVyOiBcImh0dHBzOi8vYmFzZXNjYW4ub3JnXCIsXG4gIH0sXG4gIHF1ZXVlczogW10sXG4gIGF0dGVzdGF0aW9uUXVldWVzOiBbXG4gICAge1xuICAgICAgbmFtZTogXCJTd2l0Y2hib2FyZExhYnMgQXR0ZXN0YXRpb24gUXVldWVcIixcbiAgICAgIGFkZHJlc3M6IFwiXCIsXG4gICAgfSxcbiAgXSxcbn07XG5cbmV4cG9ydCBjb25zdCBTV0lUQ0hCT0FSRF9CQVNFX1RFU1RORVRfQ09ORklHOiBJRXZtTmV0d29ya0NvbmZpZyA9IHtcbiAgY2hhaW46IFwiYmFzZVwiLFxuICBjaGFpbklkOiA4NDUzMSxcbiAgbmV0d29ya05hbWU6IFwiR29lcmxpXCIsXG4gIGFkZHJlc3M6IFwiMHg5NjQwYjMzRWYzQ0IxYThiMWY5NDNGYjIwRkI2ZmY3MGQ1RjRERTk2XCIsXG4gIHNiUHVzaE9yYWNsZTogXCIweEMyOWFBYWJmMjM1YzFFNzE2MzNmYjczNjVFOTU3NzJCOTdGNDI1ZDdcIixcbiAgbWV0YWRhdGE6IHtcbiAgICBkZWZhdWx0UnBjVXJsOiBcImh0dHBzOi8vZ29lcmxpLmJhc2Uub3JnXCIsXG4gICAgZGVmYXVsdEV4cGxvcmVyOiBcImh0dHBzOi8vZ29lcmxpLmJhc2VzY2FuLm9yZ1wiLFxuICB9LFxuICBxdWV1ZXM6IFtdLFxuICBhdHRlc3RhdGlvblF1ZXVlczogW1xuICAgIHtcbiAgICAgIG5hbWU6IFwiU3dpdGNoYm9hcmRMYWJzIEF0dGVzdGF0aW9uIFF1ZXVlXCIsXG4gICAgICBhZGRyZXNzOiBcIjB4ODAzOTEyODRiMkM4MWEyRTExNjk2RUZiODgyNTQxMmM4RDBkMmE0ZFwiLFxuICAgIH0sXG4gIF0sXG59O1xuXG4vKipcbkBkZWZhdWx0VmFsdWUgdGhlIGRlZmF1bHQgQmFzZSBjb25maWd1cmF0aW9uXG5cbmBgYGpzb25cbntcbiAgXCJtYWlubmV0XCI6IHtcbiAgICBcImNoYWluXCI6IFwiYmFzZVwiLFxuICAgIFwiY2hhaW5JZFwiOiA4NDUzLFxuICAgIFwibmV0d29ya05hbWVcIjogXCJNYWlubmV0XCIsXG4gICAgXCJhZGRyZXNzXCI6IFwiXCIsXG4gICAgXCJzYlB1c2hPcmFjbGVcIjogXCJcIixcbiAgICBcIm1ldGFkYXRhXCI6IHtcbiAgICAgIFwiZGVmYXVsdFJwY1VybFwiOiBcIlwiLFxuICAgICAgXCJkZWZhdWx0RXhwbG9yZXJcIjogXCJodHRwczovL2Jhc2VzY2FuLm9yZ1wiXG4gICAgfSxcbiAgICBcInF1ZXVlc1wiOiBbXSxcbiAgICBcImF0dGVzdGF0aW9uUXVldWVzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiU3dpdGNoYm9hcmRMYWJzIEF0dGVzdGF0aW9uIFF1ZXVlXCIsXG4gICAgICAgIFwiYWRkcmVzc1wiOiBcIlwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICBcInRlc3RuZXRcIjoge1xuICAgIFwiY2hhaW5cIjogXCJiYXNlXCIsXG4gICAgXCJjaGFpbklkXCI6IDg0NTMxLFxuICAgIFwibmV0d29ya05hbWVcIjogXCJHb2VybGlcIixcbiAgICBcImFkZHJlc3NcIjogXCJcIixcbiAgICBcInNiUHVzaE9yYWNsZVwiOiBcIlwiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJkZWZhdWx0UnBjVXJsXCI6IFwiXCIsXG4gICAgICBcImRlZmF1bHRFeHBsb3JlclwiOiBcIlwiXG4gICAgfSxcbiAgICBcInF1ZXVlc1wiOiBbXSxcbiAgICBcImF0dGVzdGF0aW9uUXVldWVzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiU3dpdGNoYm9hcmRMYWJzIEF0dGVzdGF0aW9uIFF1ZXVlXCIsXG4gICAgICAgIFwiYWRkcmVzc1wiOiBcIlwiXG4gICAgICB9XG4gICAgXVxuICB9XG59XG5gYGBcbiAqL1xuZXhwb3J0IGNvbnN0IFNXSVRDSEJPQVJEX0JBU0VfQ09ORklHOiBJQ2hhaW5Db25maWcgPSB7XG4gIG1haW5uZXQ6IFNXSVRDSEJPQVJEX0JBU0VfTUFJTk5FVF9DT05GSUcsXG4gIHRlc3RuZXQ6IFNXSVRDSEJPQVJEX0JBU0VfVEVTVE5FVF9DT05GSUcsXG59O1xuIl19