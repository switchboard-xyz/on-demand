/// <reference types="node" resolution-mode="require"/>
import type { IOracleJob } from "./protos.js";
import { OracleJob } from "./protos.js";
import { Big } from "big.js";
/**
 * Serialize a stringified OracleJob and replace any json comments
 * @param job - Stringified OracleJob or object with an array of Switchboard tasks defined
 * @throws {String}
 * @returns {OracleJob }
 */
export declare function serializeOracleJob(job: string | IOracleJob | Record<string, any>): OracleJob;
/**
 * Deserialize an OracleJob from on-chain data
 * @param jobData - Serialized OracleJob data
 * @returns {OracleJob}
 */
export declare function deserializeOracleJob(jobData: Buffer | Uint8Array): OracleJob;
export declare function base64EncodeOracleJob(job: string | IOracleJob | Record<string, any>): string;
export type TaskSimulatorNetwork = "devnet" | "mainnet-beta";
export type TaskRunnerResponse = TaskRunnerError | TaskRunnerSuccess;
export type TaskRunnerMeta = {
    taskRunnerVersion: string;
};
export type TaskRunnerError = TaskRunnerMeta & {
    error: string;
};
export type TaskRunnerSuccess = TaskRunnerMeta & {
    results: Array<Big>;
    result: Big;
};
/**
 * Make an Http request to the task-runner endpoint to simulate an OracleJob result
 * @param jobs - array of {@type OracleJob} to run
 * @param network - the task simulator network to use
 * @returns the task simulator response
 */
export declare function simulateOracleJobs(jobs: Array<OracleJob>, network?: TaskSimulatorNetwork): Promise<TaskRunnerResponse>;
//# sourceMappingURL=OracleJob.d.ts.map