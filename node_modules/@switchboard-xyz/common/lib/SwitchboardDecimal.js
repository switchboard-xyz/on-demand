import { fromBN } from "./big.js";
import { Big } from "big.js";
import BN from "bn.js";
/**
 * Switchboard precisioned representation of numbers.
 */
export class SwitchboardDecimal {
    mantissa;
    scale;
    constructor(mantissa, scale) {
        this.mantissa = mantissa;
        this.scale = scale;
    }
    /**
     * Convert untyped object to a Switchboard decimal, if possible.
     * @param obj raw object to convert from
     * @return SwitchboardDecimal
     */
    static from(obj) {
        return new SwitchboardDecimal(new BN(obj.mantissa), obj.scale);
    }
    /**
     * Convert a Big.js decimal to a Switchboard decimal.
     * @param big a Big.js decimal
     * @return a SwitchboardDecimal
     */
    static fromBig(big) {
        // Round to fit in Switchboard Decimal
        // TODO: smarter logic.
        big = big.round(20);
        let mantissa = new BN(big.c.join(""), 10);
        // Set the scale. Big.exponenet sets scale from the opposite side
        // SwitchboardDecimal does.
        let scale = big.c.slice(1).length - big.e;
        if (scale < 0) {
            mantissa = mantissa.mul(new BN(10, 10).pow(new BN(Math.abs(scale), 10)));
            scale = 0;
        }
        if (scale < 0) {
            throw new Error(`SwitchboardDecimal: Unexpected negative scale.`);
        }
        if (scale >= 28) {
            throw new Error("SwitchboardDecimalExcessiveScaleError");
        }
        // Set sign for the coefficient (mantissa)
        mantissa = mantissa.mul(new BN(big.s, 10));
        const result = new SwitchboardDecimal(mantissa, scale);
        if (big.sub(result.toBig()).abs().gt(new Big(0.00005))) {
            throw new Error(`SwitchboardDecimal: Converted decimal does not match original:\n` +
                `out: ${result.toBig().toNumber()} vs in: ${big.toNumber()}\n` +
                `-- result mantissa and scale: ${result.mantissa.toString()} ${result.scale.toString()}\n` +
                `${result} ${result.toBig()}`);
        }
        return result;
    }
    /**
     * SwitchboardDecimal equality comparator.
     * @param other object to compare to.
     * @return true iff equal
     */
    eq(other) {
        return this.mantissa.eq(other.mantissa) && this.scale === other.scale;
    }
    get big() {
        return this.toBig();
    }
    /**
     * Convert SwitchboardDecimal to big.js Big type.
     * @return Big representation
     */
    toBig() {
        return fromBN(this.mantissa, this.scale);
    }
    toString() {
        return this.big.toString();
    }
    toJSON() {
        return {
            mantissa: this.mantissa.toString(10),
            scale: this.scale,
            value: this.toString(),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpdGNoYm9hcmREZWNpbWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1N3aXRjaGJvYXJkRGVjaW1hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDN0IsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3ZCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUVYO0lBQ0E7SUFGbEIsWUFDa0IsUUFBWSxFQUNaLEtBQWE7UUFEYixhQUFRLEdBQVIsUUFBUSxDQUFJO1FBQ1osVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUM1QixDQUFDO0lBRUo7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBUTtRQUN6QixPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBUTtRQUM1QixzQ0FBc0M7UUFDdEMsdUJBQXVCO1FBQ3ZCLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLElBQUksUUFBUSxHQUFPLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLGlFQUFpRTtRQUNqRSwyQkFBMkI7UUFDM0IsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFMUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDZCxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDO1FBQ0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7UUFDcEUsQ0FBQztRQUNELElBQUksS0FBSyxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBRUQsMENBQTBDO1FBQzFDLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUzQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2RCxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN2RCxNQUFNLElBQUksS0FBSyxDQUNiLGtFQUFrRTtnQkFDaEUsUUFBUSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLFdBQVcsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJO2dCQUM5RCxpQ0FBaUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJO2dCQUMxRixHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDaEMsQ0FBQztRQUNKLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEVBQUUsQ0FBQyxLQUF5QjtRQUNqQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDeEUsQ0FBQztJQUVELElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLO1FBQ1YsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNwQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7U0FDdkIsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21CTiB9IGZyb20gXCIuL2JpZy5qc1wiO1xuXG5pbXBvcnQgeyBCaWcgfSBmcm9tIFwiYmlnLmpzXCI7XG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCI7XG4vKipcbiAqIFN3aXRjaGJvYXJkIHByZWNpc2lvbmVkIHJlcHJlc2VudGF0aW9uIG9mIG51bWJlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTd2l0Y2hib2FyZERlY2ltYWwge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG1hbnRpc3NhOiBCTixcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2NhbGU6IG51bWJlclxuICApIHt9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdW50eXBlZCBvYmplY3QgdG8gYSBTd2l0Y2hib2FyZCBkZWNpbWFsLCBpZiBwb3NzaWJsZS5cbiAgICogQHBhcmFtIG9iaiByYXcgb2JqZWN0IHRvIGNvbnZlcnQgZnJvbVxuICAgKiBAcmV0dXJuIFN3aXRjaGJvYXJkRGVjaW1hbFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tKG9iajogYW55KTogU3dpdGNoYm9hcmREZWNpbWFsIHtcbiAgICByZXR1cm4gbmV3IFN3aXRjaGJvYXJkRGVjaW1hbChuZXcgQk4ob2JqLm1hbnRpc3NhKSwgb2JqLnNjYWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgQmlnLmpzIGRlY2ltYWwgdG8gYSBTd2l0Y2hib2FyZCBkZWNpbWFsLlxuICAgKiBAcGFyYW0gYmlnIGEgQmlnLmpzIGRlY2ltYWxcbiAgICogQHJldHVybiBhIFN3aXRjaGJvYXJkRGVjaW1hbFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQmlnKGJpZzogQmlnKTogU3dpdGNoYm9hcmREZWNpbWFsIHtcbiAgICAvLyBSb3VuZCB0byBmaXQgaW4gU3dpdGNoYm9hcmQgRGVjaW1hbFxuICAgIC8vIFRPRE86IHNtYXJ0ZXIgbG9naWMuXG4gICAgYmlnID0gYmlnLnJvdW5kKDIwKTtcbiAgICBsZXQgbWFudGlzc2E6IEJOID0gbmV3IEJOKGJpZy5jLmpvaW4oXCJcIiksIDEwKTtcbiAgICAvLyBTZXQgdGhlIHNjYWxlLiBCaWcuZXhwb25lbmV0IHNldHMgc2NhbGUgZnJvbSB0aGUgb3Bwb3NpdGUgc2lkZVxuICAgIC8vIFN3aXRjaGJvYXJkRGVjaW1hbCBkb2VzLlxuICAgIGxldCBzY2FsZSA9IGJpZy5jLnNsaWNlKDEpLmxlbmd0aCAtIGJpZy5lO1xuXG4gICAgaWYgKHNjYWxlIDwgMCkge1xuICAgICAgbWFudGlzc2EgPSBtYW50aXNzYS5tdWwobmV3IEJOKDEwLCAxMCkucG93KG5ldyBCTihNYXRoLmFicyhzY2FsZSksIDEwKSkpO1xuICAgICAgc2NhbGUgPSAwO1xuICAgIH1cbiAgICBpZiAoc2NhbGUgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN3aXRjaGJvYXJkRGVjaW1hbDogVW5leHBlY3RlZCBuZWdhdGl2ZSBzY2FsZS5gKTtcbiAgICB9XG4gICAgaWYgKHNjYWxlID49IDI4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTd2l0Y2hib2FyZERlY2ltYWxFeGNlc3NpdmVTY2FsZUVycm9yXCIpO1xuICAgIH1cblxuICAgIC8vIFNldCBzaWduIGZvciB0aGUgY29lZmZpY2llbnQgKG1hbnRpc3NhKVxuICAgIG1hbnRpc3NhID0gbWFudGlzc2EubXVsKG5ldyBCTihiaWcucywgMTApKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTd2l0Y2hib2FyZERlY2ltYWwobWFudGlzc2EsIHNjYWxlKTtcbiAgICBpZiAoYmlnLnN1YihyZXN1bHQudG9CaWcoKSkuYWJzKCkuZ3QobmV3IEJpZygwLjAwMDA1KSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFN3aXRjaGJvYXJkRGVjaW1hbDogQ29udmVydGVkIGRlY2ltYWwgZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWw6XFxuYCArXG4gICAgICAgICAgYG91dDogJHtyZXN1bHQudG9CaWcoKS50b051bWJlcigpfSB2cyBpbjogJHtiaWcudG9OdW1iZXIoKX1cXG5gICtcbiAgICAgICAgICBgLS0gcmVzdWx0IG1hbnRpc3NhIGFuZCBzY2FsZTogJHtyZXN1bHQubWFudGlzc2EudG9TdHJpbmcoKX0gJHtyZXN1bHQuc2NhbGUudG9TdHJpbmcoKX1cXG5gICtcbiAgICAgICAgICBgJHtyZXN1bHR9ICR7cmVzdWx0LnRvQmlnKCl9YFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2hib2FyZERlY2ltYWwgZXF1YWxpdHkgY29tcGFyYXRvci5cbiAgICogQHBhcmFtIG90aGVyIG9iamVjdCB0byBjb21wYXJlIHRvLlxuICAgKiBAcmV0dXJuIHRydWUgaWZmIGVxdWFsXG4gICAqL1xuICBwdWJsaWMgZXEob3RoZXI6IFN3aXRjaGJvYXJkRGVjaW1hbCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1hbnRpc3NhLmVxKG90aGVyLm1hbnRpc3NhKSAmJiB0aGlzLnNjYWxlID09PSBvdGhlci5zY2FsZTtcbiAgfVxuXG4gIGdldCBiaWcoKTogQmlnIHtcbiAgICByZXR1cm4gdGhpcy50b0JpZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgU3dpdGNoYm9hcmREZWNpbWFsIHRvIGJpZy5qcyBCaWcgdHlwZS5cbiAgICogQHJldHVybiBCaWcgcmVwcmVzZW50YXRpb25cbiAgICovXG4gIHB1YmxpYyB0b0JpZygpOiBCaWcge1xuICAgIHJldHVybiBmcm9tQk4odGhpcy5tYW50aXNzYSwgdGhpcy5zY2FsZSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5iaWcudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFudGlzc2E6IHRoaXMubWFudGlzc2EudG9TdHJpbmcoMTApLFxuICAgICAgc2NhbGU6IHRoaXMuc2NhbGUsXG4gICAgICB2YWx1ZTogdGhpcy50b1N0cmluZygpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==