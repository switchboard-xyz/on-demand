"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwitchboardDecimal = void 0;
const big_js_1 = require("./big.cjs");
const big_js_2 = require("big.js");
const bn_js_1 = __importDefault(require("bn.js"));
/**
 * Switchboard precisioned representation of numbers.
 */
class SwitchboardDecimal {
    mantissa;
    scale;
    constructor(mantissa, scale) {
        this.mantissa = mantissa;
        this.scale = scale;
    }
    /**
     * Convert untyped object to a Switchboard decimal, if possible.
     * @param obj raw object to convert from
     * @return SwitchboardDecimal
     */
    static from(obj) {
        return new SwitchboardDecimal(new bn_js_1.default(obj.mantissa), obj.scale);
    }
    /**
     * Convert a Big.js decimal to a Switchboard decimal.
     * @param big a Big.js decimal
     * @return a SwitchboardDecimal
     */
    static fromBig(big) {
        // Round to fit in Switchboard Decimal
        // TODO: smarter logic.
        big = big.round(20);
        let mantissa = new bn_js_1.default(big.c.join(""), 10);
        // Set the scale. Big.exponenet sets scale from the opposite side
        // SwitchboardDecimal does.
        let scale = big.c.slice(1).length - big.e;
        if (scale < 0) {
            mantissa = mantissa.mul(new bn_js_1.default(10, 10).pow(new bn_js_1.default(Math.abs(scale), 10)));
            scale = 0;
        }
        if (scale < 0) {
            throw new Error(`SwitchboardDecimal: Unexpected negative scale.`);
        }
        if (scale >= 28) {
            throw new Error("SwitchboardDecimalExcessiveScaleError");
        }
        // Set sign for the coefficient (mantissa)
        mantissa = mantissa.mul(new bn_js_1.default(big.s, 10));
        const result = new SwitchboardDecimal(mantissa, scale);
        if (big.sub(result.toBig()).abs().gt(new big_js_2.Big(0.00005))) {
            throw new Error(`SwitchboardDecimal: Converted decimal does not match original:\n` +
                `out: ${result.toBig().toNumber()} vs in: ${big.toNumber()}\n` +
                `-- result mantissa and scale: ${result.mantissa.toString()} ${result.scale.toString()}\n` +
                `${result} ${result.toBig()}`);
        }
        return result;
    }
    /**
     * SwitchboardDecimal equality comparator.
     * @param other object to compare to.
     * @return true iff equal
     */
    eq(other) {
        return this.mantissa.eq(other.mantissa) && this.scale === other.scale;
    }
    get big() {
        return this.toBig();
    }
    /**
     * Convert SwitchboardDecimal to big.js Big type.
     * @return Big representation
     */
    toBig() {
        return (0, big_js_1.fromBN)(this.mantissa, this.scale);
    }
    toString() {
        return this.big.toString();
    }
    toJSON() {
        return {
            mantissa: this.mantissa.toString(10),
            scale: this.scale,
            value: this.toString(),
        };
    }
}
exports.SwitchboardDecimal = SwitchboardDecimal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpdGNoYm9hcmREZWNpbWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1N3aXRjaGJvYXJkRGVjaW1hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQ0FBa0M7QUFFbEMsbUNBQTZCO0FBQzdCLGtEQUF1QjtBQUN2Qjs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBRVg7SUFDQTtJQUZsQixZQUNrQixRQUFZLEVBQ1osS0FBYTtRQURiLGFBQVEsR0FBUixRQUFRLENBQUk7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFRO0lBQzVCLENBQUM7SUFFSjs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFRO1FBQ3pCLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFRO1FBQzVCLHNDQUFzQztRQUN0Qyx1QkFBdUI7UUFDdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEIsSUFBSSxRQUFRLEdBQU8sSUFBSSxlQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUMsaUVBQWlFO1FBQ2pFLDJCQUEyQjtRQUMzQixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUxQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNkLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekUsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNaLENBQUM7UUFDRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBQ0QsSUFBSSxLQUFLLElBQUksRUFBRSxFQUFFLENBQUM7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBQzNELENBQUM7UUFFRCwwQ0FBMEM7UUFDMUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTNDLE1BQU0sTUFBTSxHQUFHLElBQUksa0JBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQ2Isa0VBQWtFO2dCQUNoRSxRQUFRLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUk7Z0JBQzlELGlDQUFpQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUk7Z0JBQzFGLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksRUFBRSxDQUFDLEtBQXlCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUs7UUFDVixPQUFPLElBQUEsZUFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTztZQUNMLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDcEMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO1NBQ3ZCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF2RkQsZ0RBdUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUJOIH0gZnJvbSBcIi4vYmlnLmpzXCI7XG5cbmltcG9ydCB7IEJpZyB9IGZyb20gXCJiaWcuanNcIjtcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcbi8qKlxuICogU3dpdGNoYm9hcmQgcHJlY2lzaW9uZWQgcmVwcmVzZW50YXRpb24gb2YgbnVtYmVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN3aXRjaGJvYXJkRGVjaW1hbCB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWFudGlzc2E6IEJOLFxuICAgIHB1YmxpYyByZWFkb25seSBzY2FsZTogbnVtYmVyXG4gICkge31cblxuICAvKipcbiAgICogQ29udmVydCB1bnR5cGVkIG9iamVjdCB0byBhIFN3aXRjaGJvYXJkIGRlY2ltYWwsIGlmIHBvc3NpYmxlLlxuICAgKiBAcGFyYW0gb2JqIHJhdyBvYmplY3QgdG8gY29udmVydCBmcm9tXG4gICAqIEByZXR1cm4gU3dpdGNoYm9hcmREZWNpbWFsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb20ob2JqOiBhbnkpOiBTd2l0Y2hib2FyZERlY2ltYWwge1xuICAgIHJldHVybiBuZXcgU3dpdGNoYm9hcmREZWNpbWFsKG5ldyBCTihvYmoubWFudGlzc2EpLCBvYmouc2NhbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBCaWcuanMgZGVjaW1hbCB0byBhIFN3aXRjaGJvYXJkIGRlY2ltYWwuXG4gICAqIEBwYXJhbSBiaWcgYSBCaWcuanMgZGVjaW1hbFxuICAgKiBAcmV0dXJuIGEgU3dpdGNoYm9hcmREZWNpbWFsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21CaWcoYmlnOiBCaWcpOiBTd2l0Y2hib2FyZERlY2ltYWwge1xuICAgIC8vIFJvdW5kIHRvIGZpdCBpbiBTd2l0Y2hib2FyZCBEZWNpbWFsXG4gICAgLy8gVE9ETzogc21hcnRlciBsb2dpYy5cbiAgICBiaWcgPSBiaWcucm91bmQoMjApO1xuICAgIGxldCBtYW50aXNzYTogQk4gPSBuZXcgQk4oYmlnLmMuam9pbihcIlwiKSwgMTApO1xuICAgIC8vIFNldCB0aGUgc2NhbGUuIEJpZy5leHBvbmVuZXQgc2V0cyBzY2FsZSBmcm9tIHRoZSBvcHBvc2l0ZSBzaWRlXG4gICAgLy8gU3dpdGNoYm9hcmREZWNpbWFsIGRvZXMuXG4gICAgbGV0IHNjYWxlID0gYmlnLmMuc2xpY2UoMSkubGVuZ3RoIC0gYmlnLmU7XG5cbiAgICBpZiAoc2NhbGUgPCAwKSB7XG4gICAgICBtYW50aXNzYSA9IG1hbnRpc3NhLm11bChuZXcgQk4oMTAsIDEwKS5wb3cobmV3IEJOKE1hdGguYWJzKHNjYWxlKSwgMTApKSk7XG4gICAgICBzY2FsZSA9IDA7XG4gICAgfVxuICAgIGlmIChzY2FsZSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3dpdGNoYm9hcmREZWNpbWFsOiBVbmV4cGVjdGVkIG5lZ2F0aXZlIHNjYWxlLmApO1xuICAgIH1cbiAgICBpZiAoc2NhbGUgPj0gMjgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN3aXRjaGJvYXJkRGVjaW1hbEV4Y2Vzc2l2ZVNjYWxlRXJyb3JcIik7XG4gICAgfVxuXG4gICAgLy8gU2V0IHNpZ24gZm9yIHRoZSBjb2VmZmljaWVudCAobWFudGlzc2EpXG4gICAgbWFudGlzc2EgPSBtYW50aXNzYS5tdWwobmV3IEJOKGJpZy5zLCAxMCkpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFN3aXRjaGJvYXJkRGVjaW1hbChtYW50aXNzYSwgc2NhbGUpO1xuICAgIGlmIChiaWcuc3ViKHJlc3VsdC50b0JpZygpKS5hYnMoKS5ndChuZXcgQmlnKDAuMDAwMDUpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgU3dpdGNoYm9hcmREZWNpbWFsOiBDb252ZXJ0ZWQgZGVjaW1hbCBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbDpcXG5gICtcbiAgICAgICAgICBgb3V0OiAke3Jlc3VsdC50b0JpZygpLnRvTnVtYmVyKCl9IHZzIGluOiAke2JpZy50b051bWJlcigpfVxcbmAgK1xuICAgICAgICAgIGAtLSByZXN1bHQgbWFudGlzc2EgYW5kIHNjYWxlOiAke3Jlc3VsdC5tYW50aXNzYS50b1N0cmluZygpfSAke3Jlc3VsdC5zY2FsZS50b1N0cmluZygpfVxcbmAgK1xuICAgICAgICAgIGAke3Jlc3VsdH0gJHtyZXN1bHQudG9CaWcoKX1gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFN3aXRjaGJvYXJkRGVjaW1hbCBlcXVhbGl0eSBjb21wYXJhdG9yLlxuICAgKiBAcGFyYW0gb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUgdG8uXG4gICAqIEByZXR1cm4gdHJ1ZSBpZmYgZXF1YWxcbiAgICovXG4gIHB1YmxpYyBlcShvdGhlcjogU3dpdGNoYm9hcmREZWNpbWFsKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWFudGlzc2EuZXEob3RoZXIubWFudGlzc2EpICYmIHRoaXMuc2NhbGUgPT09IG90aGVyLnNjYWxlO1xuICB9XG5cbiAgZ2V0IGJpZygpOiBCaWcge1xuICAgIHJldHVybiB0aGlzLnRvQmlnKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBTd2l0Y2hib2FyZERlY2ltYWwgdG8gYmlnLmpzIEJpZyB0eXBlLlxuICAgKiBAcmV0dXJuIEJpZyByZXByZXNlbnRhdGlvblxuICAgKi9cbiAgcHVibGljIHRvQmlnKCk6IEJpZyB7XG4gICAgcmV0dXJuIGZyb21CTih0aGlzLm1hbnRpc3NhLCB0aGlzLnNjYWxlKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmJpZy50b1N0cmluZygpO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYW50aXNzYTogdGhpcy5tYW50aXNzYS50b1N0cmluZygxMCksXG4gICAgICBzY2FsZTogdGhpcy5zY2FsZSxcbiAgICAgIHZhbHVlOiB0aGlzLnRvU3RyaW5nKCksXG4gICAgfTtcbiAgfVxufVxuIl19