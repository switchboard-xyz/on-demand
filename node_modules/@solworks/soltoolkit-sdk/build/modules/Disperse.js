"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Disperse = void 0;
const web3_js_1 = require("@solana/web3.js");
const Logger_1 = require("./Logger");
const TransactionBuilder_1 = require("./TransactionBuilder");
class Disperse {
    constructor(values) {
        this._logger = new Logger_1.Logger('@soltoolkit/Disperse');
        this._logger.debug(`Disperse constructor called with values: ${JSON.stringify(values, null, 2)}`);
        this._config = values;
    }
    static create(values) {
        return new Disperse(values);
    }
    generateTransactions() {
        return __awaiter(this, void 0, void 0, function* () {
            const transactions = [];
            const { tokenType, transfers, sender, fixedAmount, recipients } = this._config;
            switch (tokenType) {
                case 'SOL':
                    {
                        // bundle 18 ixs per tx
                        let txBuilder = TransactionBuilder_1.TransactionBuilder.create();
                        if (fixedAmount) {
                            if (recipients === undefined) {
                                throw new Error('recipients must be defined if fixedAmount is true');
                            }
                            else {
                                for (let x = 0; x < recipients.length; x++) {
                                    // add ix
                                    txBuilder = txBuilder.addSolTransferIx({
                                        from: sender,
                                        to: new web3_js_1.PublicKey(recipients[x]),
                                        amountLamports: fixedAmount
                                    });
                                    // check if tx is full
                                    if (x % 18 === 0 || x === recipients.length - 1) {
                                        txBuilder = txBuilder.addMemoIx({
                                            memo: "gm! Testing SolToolkit's Disperse module build dispersing SOL ðŸ‘€",
                                            signer: sender,
                                        });
                                        this._logger.debug(`Creating new transaction for SOL transfer ${x}`);
                                        transactions.push(txBuilder.build());
                                        txBuilder = txBuilder.reset();
                                    }
                                }
                            }
                        }
                        else {
                            if (transfers === undefined) {
                                throw new Error('transfers must be defined if fixedAmount is false');
                            }
                            for (var x = 0; x < transfers.length; x++) {
                                this._logger.debug(`Adding SOL ix ${x} to existing transaction`);
                                txBuilder = txBuilder.addSolTransferIx({
                                    from: sender,
                                    to: new web3_js_1.PublicKey(transfers[x].recipient),
                                    amountLamports: transfers[x].amount
                                });
                                if (x % 18 === 0 || x === transfers.length - 1) {
                                    txBuilder = txBuilder.addMemoIx({
                                        memo: "gm! Testing SolToolkit with the Disperse module ðŸ‘€",
                                        signer: sender,
                                    });
                                    this._logger.debug(`Creating new transaction for SOL transfer ${x}`);
                                    transactions.push(txBuilder.build());
                                    txBuilder = txBuilder.reset();
                                }
                            }
                        }
                    }
                    break;
                case 'SPL':
                    throw new Error('SPL token type not yet implemented');
                default:
                    throw new Error(`Invalid token type: ${tokenType}`);
            }
            return transactions;
        });
    }
}
exports.Disperse = Disperse;
