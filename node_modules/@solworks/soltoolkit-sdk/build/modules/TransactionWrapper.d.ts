/// <reference types="node" />
import { Transaction, Connection, PublicKey, ConnectionConfig, Commitment, Signer, SendOptions } from '@solana/web3.js';
import { IWallet } from '../interfaces/IWallet';
import { ConnectionManager } from './ConnectionManager';
export declare class TransactionWrapper {
    private _transactions;
    private _connection;
    private _logger;
    private _feePayer?;
    private constructor();
    static create({ transaction, transactions, rpcEndpoint, connection, connectionManager, config, changeConn }: {
        transaction?: Transaction;
        transactions?: Transaction[];
        rpcEndpoint?: string;
        connection?: Connection;
        connectionManager?: ConnectionManager;
        signer?: PublicKey;
        config?: ConnectionConfig;
        changeConn?: boolean;
    }): TransactionWrapper;
    sendAndConfirm({ serialisedTx, maximumRetries, commitment }: {
        serialisedTx: Uint8Array | Buffer | number[];
        maximumRetries?: number;
        commitment?: Commitment;
    }): Promise<string>;
    addBlockhashAndFeePayer(feePayer?: PublicKey): Promise<this>;
    sign({ wallet, signers, txs }: {
        wallet?: IWallet;
        signers?: Signer[];
        txs?: Transaction[];
    }): Promise<Transaction[]>;
    sendTx({ serialisedTx }: {
        serialisedTx: Uint8Array | Buffer | number[];
    }): Promise<string>;
    sendTxUsingJito({ serialisedTx, sendOptions, region }: {
        serialisedTx: Uint8Array | Buffer | number[];
        sendOptions: SendOptions;
        region: JitoRegion;
    }): Promise<string>;
    confirmTx({ signature, commitment }: {
        signature: string;
        commitment?: Commitment;
    }): Promise<import("@solana/web3.js").RpcResponseAndContext<import("@solana/web3.js").SignatureResult>>;
    static confirmTx({ connection, connectionManager, signature, commitment, changeConn, airdrop }: {
        connection?: Connection;
        connectionManager?: ConnectionManager;
        signature: string;
        commitment?: Commitment;
        changeConn?: boolean;
        airdrop?: boolean;
    }): Promise<import("@solana/web3.js").RpcResponseAndContext<import("@solana/web3.js").SignatureResult>>;
}
export type JitoRegion = 'mainnet' | 'amsterdam' | 'frankfurt' | 'ny' | 'tokyo';
export declare const JitoEndpoints: {
    mainnet: string;
    amsterdam: string;
    frankfurt: string;
    ny: string;
    tokyo: string;
};
export declare function getJitoEndpoint(region: JitoRegion): string;
/**
 * Send a transaction using Jito. This only supports sending a single transaction on mainnet only.
 * See https://jito-labs.gitbook.io/mev/searcher-resources/json-rpc-api-reference/transactions-endpoint/sendtransaction.
 * @param args.serialisedTx - A single transaction to be sent, in serialised form
 * @param args.sendOptions - Options for sending the transaction. Skip preflight is set to true by default
 * @param args.region - The region of the Jito endpoint to use
 * @returns - The signature of the transaction
*/
export declare function sendTxWithJito({ serialisedTx, sendOptions, region }: {
    serialisedTx: Uint8Array | Buffer | number[];
    sendOptions: SendOptions;
    region: JitoRegion;
}): Promise<string>;
