import { Transaction, TransactionInstruction, Connection, PublicKey, Signer } from '@solana/web3.js';
import { ConnectionManager } from './ConnectionManager';
export declare const MEMO_PROGRAM_ID: PublicKey;
export declare class TransactionBuilder {
    private _transaction;
    private _instructions;
    private _logger;
    private constructor();
    static create(): TransactionBuilder;
    addCreateTokenAccountIx({ connectionOrConnectionManager, mint, owner, payer }: {
        connectionOrConnectionManager: Connection | ConnectionManager;
        mint: PublicKey;
        owner: PublicKey;
        payer: PublicKey;
    }): Promise<TransactionBuilder>;
    addSolTransferIx({ from, to, amountLamports }: {
        from: PublicKey;
        to: PublicKey;
        amountLamports: number;
    }): this;
    addSplTransferIx({ fromTokenAccount, toTokenAccount, rawAmount, owner, additionalSigners }: {
        fromTokenAccount: PublicKey;
        toTokenAccount: PublicKey;
        rawAmount: number;
        owner: PublicKey;
        additionalSigners?: Signer[];
    }): this;
    addMemoIx({ memo, signer }: {
        memo: string;
        signer: PublicKey;
    }): this;
    addComputeBudgetIx({ units }: {
        units: number;
    }): this;
    addIx(instruction: TransactionInstruction | TransactionInstruction[]): TransactionBuilder;
    reset(): TransactionBuilder;
    build(): Transaction;
    private logNumberOfIxs;
}
