"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * A class for resolving .sol domains to public keys.
 */
class SNSDomainResolver {
    /**
     * Get the first .sol domain associated with an address.
     * @param address Public key or address string.
     * @returns The domain as a string or null if not found.
     */
    static getDomainFromAddress(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const addressString = typeof address === 'string' ? address : address.toBase58();
            const url = `https://sns-sdk-proxy.bonfida.workers.dev/domains/${addressString}`;
            try {
                const response = yield (0, node_fetch_1.default)(url);
                const json = yield response.json();
                return json.result.sort((a, b) => a.key.localeCompare(b.key))[0].domain;
            }
            catch (e) {
                return null;
            }
        });
    }
    /**
     * Get all .sol domains associated with an address.
     * @param address Public key or address string.
     * @returns The domains as an array of strings or null if not found.
     */
    static getDomainsFromAddress(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const addressString = typeof address === 'string' ? address : address.toBase58();
            const url = `https://sns-sdk-proxy.bonfida.workers.dev/domains/${addressString}`;
            try {
                const response = yield (0, node_fetch_1.default)(url);
                const json = yield response.json();
                return json.result.sort((a, b) => a.key.localeCompare(b.key)).map(r => r.domain);
            }
            catch (e) {
                return null;
            }
        });
    }
}
exports.default = SNSDomainResolver;
