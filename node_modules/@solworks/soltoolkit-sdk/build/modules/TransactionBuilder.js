"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = exports.MEMO_PROGRAM_ID = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const ConnectionManager_1 = require("./ConnectionManager");
const Logger_1 = require("./Logger");
exports.MEMO_PROGRAM_ID = new web3_js_1.PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');
class TransactionBuilder {
    constructor() {
        this._logger = new Logger_1.Logger('@soltoolkit/TransactionBuilder');
        this.logNumberOfIxs = () => this._logger.debug(`instruction count: ${this._instructions.length}`);
        this._transaction = new web3_js_1.Transaction();
        this._instructions = [];
    }
    static create() {
        return new TransactionBuilder();
    }
    addCreateTokenAccountIx({ connectionOrConnectionManager, mint, owner, payer }) {
        return __awaiter(this, void 0, void 0, function* () {
            var connection;
            if (connectionOrConnectionManager instanceof web3_js_1.Connection) {
                connection = connectionOrConnectionManager;
            }
            else if (connectionOrConnectionManager instanceof ConnectionManager_1.ConnectionManager) {
                connection = connectionOrConnectionManager._connection;
            }
            else {
                throw new Error('Invalid connectionOrConnectionManager');
            }
            const associatedAddr = (0, spl_token_1.getAssociatedTokenAddressSync)(mint, owner);
            const accInfo = yield connection.getAccountInfo(associatedAddr);
            if (accInfo !== null) {
                const ix = (0, spl_token_1.createAssociatedTokenAccountInstruction)(payer, associatedAddr, owner, mint);
                this.addIx(ix);
            }
            return this;
        });
    }
    addSolTransferIx({ from, to, amountLamports }) {
        const ix = web3_js_1.SystemProgram.transfer({
            fromPubkey: from,
            toPubkey: to,
            lamports: amountLamports
        });
        this.addIx(ix);
        return this;
    }
    addSplTransferIx({ fromTokenAccount, toTokenAccount, rawAmount, owner, additionalSigners }) {
        const ix = (0, spl_token_1.createTransferInstruction)(fromTokenAccount, toTokenAccount, owner, rawAmount, additionalSigners);
        this.addIx(ix);
        return this;
    }
    addMemoIx({ memo, signer }) {
        const ix = new web3_js_1.TransactionInstruction({
            keys: [{ pubkey: signer, isSigner: true, isWritable: true }],
            data: Buffer.from(memo),
            programId: new web3_js_1.PublicKey(exports.MEMO_PROGRAM_ID)
        });
        this.addIx(ix);
        return this;
    }
    addComputeBudgetIx({ units }) {
        const ix = web3_js_1.ComputeBudgetProgram.requestUnits({
            units,
            additionalFee: 0
        });
        this._instructions.unshift(ix);
        return this;
    }
    addIx(instruction) {
        this._instructions = this._instructions.concat(instruction);
        this.logNumberOfIxs();
        return this;
    }
    reset() {
        this._transaction = new web3_js_1.Transaction();
        this._instructions = [];
        this._logger.warn('resetting builder');
        return this;
    }
    build() {
        this.logNumberOfIxs();
        this._transaction.instructions = this._instructions;
        return this._transaction;
    }
}
exports.TransactionBuilder = TransactionBuilder;
