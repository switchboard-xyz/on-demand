import { Connection, PublicKey, Signer, Transaction, TransactionInstruction } from "@solana/web3.js";
import { ConnectionManager } from "./ConnectionManager";
import { getAssociatedTokenAddressSync } from "@solana/spl-token";
/**
 * Helper class for building Solana transactions.
 */
export declare class TransactionHelper {
    /**
     * Sourced from: https://solana.stackexchange.com/questions/5628/is-there-a-way-to-estimate-the-transaction-size
     * @param tx a solana transaction
     * @param feePayer the publicKey of the signer
     * @returns size in bytes of the transaction
     */
    static getTxSize(tx: Transaction, feePayer: PublicKey): number;
    static LOW_VALUE: number;
    static HIGH_VALUE: number;
    /**
    * Compact u16 array header size
    * @param n elements in the compact array
    * @returns size in bytes of array header
    */
    static compactHeader: (n: number) => 2 | 1 | 3;
    /**
    * Compact u16 array size
    * @param n elements in the compact array
    * @param size bytes per each element
    * @returns size in bytes of array
    */
    static compactArraySize: (n: number, size: number) => number;
    /**
     * Creates a token account creation instruction if account does not exist already.
     * @param connectionOrConnectionManager The connection or connection manager.
     * @param mint The mint public key.
     * @param owner The owner public key.
     * @param payer The payer public key.
     * @returns A promise that resolves to a TransactionInstruction or null.
     */
    static createTokenAccountIx({ connectionOrConnectionManager, mint, owner, payer }: {
        connectionOrConnectionManager: Connection | ConnectionManager;
        mint: PublicKey;
        owner: PublicKey;
        payer: PublicKey;
    }): Promise<TransactionInstruction | null>;
    /**
     * Creates a Solana transfer instruction.
     * @param from The public key of the sender.
     * @param to The public key of the recipient.
     * @param amountLamports The amount of lamports to transfer.
     * @returns The transfer instruction.
     */
    static createSolTransferIx({ from, to, amountLamports }: {
        from: PublicKey;
        to: PublicKey;
        amountLamports: number;
    }): TransactionInstruction;
    /**
     * Creates a transaction instruction for transferring SPL tokens.
     *
     * @param fromTokenAccount The public key of the token account to transfer from.
     * @param toTokenAccount The public key of the token account to transfer to.
     * @param rawAmount The amount of tokens to transfer.
     * @param owner The public key of the account that owns the token account.
     * @param additionalSigners (Optional) An array of additional signers for the transaction.
     * @returns The transfer instruction.
     */
    static createSplTransferIx({ fromTokenAccount, toTokenAccount, rawAmount, owner, additionalSigners }: {
        fromTokenAccount: PublicKey;
        toTokenAccount: PublicKey;
        rawAmount: number;
        owner: PublicKey;
        additionalSigners?: Signer[];
    }): TransactionInstruction;
    /**
     * Creates a memo instruction.
     *
     * @param memo The memo to include in the instruction.
     * @param signer The public key of the signer.
     * @returns The memo instruction.
     */
    static createMemoIx({ memo, signer }: {
        memo: string;
        signer: PublicKey;
    }): TransactionInstruction;
    /**
     * Creates a compute budget instruction.
     *
     * @param units The number of compute units to request.
     * @returns The compute budget instruction.
     */
    static addComputeBudgetIx({ units }: {
        units: number;
    }): TransactionInstruction;
    /**
     * Checks if a token account exists. Returns true if it does, false if it does not.
     * @param connectionOrConnectionManager The connection or connection manager.
     * @param mint The token mint as a public key.
     * @param owner The owner as a public key.
     * @returns A promise that resolves to a boolean.
     */
    static doesTokenAccountExist({ connectionOrConnectionManager, mint, owner }: {
        connectionOrConnectionManager: Connection | ConnectionManager;
        mint: PublicKey;
        owner: PublicKey;
    }): Promise<boolean>;
    static getAssociatedTokenAddressSync: typeof getAssociatedTokenAddressSync;
}
