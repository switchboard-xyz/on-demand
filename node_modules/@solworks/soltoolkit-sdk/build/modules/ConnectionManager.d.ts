import { Cluster, Commitment, Connection, ConnectionConfig } from '@solana/web3.js';
/**
 * Manager for one or more web3.js connection(s).
 *
 * @remarks
 * This class is a singleton. Use the `getInstance()` method to get the instance.
 *
 * @beta
 *
 * @example
 * ```typescript
 * import { ConnectionManager } from "@solworks/soltoolkit-sdk";
 *
 * (async () => {
 *  const cm = await ConnectionManager.getInstance({
 *      commitment: COMMITMENT,
 *      endpoints: [
 *          "https://mango.devnet.rpcpool.com",
 *          "https://api.devnet.solana.com",
 *          "https://devnet.genesysgo.net",
 *      ],
 *      mode: "round-robin",
 *      network: "devnet",
 *  });
 * })
 * ```
 */
export declare class ConnectionManager {
    private static _instance;
    _connection: Connection;
    _fastestEndpoint: string;
    _highestSlotEndpoint: string;
    _latestValidBlockHeightEndpoint: string;
    private _config;
    private _logger;
    private _rpcSummary;
    private constructor();
    /**
     * Builds and returns a singleton instance of the ConnectionManager class. This method runs a speed test on the provided endpoint/s on initialization.
     * @param {Cluster} values.network - The network to connect to.
     * @param {string=} values.endpoint - If using `mode` "single", will default to this endpoint. If not provided, will default to the default public RPC endpoint for the network.
     * @param {string[]=} values.endpoints - If any other mode, will default to this array of endpoints. If not provided, will default to `values.endpoint` or the default public RPC endpoint for the network.
     * @param {ConnectionConfig=} values.config - Additional configuration options for the web3.js connection.
     * @param {Commitment=} values.commitment - The commitment level. Defaults to "processed".
     * @param {Mode=} values.mode - The mode to use for selecting an endpoint.
     * @returns {ConnectionManager} A singleton instance of the ConnectionManager class.
     */
    static getInstance(values: Omit<IConnectionManagerConstructor, 'rpcSummary'>): Promise<ConnectionManager>;
    /**
     * Builds and returns a singleton instance of the ConnectionManager class. This method should only be used after initializing the ConnectionManager with `getInstance()`.
     * @returns {Connection} The web3.js connection.
     */
    static getInstanceSync(): ConnectionManager;
    /**
     * Returns a web3.js connection.
     *
     * @remarks
     * If you are using `mode` "fastest" or "highest-slot", this method will return the RPC determined during initialization of ConnectionManager. Use the async `conn()` method instead to update the determined RPC.
     *
     * @param changeConn - If true, will return a new connection based on the configured `mode`. If false, will return the current connection.
     * @param airdrop - If true, will default to the public RPC endpoint hosted by Solana (it is the only RPC endpoint that supports airdrops).
     * @returns A web3.js connection.
     */
    connSync({ changeConn, airdrop }: {
        changeConn?: boolean;
        airdrop?: boolean;
    }): Connection;
    /**
     * Returns a web3.js connection.
     *
     * @param changeConn - If true, will return a new connection based on the configured `mode`. If false, will return the current connection.
     * @param airdrop - If true, will default to the public RPC endpoint hosted by Solana (it is the only RPC endpoint that supports airdrops).
     * @returns A web3.js connection.
     */
    conn({ changeConn, airdrop }: {
        changeConn?: boolean;
        airdrop?: boolean;
    }): Promise<Connection>;
    /**
     * Returns a summary of speed and slot height for each endpoint.
     * @returns {Promise<IRPCSummary[]>} An array of IRPCSummary objects.
     */
    getEndpointsSummary(): Promise<IRPCSummary[]>;
    getRpcSummary(): IRPCSummary[];
    /**
     * A static version of `getEndpointsSummary()`. Returns a summary of speed and slot height for each endpoint.
     * @param endpoints - An array of endpoints to test.
     * @param commitment - The commitment level.
     * @returns {Promise<IRPCSummary[]>} An array of IRPCSummary objects.
     */
    static getEndpointsSummary(endpoints: string[], commitment?: Commitment): Promise<IRPCSummary[]>;
    /**
     * Returns the fastest endpoint url, speed and slot height.
     * @param endpoints - An array of endpoints to test.
     * @param commitment - The commitment level.
     * @returns {Promise<IRPCSummary>} An IRPCSummary object.
     */
    static getFastestEndpoint(endpoints: string[], commitment?: Commitment): Promise<IRPCSummary>;
    /**
     * Returns the default endpoint for the given network.
     * @param network - The network to get the default endpoint for.
     * @returns {string} The default endpoint.
     */
    static getDefaultEndpoint(network: string | undefined): string;
}
/**
 * The constructor for the ConnectionManager class.
 * @param {Cluster} values.network - The network to connect to.
 * @param {string=} values.endpoint - If using `mode` "single", will default to this endpoint. If not provided, will default to the default public RPC endpoint for the network.
 * @param {string[]=} values.endpoints - If any other mode, will default to this array of endpoints. If not provided, will default to `values.endpoint` or the default public RPC endpoint for the network.
 * @param {ConnectionConfig=} values.config - Additional configuration options for the web3.js connection.
 * @param {Commitment=} values.commitment - The commitment level. Defaults to "processed".
 * @param {Mode=} values.mode - The mode to use for selecting an endpoint.
 * @param {IRPCSummary[]} values.rpcSummary - An array of IRPCSummary objects.
 * @param {boolean=} values.verbose - Whether to log initialization details.
 * @param {number=} values.transactionTimeout - The transaction timeout in milliseconds.
 */
export interface IConnectionManagerConstructor {
    network: Cluster;
    endpoint?: string;
    endpoints?: string[];
    config?: ConnectionConfig;
    commitment?: Commitment;
    mode?: Mode;
    rpcSummary: IRPCSummary[];
    verbose?: boolean;
    transactionTimeout?: number;
}
/**
 * An object representing a summary of speed and slot height for an endpoint.
 * @param {string} endpoint - The endpoint url.
 * @param {boolean} isReachable - Whether the endpoint is reachable.
 * @param {number=} speedMs - The speed of the endpoint in milliseconds.
 * @param {number=} currentSlot - The current slot height of the endpoint.
 * @param {string=} lastValidBlockHeight - The last valid block height of the endpoint.
 */
export interface IRPCSummary {
    endpoint: string;
    isReachable: boolean;
    speedMs?: number;
    currentSlot?: number;
    lastValidBlockHeight?: number;
}
/**
 * The mode to use for selecting an endpoint.
 * @param {string} single - Priority for endpoint over endpoints array. Fallback to endpoints array if endpoint is not provided. Fallback to default endpoint if no endpoint or endpoints provided.
 * @param {string} first - Uses endpoints array only, first item selected. No fallback support if endpoints array is not provided.
 * @param {string} last - Uses endpoints array only, last item selected. No fallback support if endpoints array is not provided.
 * @param {string} round-robin - Uses endpoints array only, alternates between endpoints. Starts with first item in array. No fallback support if endpoints array is not provided.
 * @param {string} fastest - Uses the fastest endpoint determined in the static initialization. No fallback support.
 * @param {string} highest-slot - Uses the highest slot endpoint determined in the static initialization. No fallback support.
 * @param {string} random - Uses endpoints array only, selects random item from array. No fallback support if endpoints array is not provided.
 * @param {string} latest-valid-block-height - Uses the endpoint with the latest valid block height.
 */
export type Mode = 'single' | 'first' | 'last' | 'round-robin' | 'random' | 'fastest' | 'highest-slot' | 'latest-valid-block-height';
