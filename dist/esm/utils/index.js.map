{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["export * from \"./TypescriptUtils.js\";\nimport { Oracle } from \"../accounts/oracle.js\";\nimport type { PullFeed } from \"../accounts/pullFeed.js\";\nimport { Queue } from \"../accounts/queue.js\";\n\nimport * as anchor from \"@coral-xyz/anchor-30\";\nimport type { AddressLookupTableAccount } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport type { IOracleJob } from \"@switchboard-xyz/common\";\nimport { CrossbarClient } from \"@switchboard-xyz/common\";\n\ntype Account = {\n  pubkey: PublicKey;\n  loadLookupTable: () => Promise<AddressLookupTableAccount>;\n};\n\nexport function createLoadLookupTables() {\n  const promiseMap: Map<string, Promise<AddressLookupTableAccount>> = new Map();\n\n  async function loadLookupTables(\n    accounts: Account[]\n  ): Promise<AddressLookupTableAccount[]> {\n    for (const account of accounts) {\n      const pubkey = account.pubkey.toString();\n      if (pubkey && account.loadLookupTable) {\n        if (!promiseMap.has(pubkey)) {\n          promiseMap.set(pubkey, account.loadLookupTable());\n        }\n      }\n    }\n\n    const out = Array.from(promiseMap.values());\n    return Promise.all(out);\n  }\n\n  return loadLookupTables;\n}\n\nexport const loadLookupTables = createLoadLookupTables();\n\n// Mainnet ID's\nexport const ON_DEMAND_MAINNET_PID =\n  \"SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv\";\nexport const ON_DEMAND_MAINNET_GUARDIAN_QUEUE =\n  \"B7WgdyAgzK7yGoxfsBaNnY6d41bTybTzEh4ZuQosnvLK\";\nexport const ON_DEMAND_MAINNET_QUEUE =\n  \"A43DyUGA7s8eXPxqEjJY6EBu1KKbNgfxF8h17VAHn13w\";\n\n// Devnet ID's\nexport const ON_DEMAND_DEVNET_PID =\n  \"SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv\";\nexport const ON_DEMAND_DEVNET_GUARDIAN_QUEUE =\n  \"Did69tHXs3NTTomR4ZBzttKjB6W3dssavL8uafVbJ1Q\";\nexport const ON_DEMAND_DEVNET_QUEUE =\n  \"FfD96yeXs4cxZshoPPSKhSPgVQxLAJUT3gefgh84m1Di\";\n\n/**\n * Get the default devnet queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default devnet queue\n */\nexport async function getDefaultDevnetQueue(\n  solanaRPCUrl: string = \"https://api.devnet.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_DEVNET_PID.toString(),\n    ON_DEMAND_DEVNET_QUEUE.toString()\n  );\n}\n\n/**\n * Get the default devnet guardian queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default devnet guardian queue\n */\nexport async function getDefaultDevnetGuardianQueue(\n  solanaRPCUrl: string = \"https://api.devnet.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_DEVNET_PID.toString(),\n    ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString()\n  );\n}\n\n/**\n * Get the default queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default queue\n * @NOTE - SWITCHBOARD PID AND QUEUE PUBKEY ARE WRONG\n */\nexport async function getDefaultQueue(\n  solanaRPCUrl: string = \"https://api.mainnet-beta.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_MAINNET_PID.toString(),\n    ON_DEMAND_MAINNET_QUEUE.toString()\n  );\n}\n\n/**\n * Get the default guardian queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default guardian queue\n * @NOTE - SWITCHBOARD PID AND GUARDIAN QUEUE PUBKEY ARE WRONG\n */\nexport async function getDefaultGuardianQueue(\n  solanaRPCUrl: string = \"https://api.mainnet-beta.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_MAINNET_PID.toString(),\n    ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString()\n  );\n}\n\n/**\n * Get the queue for the Switchboard program\n * @param solanaRPCUrl - string: The Solana RPC URL\n * @param switchboardProgramId - string: The Switchboard program ID\n * @param queueAddress - string: The queue address\n * @returns - Promise<Queue> - The queue\n */\nexport async function getQueue(\n  solanaRPCUrl: string,\n  switchboardProgramId: string,\n  queueAddress: string\n): Promise<Queue> {\n  const { PublicKey, Keypair, Connection } = anchor.web3;\n  const wallet: anchor.Wallet = new anchor.Wallet(new Keypair());\n  const connection = new Connection(solanaRPCUrl, \"confirmed\");\n  const PID = new PublicKey(switchboardProgramId);\n  const queue = new PublicKey(queueAddress);\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const idl = (await anchor.Program.fetchIdl(PID, provider))!;\n  const program = new anchor.Program(idl, provider);\n  const queueAccount = new Queue(program, queue);\n  return queueAccount;\n}\n\n/**\n * Get the unique LUT keys for the queue, all oracles in the queue, and all feeds\n * provided\n * @param queue - Queue: The queue\n * @param feeds - PullFeed[]: The feeds\n * @returns - Promise<PublicKey[]>: The unique LUT keys\n */\nexport async function fetchAllLutKeys(\n  queue: Queue,\n  feeds: PullFeed[]\n): Promise<PublicKey[]> {\n  const oracles = await queue.fetchOracleKeys();\n  const lutOwners: any[] = [];\n  lutOwners.push(queue);\n  for (const feed of feeds) {\n    lutOwners.push(feed);\n  }\n  for (const oracle of oracles) {\n    lutOwners.push(new Oracle(queue.program, oracle));\n  }\n  const lutPromises = lutOwners.map((lutOwner) => {\n    return lutOwner.loadLookupTable();\n  });\n  const luts = await Promise.all(lutPromises);\n  const keyset = new Set<PublicKey>();\n  for (const lut of luts) {\n    for (const key of lut.state.addresses) {\n      keyset.add(key.toString());\n    }\n  }\n  return Array.from(keyset).map((key) => new PublicKey(key));\n}\n\n/**\n *\n * @param queue Queue pubkey as base58 string\n * @param jobs Array of jobs to store (Oracle Jobs Object)\n * @param crossbarUrl\n * @returns\n */\nexport async function storeFeed(\n  queue: string,\n  jobs: IOracleJob[],\n  crossbarUrl: string = \"https://crossbar.switchboard.xyz\"\n): Promise<{\n  cid: string;\n  feedHash: string;\n  queueHex: string;\n}> {\n  const crossbar = crossbarUrl.endsWith(\"/\")\n    ? crossbarUrl.slice(0, -1)\n    : crossbarUrl;\n\n  const x = new CrossbarClient(crossbar);\n  return await x.store(queue, jobs);\n}\n\nexport async function getAssociatedTokenAddress(\n  mint: PublicKey,\n  owner: PublicKey,\n  allowOwnerOffCurve = false,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n  if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n    throw new Error(\"TokenOwnerOffCurveError\");\n\n  const [address] = await PublicKey.findProgramAddress(\n    [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n    associatedTokenProgramId\n  );\n\n  return address;\n}\n\nexport function getAssociatedTokenAddressSync(\n  mint: PublicKey,\n  owner: PublicKey,\n  allowOwnerOffCurve = false,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): PublicKey {\n  if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n    throw new Error(\"TokenOwnerOffCurveError\");\n\n  const [address] = PublicKey.findProgramAddressSync(\n    [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n    associatedTokenProgramId\n  );\n\n  return address;\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey(\n  \"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb\"\n);\n\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey(\n  \"9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP\"\n);\n"]}