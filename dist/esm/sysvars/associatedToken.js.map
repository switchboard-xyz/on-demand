{"version":3,"file":"associatedToken.js","sourceRoot":"","sources":["../../../src/sysvars/associatedToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uCAAuC,EAAE,MAAM,iBAAiB,CAAC;AAE1E,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,MAAM,OAAO,sBAAsB;IACjC,gBAAuB,CAAC;IACxB;;OAEG;IACH,0BAA0B,CACxB,aAAwB,EACxB,gBAA2B;QAE3B,OAAO,SAAS,CAAC,sBAAsB,CACrC;YACE,aAAa,CAAC,QAAQ,EAAE;YACxB,gBAAgB,CAAC,QAAQ,EAAE;YAC3B,gBAAgB,CAAC,QAAQ,EAAE;SAC5B,EACD,uCAAuC,CACxC,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from \"../constants.js\";\n\nimport { TOKEN_PROGRAM_ID } from \"./../utils/index.js\";\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport class AssociatedTokenProgram {\n  private constructor() {}\n  /**\n   * Find the associated token address for the given wallet and token mint\n   */\n  findAssociatedTokenAddress(\n    walletAddress: PublicKey,\n    tokenMintAddress: PublicKey\n  ): [PublicKey, number] {\n    return PublicKey.findProgramAddressSync(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n  }\n}\n"]}