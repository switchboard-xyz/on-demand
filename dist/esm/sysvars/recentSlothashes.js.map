{"version":3,"file":"recentSlothashes.js","sourceRoot":"","sources":["../../../src/sysvars/recentSlothashes.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC;AAExD,OAAO,KAAK,MAAM,MAAM,sBAAsB,CAAC;AAE/C,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IAC3B;;OAEG;IACH,gBAAuB,CAAC;IACxB;;;;OAIG;IACI,MAAM,CAAO,WAAW,CAC7B,UAAsB;;YAEtB,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,qBAAqB,EAAE;gBACzE,UAAU,EAAE,WAAW;gBACvB,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;aACrC,CAAC,CAAC;YACH,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAChD,CAAC;YACD,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC;YAChC,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YACxE,OAAO,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;QACzD,CAAC;KAAA;IAEM,MAAM,CAAO,sBAAsB,CACxC,UAAsB,EACtB,CAAS;;YAET,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,qBAAqB,EAAE;gBACzE,UAAU,EAAE,WAAW;gBACvB,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;aACrD,CAAC,CAAC;YACH,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAChD,CAAC;YACD,MAAM,GAAG,GAA+B,EAAE,CAAC;YAC3C,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClD,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAC7B,MAAM,OAAO,GAAG,SAAS,GAAG,EAAE,CAAC;gBAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CACzB,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAC5D,CAAC;gBACF,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YAC5D,CAAC;YACD,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;CACF","sourcesContent":["import { SLOT_HASHES_SYSVAR_ID } from \"../constants.js\";\n\nimport * as anchor from \"@coral-xyz/anchor-30\";\nimport type { Connection } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\n\n/**\n * Abstraction around the SysvarS1otHashes111111111111111111111111111 sysvar\n * This sysvar is used to store the recent slot hashes\n */\nexport class RecentSlotHashes {\n  /**\n   *  Disable object instantiation.\n   */\n  private constructor() {}\n  /**\n   * Fetches the latest slot hash from the sysvar.\n   * @param connection The connection to use.\n   * @returns A promise that resolves to the latest slot number and hash.\n   */\n  public static async fetchLatest(\n    connection: Connection\n  ): Promise<[anchor.BN, string]> {\n    const accountInfo = await connection.getAccountInfo(SLOT_HASHES_SYSVAR_ID, {\n      commitment: \"confirmed\",\n      dataSlice: { length: 40, offset: 8 },\n    });\n    if (!accountInfo) {\n      throw new Error(\"Failed to get account info\");\n    }\n    const buffer = accountInfo.data;\n    const slotNumber = buffer.readBigUInt64LE(0);\n    const encoded = bs58.encode(Uint8Array.prototype.slice.call(buffer, 8));\n    return [new anchor.BN(slotNumber.toString()), encoded];\n  }\n\n  public static async fetchLatestNSlothashes(\n    connection: Connection,\n    n: number\n  ): Promise<Array<[anchor.BN, string]>> {\n    const accountInfo = await connection.getAccountInfo(SLOT_HASHES_SYSVAR_ID, {\n      commitment: \"confirmed\",\n      dataSlice: { length: 40 * Math.floor(n), offset: 8 },\n    });\n    if (!accountInfo) {\n      throw new Error(\"Failed to get account info\");\n    }\n    const out: Array<[anchor.BN, string]> = [];\n    const buffer = accountInfo.data;\n    for (let i = 0; i < n; i++) {\n      const slotNumber = buffer.readBigUInt64LE(i * 40);\n      const hashStart = i * 40 + 8;\n      const hashEnd = hashStart + 32;\n      const encoded = bs58.encode(\n        Uint8Array.prototype.slice.call(buffer, hashStart, hashEnd)\n      );\n      out.push([new anchor.BN(slotNumber.toString()), encoded]);\n    }\n    return out;\n  }\n}\n"]}