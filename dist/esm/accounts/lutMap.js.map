{"version":3,"file":"lutMap.js","sourceRoot":"","sources":["../../../src/accounts/lutMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { RecentSlotHashes } from \"./../sysvars/recentSlothashes.js\";\nimport * as spl from \"./../utils/index.js\";\nimport { Queue } from \"./queue.js\";\nimport { State } from \"./state.js\";\n\nimport type { BN, Program } from \"@coral-xyz/anchor-30\";\nimport type {\n  AddressLookupTableState,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  AddressLookupTableAccount,\n  AddressLookupTableProgram,\n  PublicKey,\n  SystemProgram,\n} from \"@solana/web3.js\";\n\n/**\n *  A map of LUTs to their public keys.\n *\n *  Users can initialize to compact all oracle and feed keys they use into a single\n *  account, and then use the LUT to load all tx keys efficiently.\n */\nexport class LutMap {\n  /**\n   *  The public key of the LUT map account.\n   */\n  static async keyFromSeed(\n    program: Program,\n    queue: PublicKey,\n    authority: PublicKey\n  ): Promise<PublicKey> {\n    const [lut] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"LutMapAccountData\"),\n        queue.toBuffer(),\n        authority.toBuffer(),\n      ],\n      program.programId\n    );\n    return lut;\n  }\n\n  /**\n   * Creating a LUT map account will allow a user or protocol to easy manage\n   * and associate a common account grouping for their feeds to reduce the\n   * total number of transaction bytes taken by Switchboard.\n   * This will maximize the flexibility users have in their instructions.\n   *\n   * @param program - The program that owns the LUT map account.\n   * @param queue - The queue account that the LUT map is associated with.\n   * @param slot - The slot that the LUT map is associated with.\n   * @returns A promise that resolves to the LUT map and the transaction signature.\n   */\n  static async create(\n    program: Program,\n    queue: PublicKey,\n    slot: BN\n  ): Promise<[LutMap, string]> {\n    const payer = (program.provider as any).wallet.payer;\n    const lutKey = await LutMap.keyFromSeed(program, queue, payer.publicKey);\n    const sig = await program.rpc.lutMapInit(\n      { slot },\n      {\n        accounts: {\n          lutMap: lutKey,\n          queue: queue,\n          payer: payer.publicKey,\n          authority: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [payer],\n      }\n    );\n    return [new LutMap(program, lutKey), sig];\n  }\n\n  constructor(readonly program: Program, readonly pubkey: PublicKey) {}\n\n  async queueLutExtendIx(params: {\n    queue: PublicKey;\n    newKey: PublicKey;\n    payer: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const payer = (this.program.provider as any).wallet.payer;\n    const queueAccount = new Queue(this.program, params.queue);\n    const queueData = await queueAccount.loadData();\n    const lutKey = await LutMap.keyFromSeed(\n      this.program,\n      params.queue,\n      payer.publicKey\n    );\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), params.queue.toBuffer()],\n        this.program.programId\n      )\n    )[0];\n    const ix = await this.program.instruction.queueLutExtend(\n      { newKey: params.newKey },\n      {\n        accounts: {\n          queue: params.queue,\n          authority: queueData.authority,\n          lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Loads the data for this {@linkcode LutMap} account from on chain.\n   *\n   *  @returns A promise that resolves to the data.\n   *  @throws if the account does not exist.\n   */\n  async loadData(): Promise<any> {\n    return await this.program.account[\"lutMapAccountData\"].fetch(this.pubkey);\n  }\n\n  async loadLut(): Promise<[PublicKey, AddressLookupTableState]> {\n    const data = await this.loadData();\n    const lutKey = data.lut;\n    const lutAccountInfo =\n      await this.program.provider.connection.getAccountInfo(lutKey);\n    const lutData = AddressLookupTableAccount.deserialize(lutAccountInfo!.data);\n    return [lutKey, lutData];\n  }\n\n  async syncLut(feeds: PublicKey[]): Promise<void> {\n    const wrapperData = await this.loadData();\n    const [key, data] = await this.loadLut();\n    const queueKey = wrapperData.queue;\n    const queue = new Queue(this.program, queueKey);\n    const queueData = await queue.loadData();\n    const oracles = queueData.oracleKeys.slice(0, queueData.oracleKeysLen);\n    const neededLutAccounts: PublicKey[] = [];\n    neededLutAccounts.push(queueKey);\n    neededLutAccounts.push(spl.NATIVE_MINT);\n    neededLutAccounts.push(spl.TOKEN_PROGRAM_ID);\n    neededLutAccounts.push(spl.ASSOCIATED_TOKEN_PROGRAM_ID);\n    neededLutAccounts.push(State.keyFromSeed(this.program));\n    for (const oracle of oracles) {\n      for (const feed of feeds) {\n        const [statsKey] = PublicKey.findProgramAddressSync(\n          [Buffer.from(\"OracleFeedStats\"), feed.toBuffer(), oracle.toBuffer()],\n          this.program.programId\n        );\n        const feedRewardEscrow = await spl.getAssociatedTokenAddress(\n          spl.NATIVE_MINT,\n          feed\n        );\n        neededLutAccounts.push(statsKey);\n        neededLutAccounts.push(feed);\n        neededLutAccounts.push(oracle);\n        neededLutAccounts.push(feedRewardEscrow);\n      }\n    }\n    // TODO: do anneal here\n  }\n}\n"]}