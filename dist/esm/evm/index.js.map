{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/evm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Queue } from \"../accounts/index.js\";\nimport type {\n  BridgeEnclaveResponse,\n  FeedEvalResponse,\n  Gateway,\n} from \"../oracle-interfaces/index.js\";\nimport {\n  ON_DEMAND_DEVNET_GUARDIAN_QUEUE,\n  ON_DEMAND_DEVNET_PID,\n  ON_DEMAND_DEVNET_QUEUE,\n  ON_DEMAND_MAINNET_GUARDIAN_QUEUE,\n  ON_DEMAND_MAINNET_PID,\n  ON_DEMAND_MAINNET_QUEUE,\n} from \"../utils/index.js\";\n\nimport {\n  createAttestationHexString,\n  createUpdateHexString,\n  createV0AttestationHexString,\n} from \"./message.js\";\n\nimport NodeWallet from \"@coral-xyz/anchor-30/dist/cjs/nodewallet.js\";\nexport * as message from \"./message.js\";\nimport * as anchor from \"@coral-xyz/anchor-30\";\nimport { Big, OracleJob } from \"@switchboard-xyz/common\";\nimport * as bs58 from \"bs58\";\n\n// Common options for feed updates\nexport interface FeedUpdateCommonOptions {\n  jobs: OracleJob[]; // Array of job definitions\n  numSignatures?: number; // Number of signatures to fetch\n  maxVariance?: number; // Maximum variance allowed for the feed\n  minResponses?: number; // Minimum number of responses to consider the feed valid\n  recentHash?: string; // Hex string of length 64 (32 bytes) which does not start with 0x\n  aggregatorId?: string; // Specify the aggregator ID if the feed already exists\n  blockNumber?: number; // The block number\n  gateway?: Gateway; // Gateway (optional)\n}\n\n// Define a type for the input parameters\nexport type FeedUpdateParams = FeedUpdateCommonOptions;\n\n// Attestation options\nexport interface AttestationOptions {\n  guardianQueue: Queue; // The guardian queue account\n  recentHash: string; // The blockhash to get the attestation for\n  blockNumber: number; // The timestamp\n  queueId: string; // The queue ID (queue pubkey as hex)\n  oracleId: string; // The oracle ID (oracle pubkey as hex)\n  gateway?: Gateway; // The gateway account (optional)\n}\n\n// Feed simulation result\nexport interface FeedSimulateResult {\n  result: number;\n  feedId: string;\n  response: FeedEvalResponse;\n}\n\n// Feed update result\nexport interface FeedUpdateResult {\n  feedId: string;\n  result: number;\n  encoded: string;\n  response: FeedEvalResponse;\n}\n\n// Attestation result\nexport interface AttestationResult {\n  oracleId: string; // Attestee oracle pubkey as hex\n  queueId: string; // Attestee queue pubkey as hex\n  guardian: string; // Guardian pubkey as hex\n  encoded: string; // The attestation as a hex string\n  response: BridgeEnclaveResponse; // The attestation response from guardian\n}\n\n// Fetch feed response\nexport interface FetchFeedResponse {\n  results: FeedEvalResponse[];\n  encoded: string[];\n}\n\n// Fetch result response\nexport interface FetchResultResponse extends FetchFeedResponse {\n  feedId: string;\n}\n\n// Fetch results response\nexport interface FetchResultsArgs {\n  feedIds: string[];\n  chainId: number;\n  crossbarUrl?: string;\n  minResponses?: number;\n  maxVariance?: number;\n  numSignatures?: number;\n  syncOracles?: boolean;\n  syncGuardians?: boolean;\n  gateway?: string;\n}\n\n// Fetch result args\nexport interface FetchResultArgs {\n  feedId: string;\n  chainId: number;\n  crossbarUrl?: string;\n  minResponses?: number;\n  maxVariance?: number;\n  numSignatures?: number;\n  syncOracles?: boolean;\n  syncGuardians?: boolean;\n  gateway?: string;\n}\n\n// Feed evaluation response\nexport interface FetchRandomnessArgs {\n  chainId: number;\n  crossbarUrl: string;\n  randomnessId: string;\n  timestamp?: number;\n  minStalenessSeconds?: number;\n}\n\n/**\n * Get an oracle job from object definition\n * @param params the job parameters\n * @returns\n */\nexport function createJob(params: { tasks: any }): OracleJob {\n  return OracleJob.fromObject(params);\n}\n\n/**\n * Get the feed update data for a particular feed\n * @dev - this function is heavily rate limited\n * @param params the feed update parameters\n * @param queue the queue account\n * @returns the feed simulation result and feed id\n */\nexport async function simulateFeed(\n  params: FeedUpdateParams,\n  queue: Queue\n): Promise<FeedSimulateResult> {\n  const gateway = params.gateway ?? (await queue.fetchGateway());\n  const result = (\n    await gateway.fetchSignatures({\n      ...params,\n      useTimestamp: true,\n      recentHash: bs58.encode(\n        Buffer.from(params.recentHash ?? \"0\".repeat(64), \"hex\")\n      ),\n    })\n  ).responses[0];\n\n  return {\n    result: new Big(result.success_value).div(new Big(10).pow(18)).toNumber(),\n    feedId: result.feed_hash,\n    response: result,\n  };\n}\n\n/**\n * Get the feed update data for a particular feed\n * @param params the feed update parameters\n * @param queue the queue account\n * @returns the feed update data, the byte arrays that need to be sent to the target chain\n */\nexport async function getFeedUpdateData(\n  params: FeedUpdateParams,\n  queue: Queue\n): Promise<string[]> {\n  return (await getFeedUpdateWithContext(params, queue)).responses.map(\n    (r) => r.encoded\n  );\n}\n\n/**\n * Get the feed update data for a particular feed\n * @param params the feed update parameters\n * @param queue the queue account\n * @returns the feed update data with context (numeric result data, oracle response, AND encoded response)\n */\nexport async function getFeedUpdateWithContext(\n  params: FeedUpdateParams,\n  queue: Queue\n): Promise<{\n  responses: FeedUpdateResult[];\n  failures: string[];\n}> {\n  // Set the blockhash\n  const blockhash = params.recentHash ?? \"0\".repeat(64);\n\n  // if we just want the time feed, return\n  if (params.jobs.length === 0) {\n    {\n      return {\n        responses: [],\n        failures: [],\n      };\n    }\n  }\n\n  // Get the Feed Update if the feed exists\n  // Setup the updates array\n  const updates = await getUpdate(\n    {\n      ...params,\n      recentHash: blockhash,\n    },\n    queue\n  );\n\n  return updates;\n}\n\n/**\n * Get the update message for the EVM for a particular feed\n * This is useful for feeds that have already been created on chain\n * @param params - FeedUpdateCommonOptions: Parameters for the upsert message\n * @param queue - Queue: The queue account\n * @returns - Promise<string> - The update message as a hex string\n */\nexport async function getUpdate(\n  params: FeedUpdateCommonOptions,\n  queue: Queue\n): Promise<{\n  responses: FeedUpdateResult[];\n  failures: string[];\n}> {\n  if (!params.recentHash) {\n    params.recentHash = \"0\".repeat(64);\n  }\n\n  // slice if the recentHash starts with 0x\n  if (params.recentHash.startsWith(\"0x\")) {\n    params.recentHash = params.recentHash.slice(2);\n  }\n\n  const gateway = params.gateway ?? (await queue.fetchGateway());\n\n  const { responses, failures } = await gateway.fetchSignatures({\n    ...params,\n    useTimestamp: true,\n    recentHash: bs58.encode(Buffer.from(params.recentHash, \"hex\")),\n  });\n  const response: FeedUpdateResult[] = [];\n\n  for (const result of responses) {\n    if (!result.success_value) {\n      failures.push(result.failure_error.toString());\n      continue;\n    }\n\n    // Decode from Base64 to a Buffer\n    const signatureBuffer = new Uint8Array(\n      Buffer.from(result.signature, \"base64\")\n    );\n\n    // Assuming each component (r and s) is 32 bytes long\n    const r = Buffer.from(signatureBuffer.slice(0, 32)).toString(\"hex\");\n    const s = Buffer.from(signatureBuffer.slice(32, 64)).toString(\"hex\");\n    const v = result.recovery_id;\n\n    // Create the upsert message\n    const updateString = createUpdateHexString({\n      discriminator: 1,\n      feedId: params.aggregatorId ?? result.feed_hash.toString(),\n      result: result.success_value.toString(),\n      blockNumber: params.blockNumber?.toString() ?? \"0\",\n      timestamp: result.timestamp?.toString(),\n      r,\n      s,\n      v,\n    });\n\n    // Add the response to the array\n    const res = {\n      feedId: result.feed_hash,\n      result: new Big(result.success_value).div(new Big(10).pow(18)).toNumber(),\n      encoded: updateString,\n      response: result,\n    };\n\n    // Add the response to the array\n    response.push(res);\n  }\n\n  // Sort the response by timestamp, ascending\n  response.sort((a, b) => a.response.timestamp - b.response.timestamp);\n\n  // Return the response\n  return {\n    responses: response,\n    failures,\n  };\n}\n\n/**\n * Get attestation for a particular oracle on a particular queue\n * @param options - AttestationOptions: Options for the attestation\n * @returns - Promise<string> - The attestation as a hex string\n */\nexport async function getAttestation(\n  options: AttestationOptions\n): Promise<AttestationResult> {\n  const { guardianQueue, recentHash, queueId, oracleId, gateway, blockNumber } =\n    options;\n  const gatewayAccount = gateway ?? (await guardianQueue.fetchGateway());\n  const chainHash = recentHash.startsWith(\"0x\")\n    ? recentHash.slice(2)\n    : recentHash;\n  const attestation = await gatewayAccount.fetchBridgingMessage({\n    chainHash,\n    queuePubkey: queueId,\n    oraclePubkey: oracleId,\n  });\n\n  if (!options.recentHash) {\n    options.recentHash = \"0\".repeat(64);\n  }\n\n  // slice if the recentHash starts with 0x\n  if (options.recentHash.startsWith(\"0x\")) {\n    options.recentHash = options.recentHash.slice(2);\n  }\n\n  // Decode from Base64 to a Buffer\n  const signatureBuffer = new Uint8Array(\n    Buffer.from(attestation.signature, \"base64\")\n  );\n\n  // Assuming each component (r and s) is 32 bytes long\n  const r = Buffer.from(signatureBuffer.slice(0, 32)).toString(\"hex\");\n  const s = Buffer.from(signatureBuffer.slice(32, 64)).toString(\"hex\");\n  const v = attestation.recovery_id;\n\n  // Create the attestation bassed on message contents (it'll either be v0 or ordinary)\n  if (attestation.oracle_ed25519_enclave_signer) {\n    const hexString = createV0AttestationHexString({\n      discriminator: 2,\n      oracleId,\n      queueId,\n      ed25519Key: attestation.oracle_ed25519_enclave_signer,\n      secp256k1Key: attestation.oracle_secp256k1_enclave_signer,\n      r,\n      s,\n      v,\n      mrEnclave: attestation.mr_enclave,\n      blockNumber: blockNumber.toString(),\n    });\n\n    return {\n      oracleId,\n      queueId,\n      guardian: attestation.guardian,\n      encoded: hexString,\n      response: attestation,\n    };\n  } else if (attestation.timestamp) {\n    const hexString = createAttestationHexString({\n      discriminator: 2,\n      oracleId,\n      queueId,\n      secp256k1Key: attestation.oracle_secp256k1_enclave_signer,\n      timestamp: attestation.timestamp.toString(),\n      mrEnclave: attestation.mr_enclave,\n      r,\n      s,\n      v,\n      blockNumber: blockNumber.toString(),\n      guardianId: attestation.guardian,\n    });\n\n    return {\n      oracleId: attestation.oracle,\n      queueId: attestation.queue,\n      guardian: attestation.guardian,\n      encoded: hexString,\n      response: attestation,\n    };\n  } else {\n    throw new Error(\"Invalid attestation response\");\n  }\n}\n\n/**\n * Get the default devnet queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default devnet queue\n */\nexport async function getDefaultDevnetQueue(\n  solanaRPCUrl: string = \"https://api.devnet.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_DEVNET_PID.toString(),\n    ON_DEMAND_DEVNET_QUEUE.toString()\n  );\n}\n\n/**\n * Get the default devnet guardian queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default devnet guardian queue\n */\nexport async function getDefaultDevnetGuardianQueue(\n  solanaRPCUrl: string = \"https://api.devnet.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_DEVNET_PID.toString(),\n    ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString()\n  );\n}\n\n/**\n * Get the default queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default queue\n * @NOTE - SWITCHBOARD PID AND QUEUE PUBKEY ARE WRONG\n */\nexport async function getDefaultQueue(\n  solanaRPCUrl: string = \"https://api.mainnet-beta.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_MAINNET_PID.toString(),\n    ON_DEMAND_MAINNET_QUEUE.toString()\n  );\n}\n\n/**\n * Get the default guardian queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default guardian queue\n * @NOTE - SWITCHBOARD PID AND GUARDIAN QUEUE PUBKEY ARE WRONG\n */\nexport async function getDefaultGuardianQueue(\n  solanaRPCUrl: string = \"https://api.mainnet-beta.solana.com\"\n): Promise<Queue> {\n  return getQueue(\n    solanaRPCUrl,\n    ON_DEMAND_MAINNET_PID.toString(),\n    ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString()\n  );\n}\n\n/**\n * Get the queue for the Switchboard program\n * @param solanaRPCUrl - string: The Solana RPC URL\n * @param switchboardProgramId - string: The Switchboard program ID\n * @param queueAddress - string: The queue address\n * @returns - Promise<Queue> - The queue\n */\nexport async function getQueue(\n  solanaRPCUrl: string,\n  switchboardProgramId: string,\n  queueAddress: string\n): Promise<Queue> {\n  const { PublicKey, Keypair, Connection } = anchor.web3;\n  const wallet: NodeWallet = new NodeWallet(new Keypair());\n  const connection = new Connection(solanaRPCUrl, \"confirmed\");\n  const PID = new PublicKey(switchboardProgramId);\n  const queue = new PublicKey(queueAddress);\n  const provider = new anchor.AnchorProvider(connection, wallet, {});\n  const idl = (await anchor.Program.fetchIdl(PID, provider))!;\n  const program = new anchor.Program(idl, provider);\n  const queueAccount = new Queue(program, queue);\n  return queueAccount;\n}\n\n/**\n * Crossbar API for EVM\n */\n\n/**\n * Fetch result from the Switchboard API\n * @param param0 The parameters to fetch results\n * @returns\n */\nexport async function fetchResult({\n  feedId,\n  chainId,\n  crossbarUrl,\n  minResponses,\n  maxVariance,\n  numSignatures,\n  syncOracles,\n  syncGuardians,\n}: FetchResultArgs): Promise<FetchResultResponse> {\n  if (!crossbarUrl) {\n    crossbarUrl = \"https://crossbar.switchboard.xyz\";\n  }\n  return {\n    feedId,\n    ...(await fetchUpdateData(\n      crossbarUrl,\n      chainId.toString(),\n      feedId,\n      minResponses,\n      maxVariance,\n      numSignatures,\n      syncOracles,\n      syncGuardians\n    )),\n  };\n}\n\n/**\n * Fetch results from the Switchboard API\n * @param param0 The parameters to fetch results\n * @returns\n */\nexport async function fetchResults({\n  feedIds,\n  chainId,\n  crossbarUrl,\n  minResponses,\n  maxVariance,\n  numSignatures,\n  syncOracles,\n  syncGuardians,\n}: FetchResultsArgs): Promise<FetchResultResponse[]> {\n  if (!crossbarUrl) {\n    crossbarUrl = \"https://crossbar.switchboard.xyz\";\n  }\n\n  const responses = await Promise.all(\n    feedIds.map((feedId) => {\n      return fetchUpdateData(\n        crossbarUrl,\n        chainId.toString(),\n        feedId,\n        minResponses,\n        maxVariance,\n        numSignatures,\n        syncOracles,\n        syncGuardians\n      );\n    })\n  );\n\n  return responses.map((response, index) => {\n    return {\n      feedId: feedIds[index],\n      ...response,\n    };\n  });\n}\n\n/**\n * Fetch data to settle randomness\n * @param param0 The parameters to fetch randomness\n * @returns\n */\nexport async function fetchRandomness({\n  chainId,\n  crossbarUrl,\n  randomnessId,\n  timestamp,\n  minStalenessSeconds,\n}: FetchRandomnessArgs): Promise<{\n  encoded: string;\n  response: {\n    signature: string;\n    recovery_id: number;\n    value: string;\n  };\n}> {\n  if (!crossbarUrl) {\n    crossbarUrl = \"https://crossbar.switchboard.xyz\";\n  }\n\n  return fetchRandomnessData(\n    crossbarUrl,\n    chainId.toString(),\n    randomnessId,\n    timestamp,\n    minStalenessSeconds\n  );\n}\n\n/**\n * Fetch update data from the Switchboard API\n * @param crossbarUrl The Crossbar URL\n * @param chainId The chain ID\n * @param feedId The feed ID\n * @param minResponses Minimum number of responses\n * @param maxVariance Maximum variance\n * @param numSignatures Number of signatures\n * @param syncOracles Sync oracles\n * @param syncGuardians Sync guardians\n * @param gateway Gateway\n * @returns\n */\nasync function fetchUpdateData(\n  crossbarUrl: string,\n  chainId: string,\n  feedId: string,\n  minResponses: number = 1,\n  maxVariance: number = 1e9,\n  numSignatures: number = 1,\n  syncOracles: boolean = true,\n  syncGuardians: boolean = true,\n  gateway?: string\n): Promise<FetchFeedResponse> {\n  const cleanedCrossbarUrl = crossbarUrl.endsWith(\"/\")\n    ? crossbarUrl.slice(0, -1)\n    : crossbarUrl;\n\n  const url = new URL(`${cleanedCrossbarUrl}/updates/evm/${chainId}/${feedId}`);\n\n  // Add query parameters to the URL\n  if (minResponses !== undefined) {\n    url.searchParams.append(\"minResponses\", minResponses.toString());\n  }\n  if (maxVariance !== undefined) {\n    url.searchParams.append(\"maxVariance\", maxVariance.toString());\n  }\n  if (numSignatures !== undefined) {\n    url.searchParams.append(\"numSignatures\", numSignatures.toString());\n  }\n  if (syncOracles !== undefined) {\n    url.searchParams.append(\"syncOracles\", syncOracles.toString());\n  }\n  if (syncGuardians !== undefined) {\n    url.searchParams.append(\"syncGuardians\", syncGuardians.toString());\n  }\n  if (gateway !== undefined) {\n    url.searchParams.append(\"gateway\", gateway);\n  }\n\n  try {\n    const response = await fetch(url.toString(), {\n      method: \"GET\",\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching feed data:\", error);\n    throw error;\n  }\n}\n\n/**\n * Fetch randomness data from the Switchboard API\n * @param chainId The chain ID\n * @param randomnessId The randomness ID configured on-chain\n * @param timestamp The timestamp that the randomness was configured at\n * @param minStalenessSeconds The minimum staleness of the data in seconds\n * @returns\n */\nasync function fetchRandomnessData(\n  crossbarUrl: string,\n  chainId: string,\n  randomnessId: string,\n  timestamp?: number,\n  minStalenessSeconds?: number\n): Promise<{\n  encoded: string;\n  response: {\n    signature: string;\n    recovery_id: number;\n    value: string;\n  };\n}> {\n  const cleanedCrossbarUrl = crossbarUrl.endsWith(\"/\")\n    ? crossbarUrl.slice(0, -1)\n    : crossbarUrl;\n  const url = new URL(\n    `${cleanedCrossbarUrl}/randomness/evm/${chainId}/${randomnessId}`\n  );\n\n  // Add query parameters to the URL\n  if (timestamp !== undefined) {\n    url.searchParams.append(\"timestamp\", timestamp.toString());\n  }\n  if (minStalenessSeconds !== undefined) {\n    url.searchParams.append(\n      \"minStalenessSeconds\",\n      minStalenessSeconds.toString()\n    );\n  }\n\n  try {\n    const response = await fetch(url.toString(), {\n      method: \"GET\",\n    });\n    if (!response.ok) {\n      throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching randomness data:\", error);\n    throw error;\n  }\n}\n"]}