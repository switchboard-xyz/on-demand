{"version":3,"file":"message.js","sourceRoot":"","sources":["../../../src/evm/message.ts"],"names":[],"mappings":"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","sourcesContent":["// Components for an EVM update message\n// This is for updating an existing feed\nexport type UpdateHexStringParams = {\n  discriminator: 1; // 1 for update, 3 for update with snapshot\n  feedId: string; // 32-byte feed id\n  result: string; // 16-byte result (i128 BE encoded)\n  blockNumber: string; // 8-byte block number (u64 BE encoded)\n  timestamp?: string; // 8-byte timestamp (u64 BE encoded)\n  r: string; // 32-byte r value\n  s: string; // 32-byte s value\n  v: number; // 1-byte v value\n};\n\n// Components for an EVM attestation message\n// This is for bridging new oracles onto the target chain\nexport type AttestationHexStringParams = {\n  discriminator: 2; // 2 for attestation\n  oracleId: string; // 32-byte oracle id\n  queueId: string; // 32-byte queue id\n  secp256k1Key: string; // 64-byte secp256k1 key\n  blockNumber: string; // 8-byte block number (u64 BE encoded)\n  mrEnclave: string; // 32-byte mr enclave\n  r: string; // 32-byte r value\n  s: string; // 32-byte s value\n  v: number; // 1-byte v value\n  timestamp: string; // 8-byte timestamp (u64 BE encoded)\n  guardianId: string; // 32-byte guardian id\n};\n\n// Components for an EVM attestation message\n// This is for bridging new oracles onto the target chain\nexport type V0AttestationHexStringParams = {\n  discriminator: 2; // 2 for attestation\n  oracleId: string; // 32-byte oracle id\n  queueId: string; // 32-byte queue id\n  ed25519Key: string; // 32-byte ed25519 key\n  secp256k1Key: string; // 64-byte secp256k1 key\n  blockNumber: string; // 8-byte block number (u64 BE encoded)\n  mrEnclave: string; // 32-byte mr enclave\n  r: string; // 32-byte r value\n  s: string; // 32-byte s value\n  v: number; // 1-byte v value\n};\n\n// Components for an EVM randomness reveal message\n// This is for revealing randomness\nexport type RandomnessRevealHexStringParams = {\n  discriminator: 4; // 4 for randomness reveal\n  randomnessId: string; // 32-byte randomness id\n  result: string; // 32-byte result\n  r: string; // 32-byte r value\n  s: string; // 32-byte s value\n  v: number; // 1-byte v value\n};\n\n/**\n * Create an EVM-serializable update message\n * @param param0 - UpdateHexStringParams: Components for an EVM update message\n * @returns hex string\n */\nexport function createUpdateHexString({\n  feedId,\n  discriminator,\n  result,\n  blockNumber,\n  r,\n  s,\n  v,\n  timestamp,\n}: UpdateHexStringParams): string {\n  const discriminatorHex = discriminator.toString(16).padStart(2, \"0\");\n  const resultHex = BigInt(result).toString(16).padStart(32, \"0\");\n  const blockNumberHex = BigInt(blockNumber).toString(16).padStart(16, \"0\");\n  const vHex = v.toString(16).padStart(2, \"0\");\n  const timestampHex = timestamp\n    ? BigInt(timestamp).toString(16).padStart(16, \"0\")\n    : \"\";\n  return `0x${discriminatorHex}${feedId}${resultHex}${r}${s}${vHex}${blockNumberHex}${timestampHex}`;\n}\n\n/**\n * Create an EVM-serializable attestation message\n * @param param0 - AttestationHexStringParams: Components for an EVM attestation message\n * @returns hex string\n */\nexport function createAttestationHexString({\n  discriminator,\n  oracleId,\n  queueId,\n  timestamp,\n  secp256k1Key,\n  r,\n  s,\n  v,\n  blockNumber,\n  mrEnclave,\n  guardianId,\n}: AttestationHexStringParams): string {\n  const discriminatorHex = discriminator.toString(16).padStart(2, \"0\");\n  const blockNumberHex = BigInt(blockNumber).toString(16).padStart(16, \"0\");\n  const timestampHex = BigInt(timestamp).toString(16).padStart(16, \"0\");\n  const vHex = v.toString(16).padStart(2, \"0\");\n  return `0x${discriminatorHex}${oracleId}${queueId}${mrEnclave}${secp256k1Key}${blockNumberHex}${r}${s}${vHex}${timestampHex}${guardianId}`;\n}\n\n/**\n * Create an EVM-serializable attestation message\n * @param param0 - AttestationHexStringParams: Components for an EVM attestation message\n * @returns hex string\n */\nexport function createV0AttestationHexString({\n  discriminator,\n  oracleId,\n  queueId,\n  ed25519Key,\n  secp256k1Key,\n  r,\n  s,\n  v,\n  blockNumber,\n  mrEnclave,\n}: V0AttestationHexStringParams): string {\n  const discriminatorHex = discriminator.toString(16).padStart(2, \"0\");\n  const blockNumberHex = BigInt(blockNumber).toString(16).padStart(16, \"0\");\n  const vHex = v.toString(16).padStart(2, \"0\");\n  return `0x${discriminatorHex}${oracleId}${queueId}${mrEnclave}${ed25519Key}${secp256k1Key}${blockNumberHex}${r}${s}${vHex}`;\n}\n\n/**\n * Create an EVM-serializable randomness reveal message\n * @param param0 - RandomnessRevealHexStringParams: Components for an EVM randomness reveal message\n * @returns hex string\n */\nexport function createRandomnessRevealHexString({\n  discriminator,\n  randomnessId,\n  result,\n  r,\n  s,\n  v,\n}: RandomnessRevealHexStringParams): string {\n  const discriminatorHex = discriminator.toString(16).padStart(2, \"0\");\n  const vHex = v.toString(16).padStart(2, \"0\");\n  return `0x${discriminatorHex}${randomnessId}${result}${r}${s}${vHex}`;\n}\n"]}