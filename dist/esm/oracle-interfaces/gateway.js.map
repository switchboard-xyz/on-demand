{"version":3,"file":"gateway.js","sourceRoot":"","sources":["../../../src/oracle-interfaces/gateway.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FeedRequest } from \"./../accounts/pullFeed.js\";\n\nimport { TTLCache } from \"@brokerloop/ttlcache\";\nimport type * as anchor from \"@coral-xyz/anchor-30\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { OracleJob } from \"@switchboard-xyz/common\";\nimport type { AxiosInstance } from \"axios\";\nimport axios from \"axios\";\nimport * as bs58 from \"bs58\";\n\nconst GATEWAY_PING_CACHE = new TTLCache<string, boolean>({\n  ttl: 100,\n  max: 50,\n  clock: Date,\n});\n\n// const httpsAgent = new HttpsAgent({\n//   rejectUnauthorized: false, // WARNING: This disables SSL/TLS certificate verification.\n// });\nconst TIMEOUT = 10_000;\n\nconst axiosClient: () => AxiosInstance = (() => {\n  let instance: AxiosInstance;\n\n  return () => {\n    if (!instance) {\n      instance = axios.create();\n    }\n    return instance;\n  };\n})();\n\n/**\n *  The response from the gateway after fetching signatures.\n *  Variables are snake_case for serialization.\n */\nexport type FeedEvalResponse = {\n  /**\n   *  Hex encoded oracle pubkey\n   */\n  oracle_pubkey: string;\n  /**\n   *  Hex encoded queue pubkey\n   */\n  queue_pubkey: string;\n  /**\n   *  Hex encoded oracle signing pubkey\n   */\n  oracle_signing_pubkey: string;\n  /**\n   *  Hex encoded feed id\n   */\n  feed_hash: string;\n  /**\n   *  Hex encoded blockhash/slothash the response was signed with.\n   */\n  recent_hash: string;\n  /**\n   *  Errors encountered while fetching feed value\n   */\n  failure_error: string;\n  /**\n   *  Feed values derived\n   */\n  success_value: string;\n  /**\n   *  Signed message of the result and blockhash\n   */\n  msg: string;\n  /**\n   *  Oracle signature of the result and blockhash\n   *\n   *  Sha256(success_feed_hashes || results || slothash)\n   */\n  signature: string;\n  recovery_id: number;\n\n  /**\n   *  If the feed fetch failed, get other recent successes\n   */\n  recent_successes_if_failed: Array<FeedEvalResponse>;\n\n  /**\n   * Timestamp marking when the result was fetched\n   */\n  timestamp?: number;\n};\n\nexport type FeedEvalManyResponse = {\n  feed_responses: FeedEvalResponse[];\n  signature: string;\n  recovery_id: number;\n  errors: string[];\n};\n\nexport type FetchSignaturesMultiResponse = {\n  oracle_responses: FeedEvalManyResponse[];\n  errors: string[];\n};\n\nexport type FeedEvalBatchResponse = {\n  feed_responses: FeedEvalResponse[];\n  errors: string[];\n};\n\nexport type FetchSignaturesBatchResponse = {\n  oracle_responses: FeedEvalBatchResponse[];\n  errors: string[];\n};\n\n/**\n *  The response from the gateway after revealing randomness.\n *  Variables are snake_case for serialization.\n */\nexport type RandomnessRevealResponse = {\n  /**\n   * Signature of the randomness using the oracle's enclave key\n   */\n  signature: string;\n  /**\n   * Recovery ID of the signature\n   */\n  recovery_id: number;\n  /**\n   * The randomness value\n   */\n  value: Array<number>;\n};\n\n/**\n * The response from the gateway after attesting an enclave.\n */\nexport type AttestEnclaveResponse = {\n  /**\n   * The guardian's public key\n   */\n  guardian: string;\n  /**\n   * The signature of the guardian\n   */\n  signature: string;\n  /**\n   * The recovery ID of the signature\n   */\n  recovery_id: number;\n};\n\n/**\n * The response from the ping endpoint.\n */\nexport type PingResponse = {\n  /**\n   * The oracle's public key\n   */\n  oracle_pubkey: string;\n\n  /**\n   * The oracle's authority pubkey\n   */\n  oracle_authority: string;\n\n  /**\n   * The oracle's queue pubkey\n   */\n  queue: string;\n\n  /**\n   * The registered rate limit for oracle\n   */\n  rate_limit: number;\n\n  /**\n   * The oracle's version\n   */\n  version: string;\n\n  /**\n   * The oracle's enclave measurement\n   */\n  mr_enclave: string;\n\n  /**\n   * Is the oracle a push oracle\n   */\n  is_push_oracle: boolean;\n\n  /**\n   * Is the oracle a pull oracle\n   */\n  is_pull_oracle: boolean;\n\n  /**\n   * Is the oracle a guardian\n   */\n  is_gateway: boolean;\n\n  /**\n   * Is the oracle a guardian\n   */\n  is_guardian: boolean;\n};\n\n/**\n * The Quote info from the gateway_fetch_quote endpoint\n */\nexport type FetchQuoteResponse = {\n  /**\n   * The oracle's pubkey\n   */\n  oracle_pubkey: string;\n\n  /**\n   * The oracle's queue pubkey\n   */\n  queue: string;\n\n  /**\n   * The current timestamp used for generating the checksum\n   */\n  now: number;\n\n  /**\n   * The oracle's enclave measurement\n   */\n  mr_enclave: string;\n\n  /**\n   * The oracle's ed25519 pubkey\n   */\n  ed25519_pubkey: string;\n\n  /**\n   * The oracle's secp256k1 pubkey\n   */\n  secp256k1_pubkey: string;\n\n  /**\n   * The base64 encoded quote\n   */\n  quote: string;\n};\n\nexport interface BridgeEnclaveResponse {\n  /**\n   * The guardian's public key\n   */\n  guardian: string;\n\n  /**\n   * The oracle's public key\n   */\n  oracle: string;\n\n  /**\n   * The queue (pubkey) that the oracle belongs to\n   */\n  queue: string;\n\n  /**\n   * The enclave measurement for the oracle\n   */\n  mr_enclave: string;\n\n  /**\n   * The chain hash read on the guardian\n   */\n  chain_hash: string;\n\n  /**\n   * The secp256k1 enclave signer for the oracle\n   */\n  oracle_secp256k1_enclave_signer: string;\n\n  /**\n   * The checksum of the attestation message\n   */\n  msg: string;\n\n  /**\n   * (UNUSED) The attestation message before being hashed\n   */\n  msg_prehash: string;\n\n  /**\n   * The ed25519 enclave signer for the oracle\n   */\n  oracle_ed25519_enclave_signer?: string;\n\n  /**\n   * The timestamp of the attestation\n   */\n  timestamp?: number;\n\n  /**\n   * The signature from the guardian\n   */\n  signature: string;\n  recovery_id: number;\n}\n\n/**\n *  base64 encodes an array of oracle jobs. to send to a gateway\n */\nfunction encodeJobs(jobArray: OracleJob[]): string[] {\n  return jobArray.map((job) => {\n    const encoded = OracleJob.encodeDelimited(\n      OracleJob.fromObject(job)\n    ).finish();\n    // const decoded = OracleJob.decodeDelimited(encoded);\n    return Buffer.from(encoded).toString(\"base64\");\n  });\n}\n\n/**\n *  The gateway class is used to interface with the switchboard gateway REST API.\n */\nexport class Gateway {\n  /**\n   *  Constructs a `Gateway` instance.\n   *\n   *  @param program The Anchor program instance.\n   *  @param gatewayUrl The URL of the switchboard gateway.\n   */\n  constructor(\n    readonly program: anchor.Program,\n    readonly gatewayUrl: string,\n    readonly oracleKey?: PublicKey\n  ) {}\n\n  /**\n   *  Fetches signatures from the gateway.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param encodedJobs The base64 encoded oracle jobs.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  async fetchSignaturesFromEncoded(params: {\n    recentHash?: string;\n    encodedJobs: string[];\n    numSignatures: number;\n    maxVariance: number;\n    minResponses: number;\n    useTimestamp?: boolean;\n  }): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    // TODO: have total NumOracles count against rate limit per IP\n    const { recentHash, encodedJobs, numSignatures } = params;\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures`;\n    const headers = { \"Content-Type\": \"application/json\" };\n    const maxVariance = params.maxVariance * 1e9;\n    const body = JSON.stringify({\n      api_version: \"1.0.0\",\n      jobs_b64_encoded: encodedJobs,\n      recent_chainhash: recentHash ?? bs58.encode(Buffer.alloc(32, 0)),\n      signature_scheme: \"Secp256k1\",\n      hash_scheme: \"Sha256\",\n      num_oracles: numSignatures,\n      max_variance: maxVariance,\n      min_responses: params.minResponses,\n      use_timestamp: params.useTimestamp ?? false,\n    });\n    return axiosClient()\n      .post(url, body, {\n        headers,\n        timeout: TIMEOUT,\n      })\n      .then((r) => r.data);\n  }\n\n  async ping(): Promise<PingResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/ping`;\n    const method = \"POST\";\n    const headers = { \"Content-Type\": \"application/json\" };\n    const body = JSON.stringify({ api_version: \"1.0.0\" });\n    return axiosClient()\n      .post(url, body, { method, headers, timeout: TIMEOUT })\n      .then((r) => r.data);\n  }\n\n  /**\n   *\n   * Fetches signatures from the gateway.\n   * REST API endpoint: /api/v1/gateway_attest_enclave\n   * @param timestamp The timestamp of the attestation\n   * @param quote The quote of the attestation\n   * @param oracle_pubkey The oracle's public key\n   * @param oracle_reward_wallet The oracle's reward wallet\n   * @param oracle_ed25519_enclave_signer The oracle's ed25519 enclave signer\n   * @param oracle_secp256k1_enclave_signer The oracle's secp256k1 enclave signer\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @returns A promise that resolves to the attestation response.\n   * @throws if the request fails.\n   */\n  async fetchAttestation(params: {\n    timestamp: number;\n    quote: string;\n    oracle_pubkey: string;\n    oracle_reward_wallet: string;\n    oracle_ed25519_enclave_signer: string;\n    oracle_secp256k1_enclave_signer: string;\n    recentHash: string;\n  }): Promise<AttestEnclaveResponse> {\n    const api_version = \"1.0.0\";\n    const url = `${this.gatewayUrl}/gateway/api/v1/gateway_attest_enclave`;\n    const method = \"POST\";\n    const headers = { \"Content-Type\": \"application/json\" };\n    const body = JSON.stringify({\n      api_version,\n      timestamp: params.timestamp,\n      quote: params.quote,\n      oracle_pubkey: params.oracle_pubkey,\n      oracle_reward_wallet: params.oracle_reward_wallet,\n      oracle_ed25519_enclave_signer: params.oracle_ed25519_enclave_signer,\n      oracle_secp256k1_enclave_signer: params.oracle_secp256k1_enclave_signer,\n      chain_hash: params.recentHash,\n    });\n\n    return axiosClient()\n      .post(url, { method, headers, data: body, timeout: TIMEOUT })\n      .then((r) => r.data);\n  }\n\n  /**\n   * Fetches a quote from the gateway.\n   *\n   * REST API endpoint: /api/v1/gateway_fetch_quote\n   *\n   *\n   * @param blockhash The blockhash to fetch the quote for.\n   * @param get_for_oracle Whether to fetch the quote for the oracle.\n   * @param get_for_guardian Whether to fetch the quote for the guardian.\n   * @returns A promise that resolves to the quote response.\n   * @throws if the request fails.\n   */\n  async fetchQuote(params: {\n    blockhash: string;\n    get_for_oracle: boolean;\n    get_for_guardian: boolean;\n  }): Promise<FetchQuoteResponse[]> {\n    const api_version = \"1.0.0\";\n    const url = `${this.endpoint()}/gateway/api/v1/gateway_fetch_quote`;\n    const method = \"POST\";\n    const headers = { \"Content-Type\": \"application/json\" };\n    const body = JSON.stringify({\n      api_version,\n      blockhash: params.blockhash,\n      get_for_oracle: params.get_for_oracle,\n      get_for_guardian: params.get_for_guardian,\n    });\n    return axiosClient()\n      .post(url, { method, headers, data: body, timeout: TIMEOUT })\n      .then(async (r) => {\n        return r.data;\n      });\n  }\n\n  // alberthermida@Switchboard ts % curl -X POST \\\n  // -H \"Content-Type: application/json\" \\\n  // -d '{\n  //   \"api_version\": \"1.0.0\",\n  //   \"blockhash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n  //   \"get_for_oracle\": true,\n  //   \"get_for_guardian\": false\n  // }' \\\n  // https://vu-ams-02.switchboard-oracles.xyz/gateway/api/v1/gateway_fetch_quote\n\n  /**\n   *  Fetches signatures from the gateway.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param jobs The oracle jobs to perform.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @param maxVariance The maximum variance allowed in the feed values.\n   *  @param minResponses The minimum number of responses of jobs to succeed.\n   *  @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  async fetchSignatures(params: {\n    recentHash?: string;\n    jobs: OracleJob[];\n    numSignatures?: number;\n    maxVariance?: number;\n    minResponses?: number;\n    useTimestamp?: boolean;\n  }): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    params.numSignatures = params.numSignatures ?? 1;\n    params.maxVariance = params.maxVariance ?? 1;\n    params.minResponses = params.minResponses ?? 1;\n    const {\n      recentHash,\n      jobs,\n      numSignatures,\n      maxVariance,\n      minResponses,\n      useTimestamp,\n    } = params;\n    const encodedJobs = encodeJobs(jobs);\n    const res = await this.fetchSignaturesFromEncoded({\n      recentHash,\n      encodedJobs,\n      numSignatures,\n      maxVariance,\n      minResponses,\n      useTimestamp,\n    });\n    return res;\n  }\n\n  async fetchSignaturesMulti(params: {\n    recentHash?: string;\n    feedConfigs: FeedRequest[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n  }): Promise<FetchSignaturesMultiResponse> {\n    const { recentHash, feedConfigs, useTimestamp, numSignatures } = params;\n    const encodedConfigs = feedConfigs.map((config) => {\n      const encodedJobs = encodeJobs(config.jobs);\n      return {\n        encodedJobs,\n        maxVariance: config.maxVariance ?? 1,\n        minResponses: config.minResponses ?? 1,\n      };\n    });\n    const res = await this.fetchSignaturesFromEncodedMulti({\n      recentHash,\n      encodedConfigs,\n      numSignatures: numSignatures ?? 1,\n      useTimestamp,\n    });\n    return res;\n  }\n\n  async fetchSignaturesFromEncodedMulti(params: {\n    recentHash?: string;\n    encodedConfigs: {\n      encodedJobs: string[];\n      maxVariance: number;\n      minResponses: number;\n    }[];\n    numSignatures: number;\n    useTimestamp?: boolean;\n  }): Promise<FetchSignaturesMultiResponse> {\n    // TODO: have total NumOracles count against rate limit per IP\n    const { recentHash, encodedConfigs, numSignatures } = params;\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures_multi`;\n    const method = \"POST\";\n    const headers = { \"Content-Type\": \"application/json\" };\n    const body = {\n      api_version: \"1.0.0\",\n      num_oracles: numSignatures,\n      recent_hash: recentHash ?? bs58.encode(Buffer.alloc(32, 0)),\n      signature_scheme: \"Secp256k1\",\n      hash_scheme: \"Sha256\",\n      feed_requests: [] as any,\n    };\n    for (const config of encodedConfigs) {\n      const maxVariance = Math.floor(Number(config.maxVariance ?? 1) * 1e9);\n      body.feed_requests.push({\n        jobs_b64_encoded: config.encodedJobs,\n        max_variance: maxVariance,\n        min_responses: config.minResponses ?? 1,\n        use_timestamp: params.useTimestamp ?? false,\n      });\n    }\n    const data = JSON.stringify(body);\n    try {\n      const resp = await axiosClient()(url, { method, headers, data }).then(\n        (r) => r.data\n      );\n      return resp;\n    } catch (err) {\n      console.error(\"fetchSignaturesFromEncodedMulti error\", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Fetches signatures from the gateway without pre-encoded jobs\n   * REST API endpoint: /api/v1/fetch_signatures_batch\n   *\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @param feedConfigs The feed configurations to fetch signatures for.\n   * @param numSignatures The number of oracles to fetch signatures from.\n   * @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   * @returns A promise that resolves to the feed evaluation responses.\n   * @throws if the request fails.\n   */\n  async fetchSignaturesBatch(params: {\n    recentHash?: string;\n    feedConfigs: FeedRequest[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n  }): Promise<FetchSignaturesBatchResponse> {\n    const { recentHash, feedConfigs, useTimestamp, numSignatures } = params;\n    const encodedConfigs = feedConfigs.map((config) => {\n      const encodedJobs = encodeJobs(config.jobs);\n      return {\n        encodedJobs,\n        maxVariance: config.maxVariance ?? 1,\n        minResponses: config.minResponses ?? 1,\n      };\n    });\n    const res = await this.fetchSignaturesFromEncodedBatch({\n      recentHash,\n      encodedConfigs,\n      numSignatures: numSignatures ?? 1,\n      useTimestamp,\n    });\n    return res;\n  }\n\n  /**\n   * Fetches signatures from the gateway.\n   * REST API endpoint: /api/v1/fetch_signatures_batch\n   *\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @param encodedConfigs The encoded feed configurations to fetch signatures for.\n   * @param numSignatures The number of oracles to fetch signatures from.\n   * @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   * @returns A promise that resolves to the feed evaluation responses.\n   * @throws if the request fails.\n   */\n  async fetchSignaturesFromEncodedBatch(params: {\n    recentHash?: string;\n    encodedConfigs: {\n      encodedJobs: string[];\n      maxVariance: number;\n      minResponses: number;\n    }[];\n    numSignatures: number;\n    useTimestamp?: boolean;\n  }): Promise<FetchSignaturesBatchResponse> {\n    const { recentHash, encodedConfigs, numSignatures } = params;\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures_batch`;\n    const method = \"POST\";\n    const headers = { \"Content-Type\": \"application/json\" };\n    const body = {\n      api_version: \"1.0.0\",\n      num_oracles: numSignatures,\n      recent_hash: recentHash ?? bs58.encode(Buffer.alloc(32, 0)),\n      signature_scheme: \"Secp256k1\",\n      hash_scheme: \"Sha256\",\n      feed_requests: [] as any,\n    };\n    for (const config of encodedConfigs) {\n      const maxVariance = Math.floor(Number(config.maxVariance ?? 1) * 1e9);\n      body.feed_requests.push({\n        jobs_b64_encoded: config.encodedJobs,\n        max_variance: maxVariance,\n        min_responses: config.minResponses ?? 1,\n        use_timestamp: params.useTimestamp ?? false,\n      });\n    }\n    const data = JSON.stringify(body);\n\n    // get size of data\n    try {\n      const resp = await axiosClient()(url, { method, headers, data }).then(\n        (r) => {\n          return {\n            ...r.data,\n          };\n        }\n      );\n\n      return resp;\n    } catch (err) {\n      console.error(\"fetchSignaturesFromEncodedBatch error\", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Sends a request to the gateway bridge enclave.\n   *\n   * REST API endpoint: /api/v1/gateway_bridge_enclave\n   *\n   * @param chainHash The chain hash to include in the request.\n   * @param oraclePubkey The public key of the oracle.\n   * @param queuePubkey The public key of the queue.\n   * @returns A promise that resolves to the response.\n   * @throws if the request fails.\n   */\n  async fetchBridgingMessage(params: {\n    chainHash: string;\n    oraclePubkey: string;\n    queuePubkey: string;\n  }): Promise<BridgeEnclaveResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/gateway_bridge_enclave`;\n    const method = \"POST\";\n    const headers = { \"Content-Type\": \"application/json\" };\n    const body = {\n      api_version: \"1.0.0\",\n      chain_hash: params.chainHash,\n      oracle_pubkey: params.oraclePubkey,\n      queue_pubkey: params.queuePubkey,\n    };\n    const data = JSON.stringify(body);\n\n    try {\n      const resp = await axiosClient()(url, { method, headers, data }).then(\n        (r) => r.data\n      );\n      return resp;\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  /**\n   * Fetches the randomness reveal from the gateway.\n   * @param params The parameters for the randomness reveal.\n   * @returns The randomness reveal response.\n   */\n  async fetchRandomnessReveal(\n    params:\n      | {\n          randomnessAccount: PublicKey;\n          slothash: string;\n          slot: number;\n        }\n      | {\n          randomnessId: string;\n          timestamp: number;\n          minStalenessSeconds: number;\n        }\n  ): Promise<RandomnessRevealResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/randomness_reveal`;\n    const method = \"POST\";\n    const responseType = \"text\";\n    const headers = { \"Content-Type\": \"application/json\" };\n\n    // Handle Solana and Cross-Chain Randomness\n    let data: string;\n    if (\"slot\" in params) {\n      // Solana Randomness\n      data = JSON.stringify({\n        slothash: [...bs58.decode(params.slothash)],\n        randomness_key: params.randomnessAccount.toBuffer().toString(\"hex\"),\n        slot: params.slot,\n      });\n    } else {\n      // Cross-chain randomness\n      data = JSON.stringify({\n        timestamp: params.timestamp,\n        min_staleness_seconds: params.minStalenessSeconds,\n        randomness_key: params.randomnessId,\n      });\n    }\n    try {\n      const txtResponse = await axiosClient()(url, {\n        method,\n        headers,\n        data,\n        responseType,\n      });\n      return JSON.parse(txtResponse.data);\n    } catch (err) {\n      console.error(\"fetchRandomnessReveal error\", err);\n      throw err;\n    }\n  }\n\n  async test(): Promise<boolean> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/test`;\n    const cachedResponse = GATEWAY_PING_CACHE.get(this.gatewayUrl);\n    if (cachedResponse !== undefined) {\n      return cachedResponse;\n    }\n    try {\n      const txt = await axiosClient()(url);\n      if (txt.data.length !== 0) {\n        GATEWAY_PING_CACHE.set(this.gatewayUrl, true);\n        return true;\n      }\n    } catch {}\n    GATEWAY_PING_CACHE.set(this.gatewayUrl, false);\n    return false;\n  }\n\n  endpoint(): string {\n    return this.gatewayUrl;\n  }\n\n  toString(): string {\n    return JSON.stringify({\n      gatewayUrl: this.gatewayUrl,\n      programId: this.program.programId.toBase58(),\n    });\n  }\n\n  [Symbol.toPrimitive](hint: string) {\n    if (hint === \"string\") {\n      return `Gateway: ${this.toString()}`;\n    }\n    return null;\n  }\n}\n"]}