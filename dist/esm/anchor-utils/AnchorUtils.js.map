{"version":3,"file":"AnchorUtils.js","sourceRoot":"","sources":["../../../src/anchor-utils/AnchorUtils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,mBAAmB,EACnB,oBAAoB,EACpB,qBAAqB,GACtB,MAAM,UAAU,CAAC;AAElB,OAAO,KAAK,MAAM,MAAM,sBAAsB,CAAC;AAC/C,OAAO,UAAU,MAAM,6CAA6C,CAAC;AAErE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAa,MAAM,iBAAiB,CAAC;AACjE,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3B,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAcxB;;;;;GAKG;AACH,MAAM,OAAO,WAAW;IACtB;;;;;OAKG;IACH,MAAM,CAAO,kBAAkB,CAC7B,QAAgB;;YAEhB,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YAChE,MAAM,MAAM,GAAe,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;YACnD,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC3B,CAAC;KAAA;IAED;;;;;OAKG;IACH,MAAM,CAAO,mBAAmB,CAAC,QAAgB;;YAC/C,MAAM,eAAe,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;YACxE,MAAM,SAAS,GAAe,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAC3E,MAAM,OAAO,GAAY,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC1D,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAED;;;;OAIG;IACH,MAAM,CAAO,kBAAkB;;YAC7B,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3C,MAAM,SAAS,GAAG,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACzD,IAAI,GAAG,GAAG,qBAAqB,CAAC;YAChC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,GAAG,GAAG,oBAAoB,CAAC;YAC7B,CAAC;YACD,MAAM,GAAG,GAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAE,CAAC;YACnE,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzD,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;KAAA;IAED;;;;OAIG;IACH,MAAM,CAAO,OAAO;;YAClB,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAC1B,EAAE,CAAC,OAAO,EAAE,EACZ,SAAS,EACT,QAAQ,EACR,KAAK,EACL,YAAY,CACb,CAAC;YACF,MAAM,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACrC,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,+BAA+B,CAAC,CAAC;YACnE,MAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC1C,MAAM,MAAM,GAAiB;gBAC3B,MAAM,EAAE,IAAI,CAAC,YAAY;gBACzB,YAAY,EAAE,IAAI,CAAC,aAAa;gBAChC,WAAW,EAAE,IAAI,CAAC,YAAY;gBAC9B,UAAU,EAAE,IAAI,CAAC,UAAwB;gBACzC,OAAO,EAAE,IAAI,CAAC,YAAY;gBAC1B,UAAU,EAAE,UAAU;gBACtB,QAAQ,EAAE,IAAI,MAAM,CAAC,cAAc,CACjC,UAAU,EACV,IAAI,UAAU,CAAC,cAAc,CAAC,EAC9B,EAAE,CACH;gBACD,MAAM,EAAE,IAAI,UAAU,CAAC,cAAc,CAAC;gBACtC,OAAO,EAAE,IAAI;aACd,CAAC;YACF,MAAM,CAAC,OAAO,GAAG,CACf,MAAM,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,CACzD,CAAC,CAAC,CAAC,CAAC;YACL,MAAM,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE;gBAChD,UAAU,EAAE,WAAW;aACxB,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,cAAc,CACzC,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,MAAM,EACb;gBACE,mBAAmB,EAAE,WAAW;gBAChC,UAAU,EAAE,WAAW;aACxB,CACF,CAAC;YACF,MAAM,SAAS,GAAG,MAAM,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC/D,IAAI,GAAG,GAAG,qBAAqB,CAAC;YAChC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,GAAG,GAAG,oBAAoB,CAAC;YAC7B,CAAC;YACD,MAAM,GAAG,GAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAE,CAAC;YACnE,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzD,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;YAEzB,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAED;;;;;;OAMG;IACH,MAAM,CAAC,YAAY,CAAC,OAAuB,EAAE,IAAc;QACzD,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtD,MAAM,GAAG,GAAU,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,IAAI,GAAG,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBACrC,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC/B,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;oBAAE,OAAO;gBACjC,IAAI,CAAC;oBACH,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrC,CAAC;gBAAC,WAAM,CAAC,CAAA,CAAC;YACZ,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;CACF","sourcesContent":["import {\n  isMainnetConnection,\n  ON_DEMAND_DEVNET_PID,\n  ON_DEMAND_MAINNET_PID,\n} from \"../utils\";\n\nimport * as anchor from \"@coral-xyz/anchor-30\";\nimport NodeWallet from \"@coral-xyz/anchor-30/dist/cjs/nodewallet.js\";\nimport type { Commitment } from \"@solana/web3.js\";\nimport { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport * as fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport os from \"os\";\nimport path from \"path\";\n\ntype SolanaConfig = {\n  rpcUrl: string;\n  webSocketUrl: string;\n  keypairPath: string;\n  commitment: Commitment;\n  keypair: Keypair;\n  connection: Connection;\n  provider: anchor.AnchorProvider;\n  wallet: NodeWallet;\n  program: anchor.Program | null;\n};\n\n/*\n * AnchorUtils is a utility class that provides helper functions for working with\n * the Anchor framework. It is a static class, meaning that it does not need to be\n * instantiated to be used. It is a collection of helper functions that can be used\n * to simplify common tasks when working with Anchor.\n */\nexport class AnchorUtils {\n  /**\n   * Initializes a wallet from a file.\n   *\n   * @param {string} filePath - The path to the file containing the wallet's secret key.\n   * @returns {Promise<[NodeWallet, Keypair]>} A promise that resolves to a tuple containing the wallet and the keypair.\n   */\n  static async initWalletFromFile(\n    filePath: string\n  ): Promise<[NodeWallet, Keypair]> {\n    const keypair = await AnchorUtils.initKeypairFromFile(filePath);\n    const wallet: NodeWallet = new NodeWallet(keypair);\n    return [wallet, keypair];\n  }\n\n  /**\n   * Initializes a keypair from a file.\n   *\n   * @param {string} filePath - The path to the file containing the keypair's secret key.\n   * @returns {Promise<Keypair>} A promise that resolves to the keypair.\n   */\n  static async initKeypairFromFile(filePath: string): Promise<Keypair> {\n    const secretKeyString = fs.readFileSync(filePath, { encoding: \"utf8\" });\n    const secretKey: Uint8Array = Uint8Array.from(JSON.parse(secretKeyString));\n    const keypair: Keypair = Keypair.fromSecretKey(secretKey);\n    return keypair;\n  }\n\n  /**\n   * Loads an Anchor program from the environment.\n   *\n   * @returns {Promise<anchor.Program>} A promise that resolves to the loaded Anchor program.\n   */\n  static async loadProgramFromEnv(): Promise<anchor.Program> {\n    const config = await AnchorUtils.loadEnv();\n    const isMainnet = isMainnetConnection(config.connection);\n    let pid = ON_DEMAND_MAINNET_PID;\n    if (!isMainnet) {\n      pid = ON_DEMAND_DEVNET_PID;\n    }\n    const idl = (await anchor.Program.fetchIdl(pid, config.provider))!;\n    const program = new anchor.Program(idl, config.provider);\n    return new anchor.Program(idl, config.provider);\n  }\n\n  /**\n   * Loads the same environment set for the Solana CLI.\n   *\n   * @returns {Promise<SolanaConfig>} A promise that resolves to the Solana configuration.\n   */\n  static async loadEnv(): Promise<SolanaConfig> {\n    const configPath = path.join(\n      os.homedir(),\n      \".config\",\n      \"solana\",\n      \"cli\",\n      \"config.yml\"\n    );\n    const fileContents = fs.readFileSync(configPath, \"utf8\");\n    const data = yaml.load(fileContents);\n    const defaultCon = new Connection(\"https://api.devnet.solana.com\");\n    const defaultKeypair = Keypair.generate();\n    const config: SolanaConfig = {\n      rpcUrl: data.json_rpc_url,\n      webSocketUrl: data.websocket_url,\n      keypairPath: data.keypair_path,\n      commitment: data.commitment as Commitment,\n      keypair: data.keypair_path,\n      connection: defaultCon,\n      provider: new anchor.AnchorProvider(\n        defaultCon,\n        new NodeWallet(defaultKeypair),\n        {}\n      ),\n      wallet: new NodeWallet(defaultKeypair),\n      program: null,\n    };\n    config.keypair = (\n      await AnchorUtils.initWalletFromFile(config.keypairPath)\n    )[1];\n    config.connection = new Connection(config.rpcUrl, {\n      commitment: \"confirmed\",\n    });\n    config.wallet = new NodeWallet(config.keypair);\n    config.provider = new anchor.AnchorProvider(\n      config.connection,\n      config.wallet,\n      {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\",\n      }\n    );\n    const isMainnet = await isMainnetConnection(config.connection);\n    let pid = ON_DEMAND_MAINNET_PID;\n    if (!isMainnet) {\n      pid = ON_DEMAND_DEVNET_PID;\n    }\n    const idl = (await anchor.Program.fetchIdl(pid, config.provider))!;\n    const program = new anchor.Program(idl, config.provider);\n    config.program = program;\n\n    return config;\n  }\n\n  /**\n   * Parse out anchor events from the logs present in the program IDL.\n   *\n   * @param {anchor.Program} program - The Anchor program instance.\n   * @param {string[]} logs - The array of logs to parse.\n   * @returns {any[]} An array of parsed events.\n   */\n  static loggedEvents(program: anchor.Program, logs: string[]): any[] {\n    const coder = new anchor.BorshEventCoder(program.idl);\n    const out: any[] = [];\n    logs.forEach((log) => {\n      if (log.startsWith(\"Program data: \")) {\n        const strings = log.split(\" \");\n        if (strings.length !== 3) return;\n        try {\n          out.push(coder.decode(strings[2]));\n        } catch {}\n      }\n    });\n    return out;\n  }\n}\n"]}