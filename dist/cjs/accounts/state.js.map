{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../src/accounts/state.ts"],"names":[],"mappings":"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","sourcesContent":["import { Queue } from \"./queue.js\";\n\nimport type { BN, Program } from \"@coral-xyz/anchor-30\";\nimport type { TransactionInstruction } from \"@solana/web3.js\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\n/**\n *  Abstraction around the Switchboard-On-Demand State account\n *\n *  This account is used to store the state data for a given program.\n */\nexport class State {\n  public pubkey: PublicKey;\n\n  /**\n   * Derives a state PDA (Program Derived Address) from the program.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @returns {PublicKey} The derived state account's public key.\n   */\n  static keyFromSeed(program: Program): PublicKey {\n    const [state] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"STATE\")],\n      program.programId\n    );\n    return state;\n  }\n\n  /**\n   * Initializes the state account.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @returns {Promise<[State, string]>} A promise that resolves to the state account and the transaction signature.\n   */\n  static async create(program: Program): Promise<[State, String]> {\n    const payer = (program.provider as any).wallet.payer;\n    const sig = await program.rpc.stateInit(\n      {},\n      {\n        accounts: {\n          state: State.keyFromSeed(program),\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [payer],\n      }\n    );\n\n    return [new State(program), sig];\n  }\n\n  /**\n   * Constructs a `State` instance.\n   *\n   * @param {Program} program - The Anchor program instance.\n   */\n  constructor(readonly program: Program) {\n    const pubkey = State.keyFromSeed(program);\n    this.pubkey = pubkey;\n  }\n\n  /**\n   * Set program-wide configurations.\n   *\n   * @param {object} params - The configuration parameters.\n   * @param {PublicKey} [params.guardianQueue] - The guardian queue account.\n   * @param {PublicKey} [params.newAuthority] - The new authority account.\n   * @param {BN} [params.minQuoteVerifyVotes] - The minimum number of votes required to verify a quote.\n   * @param {PublicKey} [params.stakeProgram] - The stake program account.\n   * @param {PublicKey} [params.stakePool] - The stake pool account.\n   * @param {number} [params.permitAdvisory] - The permit advisory value.\n   * @param {number} [params.denyAdvisory] - The deny advisory value.\n   * @param {boolean} [params.testOnlyDisableMrEnclaveCheck] - A flag to disable MrEnclave check for testing purposes.\n   * @param {PublicKey} [params.switchMint] - The switch mint account.\n   * @param {BN} [params.epochLength] - The epoch length.\n   * @param {boolean} [params.resetEpochs] - A flag to reset epochs.\n   * @param {boolean} [params.enableStaking] - A flag to enable staking.\n   * @returns {Promise<TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async setConfigsIx(params: {\n    guardianQueue?: PublicKey;\n    newAuthority?: PublicKey;\n    minQuoteVerifyVotes?: BN;\n    stakeProgram?: PublicKey;\n    stakePool?: PublicKey;\n    permitAdvisory?: number;\n    denyAdvisory?: number;\n    testOnlyDisableMrEnclaveCheck?: boolean;\n    switchMint?: PublicKey;\n    epochLength?: BN;\n    resetEpochs?: boolean;\n    enableStaking?: boolean;\n    addCostWl?: PublicKey;\n    rmCostWl?: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const state = await this.loadData();\n    const queue = params.guardianQueue ?? state.guardianQueue;\n    const program = this.program;\n    const payer = (program.provider as any).wallet.payer;\n    const testOnlyDisableMrEnclaveCheck =\n      params.testOnlyDisableMrEnclaveCheck ??\n      state.testOnlyDisableMrEnclaveCheck;\n    const resetEpochs = params.resetEpochs ?? false;\n    const ix = await this.program.instruction.stateSetConfigs(\n      {\n        newAuthority: params.newAuthority ?? state.authority,\n        testOnlyDisableMrEnclaveCheck: testOnlyDisableMrEnclaveCheck ? 1 : 0,\n        stakePool: params.stakePool ?? state.stakePool,\n        stakeProgram: params.stakeProgram ?? state.stakeProgram,\n        addAdvisory: params.permitAdvisory,\n        rmAdvisory: params.denyAdvisory,\n        epochLength: params.epochLength ?? state.epochLength,\n        resetEpochs: resetEpochs,\n        lutSlot: state.lutSlot,\n        switchMint: params.switchMint ?? state.switchMint,\n        enableStaking: params.enableStaking ?? state.enableStaking,\n        authority: params.newAuthority ?? state.authority,\n        addCostWl: params.addCostWl ?? PublicKey.default,\n        rmCostWl: params.rmCostWl ?? PublicKey.default,\n      },\n      {\n        accounts: {\n          state: this.pubkey,\n          authority: state.authority,\n          queue,\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Register a guardian with the global guardian queue.\n   *\n   * @param {object} params - The parameters object.\n   * @param {PublicKey} params.guardian - The guardian account.\n   * @returns {Promise<TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async registerGuardianIx(params: {\n    guardian: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const state = await this.loadData();\n    const program = this.program;\n    const payer = (program.provider as any).wallet.payer;\n    const ix = await this.program.instruction.guardianRegister(\n      {},\n      {\n        accounts: {\n          oracle: params.guardian,\n          state: this.pubkey,\n          guardianQueue: state.guardianQueue,\n          authority: state.authority,\n        },\n        signers: [payer],\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Unregister a guardian from the global guardian queue.\n   *\n   * @param {object} params - The parameters object.\n   * @param {PublicKey} params.guardian - The guardian account.\n   * @returns {Promise<TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async unregisterGuardianIx(params: {\n    guardian: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const state = await this.loadData();\n    const guardianQueue = new Queue(this.program, state.guardianQueue);\n    const queueData = await guardianQueue.loadData();\n    const idx = queueData.guardians.findIndex((key) =>\n      key.equals(params.guardian)\n    );\n    const program = this.program;\n    const payer = (program.provider as any).wallet.payer;\n    const ix = await this.program.instruction.guardianUnregister(\n      { idx },\n      {\n        accounts: {\n          oracle: params.guardian,\n          state: this.pubkey,\n          guardianQueue: state.guardianQueue,\n          authority: state.authority,\n        },\n        signers: [payer],\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Loads the state data from on chain.\n   *\n   *  @returns A promise that resolves to the state data.\n   *  @throws if the state account does not exist.\n   */\n  async loadData(): Promise<any> {\n    return await this.program.account[\"state\"].fetch(this.pubkey);\n  }\n\n  /**\n   *  Loads the state data from on chain.\n   *\n   *  @returns A promise that resolves to the state data.\n   *  @throws if the state account does not exist.\n   */\n  static async loadData(program: Program): Promise<any> {\n    const state = new State(program);\n    return await state.loadData();\n  }\n}\n"]}