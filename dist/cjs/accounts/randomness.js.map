{"version":3,"file":"randomness.js","sourceRoot":"","sources":["../../../src/accounts/randomness.ts"],"names":[],"mappings":"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","sourcesContent":["import { SLOT_HASHES_SYSVAR_ID } from \"../constants.js\";\nimport type { RandomnessRevealResponse } from \"../oracle-interfaces/gateway.js\";\nimport { Gateway } from \"../oracle-interfaces/gateway.js\";\n\nimport { InstructionUtils } from \"./../instruction-utils/InstructionUtils.js\";\nimport { RecentSlotHashes } from \"./../sysvars/recentSlothashes.js\";\nimport * as spl from \"./../utils/index.js\";\nimport { Oracle } from \"./oracle.js\";\nimport { Queue } from \"./queue.js\";\nimport { State } from \"./state.js\";\n\nimport {\n  BN,\n  BorshAccountsCoder,\n  type Program,\n  utils,\n} from \"@coral-xyz/anchor-30\";\nimport * as anchor from \"@coral-xyz/anchor-30\";\nimport type { TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  AddressLookupTableAccount,\n  AddressLookupTableProgram,\n  ComputeBudgetProgram,\n  Keypair,\n  MessageV0,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { sendTxWithJito } from \"@solworks/soltoolkit-sdk/build/modules/TransactionWrapper.js\";\nimport * as bs58 from \"bs58\";\nimport * as fs from \"fs\";\n\n/**\n * Switchboard commit-reveal randomness.\n * This account type controls commit-reveal style randomness employing\n * Intel SGX enclaves as a randomness security mechanism.\n * For this flow, a user must commit to a future slot that would be unknown\n * to all parties at the time of commitment. The user must then reveal the\n * randomness by then sending the future slot hash to the oracle which can\n * then be signed by the secret key secured within the Trusted Execution Environment.\n *\n * In this manner, the only way for one to predict the randomness is to:\n * 1. Have access to the randomness oracle\n * 2. have control of the solana network slot leader at the time of commit\n * 3. Have an unpatched Intel SGX vulnerability/advisory that the Switchboard\n *   protocol failed to auto-prune.\n */\nexport class Randomness {\n  /**\n   * Constructs a `Randomness` instance.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {PublicKey} pubkey - The public key of the randomness account.\n   */\n  constructor(readonly program: Program, readonly pubkey: PublicKey) {}\n\n  /**\n   * Loads the randomness data for this {@linkcode Randomness} account from on chain.\n   *\n   * @returns {Promise<any>} A promise that resolves to the randomness data.\n   * @throws Will throw an error if the randomness account does not exist.\n   */\n  async loadData(): Promise<any> {\n    return await this.program.account[\"randomnessAccountData\"].fetch(\n      this.pubkey\n    );\n  }\n\n  /**\n   * Creates a new `Randomness` account.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {Keypair} kp - The keypair of the new `Randomness` account.\n   * @param {PublicKey} queue - The queue account to associate with the new `Randomness` account.\n   * @param {PublicKey} [payer_] - The payer for the transaction. If not provided, the default payer from the program provider is used.\n   * @returns {Promise<[Randomness, TransactionInstruction]>} A promise that resolves to a tuple containing the new `Randomness` account and the transaction instruction.\n   */\n  static async create(\n    program: Program,\n    kp: Keypair,\n    queue: PublicKey,\n    payer_?: PublicKey\n  ): Promise<[Randomness, TransactionInstruction]> {\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), kp.publicKey.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const recentSlot = await program.provider.connection.getSlot(\"finalized\");\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: PublicKey.default,\n      recentSlot,\n    });\n    const ix = program.instruction.randomnessInit(\n      {\n        recentSlot: new anchor.BN(recentSlot.toString()),\n      },\n      {\n        accounts: {\n          randomness: kp.publicKey,\n          queue,\n          authority: program.provider.publicKey!,\n          payer: program.provider.publicKey!,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            kp.publicKey\n          ),\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          associatedTokenProgram: spl.ASSOCIATED_TOKEN_PROGRAM_ID,\n          wrappedSolMint: spl.NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return [new Randomness(program, kp.publicKey), ix];\n  }\n\n  /**\n   * Generate a randomness `commit` solana transaction instruction.\n   * This will commit the randomness account to use currentSlot + 1 slothash\n   * as the non-repeating randomness seed.\n   *\n   * @param {PublicKey} queue - The queue public key for the commit instruction.\n   * @param {PublicKey} [authority_] - The optional authority public key.\n   * @returns {Promise<TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async commitIx(\n    queue: PublicKey,\n    authority_?: PublicKey\n  ): Promise<TransactionInstruction> {\n    const queueAccount = new Queue(this.program, queue);\n    const oracle = await queueAccount.fetchFreshOracle();\n    const authority = authority_ ?? (await this.loadData()).authority;\n    const ix = await this.program.instruction.randomnessCommit(\n      {},\n      {\n        accounts: {\n          randomness: this.pubkey,\n          queue: queue,\n          oracle: oracle,\n          recentSlothashes: SLOT_HASHES_SYSVAR_ID,\n          authority,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Generate a randomness `reveal` solana transaction instruction.\n   * This will reveal the randomness using the assigned oracle.\n   *\n   * @returns {Promise<TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async revealIx(): Promise<TransactionInstruction> {\n    const data = await this.loadData();\n    const oracleKey = data.oracle;\n    const oracle = new Oracle(this.program, oracleKey);\n    const oracleData = await oracle.loadData();\n    const gatewayUrl = String.fromCharCode(...oracleData.gatewayUri).replace(\n      /\\0+$/,\n      \"\"\n    );\n\n    const gateway = new Gateway(this.program, gatewayUrl);\n    const gatewayRevealResponse = await gateway.fetchRandomnessReveal({\n      randomnessAccount: this.pubkey,\n      slothash: bs58.encode(data.seedSlothash),\n      slot: data.seedSlot.toNumber(),\n    });\n    const stats = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"OracleRandomnessStats\"), oracleKey.toBuffer()],\n      this.program.programId\n    )[0];\n    const ix = await this.program.instruction.randomnessReveal(\n      {\n        signature: Buffer.from(gatewayRevealResponse.signature, \"base64\"),\n        recoveryId: gatewayRevealResponse.recovery_id,\n        value: gatewayRevealResponse.value,\n      },\n      {\n        accounts: {\n          randomness: this.pubkey,\n          oracle: oracleKey,\n          queue: data.queue,\n          stats,\n          authority: data.authority,\n          payer: this.program.provider.publicKey!,\n          recentSlothashes: SLOT_HASHES_SYSVAR_ID,\n          systemProgram: SystemProgram.programId,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            this.pubkey\n          ),\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          associatedTokenProgram: spl.ASSOCIATED_TOKEN_PROGRAM_ID,\n          wrappedSolMint: spl.NATIVE_MINT,\n          programState: State.keyFromSeed(this.program),\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Commit and reveal randomness in a single transaction.\n   *\n   * @param {TransactionInstruction[]} callback - The callback to execute after the reveal in the same transaction.\n   * @param {Keypair[]} signers - The signers to sign the transaction.\n   * @param {PublicKey} queue - The queue public key.\n   * @param {object} [configs] - The configuration options.\n   * @param {number} [configs.computeUnitPrice] - The price per compute unit in microlamports.\n   * @param {number} [configs.computeUnitLimit] - The compute unit limit.\n   * @returns {Promise<void>} A promise that resolves when the transaction is confirmed.\n   */\n  async commitAndReveal(\n    callback: TransactionInstruction[],\n    signers: Keypair[],\n    queue: PublicKey,\n    configs?: {\n      computeUnitPrice?: number;\n      computeUnitLimit?: number;\n    }\n  ): Promise<void> {\n    const queueAccount = new Queue(this.program, queue);\n    const oracle = await queueAccount.fetchFreshOracle();\n    const computeUnitPrice = configs?.computeUnitPrice ?? 1;\n    const computeUnitLimit = configs?.computeUnitLimit ?? 200_000;\n    const connection = this.program.provider.connection;\n    const payer = (this.program.provider as any).wallet.payer;\n    for (;;) {\n      const data = await this.loadData();\n      if (data.seedSlot.toNumber() !== 0) {\n        console.log(\"Randomness slot already committed. Jumping to reveal.\");\n        break;\n      }\n      const tx = await InstructionUtils.asV0TxWithComputeIxs({\n        connection: this.program.provider.connection,\n        ixs: [\n          ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: computeUnitPrice,\n          }),\n          await this.commitIx(oracle, data.authority),\n        ],\n      });\n      tx.sign([payer]);\n      const sim = await connection.simulateTransaction(tx, {\n        commitment: \"processed\",\n      });\n      if (sim.value.err !== null) {\n        console.log(sim.value.logs);\n        throw new Error(\n          `Failed to simulate commit transaction: ${JSON.stringify(\n            sim.value.err\n          )}`\n        );\n      }\n      const sig = await connection.sendTransaction(tx, {\n        maxRetries: 2,\n        skipPreflight: true,\n      });\n      console.log(`Commit transaction sent: ${sig}`);\n      try {\n        await sendTxWithJito({\n          serialisedTx: tx.serialize(),\n          sendOptions: {},\n          region: \"mainnet\",\n        });\n      } catch (e) {\n        // console.log(\"Skipping Jito send\");\n      }\n      try {\n        await connection.confirmTransaction(sig);\n        console.log(`Commit transaction confirmed: ${sig}`);\n        break;\n      } catch (e) {\n        console.log(\"Failed to confirm commit transaction. Retrying...\");\n        await new Promise((f) => setTimeout(f, 1000));\n        continue;\n      }\n    }\n    await new Promise((f) => setTimeout(f, 1000));\n    for (;;) {\n      const data = await this.loadData();\n      if (data.revealSlot.toNumber() !== 0) {\n        break;\n      }\n      let revealIx: TransactionInstruction | undefined = undefined;\n      try {\n        revealIx = await this.revealIx();\n      } catch (e) {\n        console.log(e);\n        console.log(\"Failed to grab reveal signature. Retrying...\");\n        await new Promise((f) => setTimeout(f, 1000));\n        continue;\n      }\n      const tx = await InstructionUtils.asV0TxWithComputeIxs({\n        connection: this.program.provider.connection,\n        ixs: [\n          ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: computeUnitPrice,\n          }),\n          ComputeBudgetProgram.setComputeUnitLimit({ units: computeUnitLimit }),\n          revealIx!,\n          ...callback,\n        ],\n      });\n\n      tx.sign(signers);\n      const sim = await connection.simulateTransaction(tx, {\n        commitment: \"processed\",\n      });\n      if (sim.value.err !== null) {\n        console.log(sim.value.logs);\n        throw new Error(\n          `Failed to simulate commit transaction: ${JSON.stringify(\n            sim.value.err\n          )}`\n        );\n      }\n      const sig = await connection.sendTransaction(tx, {\n        maxRetries: 2,\n        skipPreflight: true,\n      });\n      console.log(`RevealAndCallback transaction sent: ${sig}`);\n      try {\n        await sendTxWithJito({\n          serialisedTx: tx.serialize(),\n          sendOptions: {},\n          region: \"mainnet\",\n        });\n      } catch (e) {\n        // console.log(\"Skipping Jito send\");\n      }\n      await connection.confirmTransaction(sig);\n      console.log(`RevealAndCallback transaction confirmed: ${sig}`);\n    }\n  }\n\n  /**\n   * Serialize ix to file.\n   *\n   * @param {TransactionInstruction[]} revealIxs - The reveal instruction of a transaction.\n   * @param {string} [fileName=\"serializedIx.bin\"] - The name of the file to save the serialized IX to.\n   * @throws Will throw an error if the request fails.\n   * @returns {Promise<void>} A promise that resolves when the file has been written.\n   */\n  async serializeIxToFile(\n    revealIxs: TransactionInstruction[],\n    fileName: string = \"serializedIx.bin\"\n  ): Promise<void> {\n    const tx = await InstructionUtils.asV0TxWithComputeIxs({\n      connection: this.program.provider.connection,\n      ixs: revealIxs,\n      payer: PublicKey.default,\n    });\n\n    fs.writeFile(fileName, tx.serialize(), (err) => {\n      if (err) {\n        console.error(\"Failed to write to file:\", err);\n        throw err;\n      }\n    });\n  }\n\n  /**\n   * Creates a new `Randomness` account and prepares a commit transaction instruction.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {PublicKey} queue - The queue account to associate with the new `Randomness` account.\n   * @returns {Promise<[Randomness, Keypair, TransactionInstruction[]]>} A promise that resolves to a tuple containing the new `Randomness` instance, the keypair, and an array of transaction instructions.\n   */\n  static async createAndCommitIxs(\n    program: Program,\n    queue: PublicKey\n  ): Promise<[Randomness, Keypair, TransactionInstruction[]]> {\n    const kp = Keypair.generate();\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), kp.publicKey.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const recentSlot = await program.provider.connection.getSlot(\"finalized\");\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: PublicKey.default,\n      recentSlot,\n    });\n    const queueAccount = new Queue(program, queue);\n    const oracle = await queueAccount.fetchFreshOracle();\n    const creationIx = program.instruction.randomnessInit(\n      {},\n      {\n        accounts: {\n          randomness: kp.publicKey,\n          queue,\n          authority: program.provider.publicKey!,\n          payer: program.provider.publicKey!,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            kp.publicKey\n          ),\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          associatedTokenProgram: spl.ASSOCIATED_TOKEN_PROGRAM_ID,\n          wrappedSolMint: spl.NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    const newRandomness = new Randomness(program, kp.publicKey);\n    const commitIx = await newRandomness.commitIx(\n      oracle,\n      program.provider.publicKey!\n    );\n\n    return [newRandomness, kp, [creationIx, commitIx]];\n  }\n}\n"]}