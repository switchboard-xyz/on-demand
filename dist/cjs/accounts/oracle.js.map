{"version":3,"file":"oracle.js","sourceRoot":"","sources":["../../../src/accounts/oracle.ts"],"names":[],"mappings":"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","sourcesContent":["import { InstructionUtils } from \"./../instruction-utils/InstructionUtils.js\";\nimport * as spl from \"./../utils/index.js\";\nimport { Queue } from \"./queue.js\";\nimport { State } from \"./state.js\";\n\nimport type { Program } from \"@coral-xyz/anchor-30\";\nimport { BN, BorshAccountsCoder, utils } from \"@coral-xyz/anchor-30\";\nimport type {\n  AddressLookupTableAccount,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  AddressLookupTableProgram,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n} from \"@solana/web3.js\";\n\n/**\n *  This class represents an oracle account on chain.\n */\nexport class Oracle {\n  lut: AddressLookupTableAccount | null;\n\n  constructor(readonly program: Program, readonly pubkey: PublicKey) {\n    this.lut = null;\n  }\n\n  /**\n   * Creates a new oracle account. linked to the specified queue.\n   * After creation the oracle still must receive run approval and verify their\n   * enclave measurement.\n   * @param program - The program that owns the oracle account.\n   * @param params.queue - The queue that the oracle will be linked to.\n   * @returns A promise that resolves to a tuple containing the oracle account\n   * and the transaction signature.\n   *\n   */\n  static async create(\n    program: Program,\n    params: {\n      queue: PublicKey;\n    }\n  ): Promise<[Oracle, TransactionInstruction[], Keypair]> {\n    const stateKey = State.keyFromSeed(program);\n    const state = await State.loadData(program);\n    const payer = (program.provider as any).wallet.payer;\n    const oracle = Keypair.generate();\n    const oracleStats = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"OracleStats\"), oracle.publicKey.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), oracle.publicKey.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const [delegationPool] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Delegation\"),\n        stateKey.toBuffer(),\n        oracleStats.toBuffer(),\n        state.stakePool.toBuffer(),\n      ],\n      state.stakeProgram\n    );\n    const recentSlot = await program.provider.connection.getSlot(\"finalized\");\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: payer.publicKey,\n      recentSlot,\n    });\n    const [delegationGroup] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Group\"),\n        stateKey.toBuffer(),\n        state.stakePool.toBuffer(),\n        params.queue.toBuffer(),\n      ],\n      state.stakeProgram\n    );\n\n    const ix = await program.instruction.oracleInit(\n      {\n        recentSlot: new BN(recentSlot.toString()),\n        authority: payer.publicKey,\n        queue: params.queue,\n        secpAuthority: null,\n      },\n      {\n        accounts: {\n          oracle: oracle.publicKey,\n          oracleStats,\n          authority: payer.publicKey,\n          programState: stateKey,\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          tokenMint: spl.NATIVE_MINT,\n          delegationPool,\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n          switchMint: state.switchMint,\n          wsolVault: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            oracle.publicKey\n          ),\n          switchVault: spl.getAssociatedTokenAddressSync(\n            state.switchMint,\n            oracle.publicKey\n          ),\n          stakeProgram: state.stakeProgram,\n          stakePool: state.stakePool,\n        },\n      }\n    );\n    const ix2 = await program.instruction.oracleUpdateDelegation(\n      {\n        recentSlot: new BN(recentSlot.toString()),\n      },\n      {\n        accounts: {\n          oracle: oracle.publicKey,\n          oracleStats,\n          queue: params.queue,\n          authority: payer.publicKey,\n          programState: stateKey,\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          delegationPool,\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n          switchMint: state.switchMint,\n          nativeMint: spl.NATIVE_MINT,\n          wsolVault: PublicKey.findProgramAddressSync(\n            [\n              Buffer.from(\"RewardPool\"),\n              delegationPool.toBuffer(),\n              spl.NATIVE_MINT.toBuffer(),\n            ],\n            state.stakeProgram\n          )[0],\n          switchVault: PublicKey.findProgramAddressSync(\n            [\n              Buffer.from(\"RewardPool\"),\n              delegationPool.toBuffer(),\n              state.switchMint.toBuffer(),\n            ],\n            state.stakeProgram\n          )[0],\n          stakeProgram: state.stakeProgram,\n          stakePool: state.stakePool,\n          delegationGroup,\n        },\n      }\n    );\n    return [new Oracle(program, oracle.publicKey), [ix, ix2], oracle];\n  }\n\n  /**\n   * Creates a new oracle account for SVM chains (non-solana). linked to the specified queue.\n   * After creation the oracle still must receive run approval and verify their\n   * enclave measurement.\n   * @param program - The program that owns the oracle account.\n   * @param params.queue - The queue that the oracle will be linked to.\n   * @returns A promise that resolves to a tuple containing the oracle account\n   * and the transaction signature.\n   *\n   */\n  static async createSVM(\n    program: Program,\n    params: {\n      queue: PublicKey;\n      sourceOracleKey: PublicKey;\n    }\n  ): Promise<[Oracle, TransactionInstruction[]]> {\n    const stateKey = State.keyFromSeed(program);\n    const state = await State.loadData(program);\n    const payer = (program.provider as any).wallet.payer;\n    // Generate the queue PDA for the given source queue key\n    const [oracle] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Oracle\"),\n        params.queue.toBuffer(),\n        params.sourceOracleKey.toBuffer(),\n      ],\n      program.programId\n    );\n    const oracleStats = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"OracleStats\"), oracle.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), oracle.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const [delegationPool] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Delegation\"),\n        stateKey.toBuffer(),\n        oracleStats.toBuffer(),\n        state.stakePool.toBuffer(),\n      ],\n      state.stakeProgram\n    );\n    const recentSlot = await program.provider.connection.getSlot(\"finalized\");\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: payer.publicKey,\n      recentSlot,\n    });\n    const [delegationGroup] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Group\"),\n        stateKey.toBuffer(),\n        state.stakePool.toBuffer(),\n        params.queue.toBuffer(),\n      ],\n      state.stakeProgram\n    );\n\n    const ix = program.instruction.oracleInitSvm(\n      {\n        recentSlot: new BN(recentSlot.toString()),\n        authority: payer.publicKey,\n        queue: params.queue,\n        secpAuthority: null,\n        sourceOracleKey: params.sourceOracleKey,\n      },\n      {\n        accounts: {\n          oracle: oracle,\n          oracleStats,\n          authority: payer.publicKey,\n          programState: stateKey,\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          tokenMint: spl.NATIVE_MINT,\n          delegationPool,\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n          switchMint: state.switchMint,\n          wsolVault: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            oracle,\n            true\n          ),\n          switchVault: spl.getAssociatedTokenAddressSync(\n            state.switchMint,\n            oracle,\n            true\n          ),\n          stakeProgram: state.stakeProgram,\n          stakePool: state.stakePool,\n        },\n      }\n    );\n\n    return [new Oracle(program, oracle), [ix]];\n  }\n\n  /**\n   * ATODO: wrap this one up with the gateway bridge oracle fn\n   * @param params\n   * @returns\n   */\n  static async quoteVerifySvmIx(\n    program: Program,\n    params: {\n      chain?: string; // Unused atm\n      network?: \"mainnet\" | \"mainnet-beta\" | \"testnet\" | \"devnet\";\n      queue: PublicKey; // Solana queue\n      attestee: PublicKey; // Solana attestee\n      attester: PublicKey; // Solana attester guardian we're requesting from\n    }\n  ): Promise<TransactionInstruction> {\n    // const [queuePDA, queueBump] = await PublicKey.findProgramAddress(\n    //   [Buffer.from(\"Queue\"), params.queue.toBuffer()],\n    //   program.programId\n    // );\n\n    // timestamp handled by bridge fn\n    // mrEnclave handled by bridge fn\n    // secp256k1Key handled by bridge fn\n    // slot has to be handled by us I think\n    // signature has to be handled by bridge fn\n    // recoveryId has to be handled by bridge fn\n\n    // guardian key & oracle key\n\n    // source oracle key handled by us:\n\n    // source oracle queue key handled by us:\n\n    // source guardian queue key handled by us:\n\n    // const ix = await program.instruction.guardianQuoteVerifySvm(\n    //   {\n    //     timestamp: new anchor.BN(params.timestamp),\n    //     mrEnclave: params.mrEnclave, // 32-byte array\n    //     _reserved1: params._reserved1, // 32-bit unsigned integer\n    //     secp256k1Key: params.secp256k1Key, // 64-byte array\n    //     slot: new anchor.BN(params.slot), // Slot as u64\n    //     signature: params.signature, // 64-byte array\n    //     recoveryId: params.recoveryId, // u8\n    //     sourceOracleKey: params.sourceOracleKey, // Pubkey of source oracle\n    //     sourceOracleQueueKey: params.sourceOracleQueueKey, // Pubkey of oracle queue\n    //     sourceGuardianQueueKey: params.sourceGuardianQueueKey, // Pubkey of guardian queue\n    //     oracleBump: params.oracleBump, // Bump for oracle PDA\n    //     oracleQueueBump: params.oracleQueueBump, // Bump for oracle queue PDA\n    //     guardianQueueBump: params.guardianQueueBump, // Bump for guardian queue PDA\n    //   },\n    //   {\n    //     accounts: {\n    //       guardian: guardianAccountLoader, // AccountLoader for OracleAccountData\n    //       oracle: oracleAccountLoader, // AccountLoader for OracleAccountData\n    //       oracleStats: oracleStatsAccountLoader, // AccountLoader for OracleStatsAccountData\n    //       payer: payer.publicKey, // Signer for transaction\n    //       systemProgram: SystemProgram.programId, // System program ID\n    //       oracleQueue: oracleQueueAccountLoader, // AccountLoader for QueueAccountData\n    //       guardianQueue: guardianQueueAccountLoader, // AccountLoader for QueueAccountData\n    //       state: stateAccountLoader, // AccountLoader for State\n    //       recentSlothashes: anchor.web3.SYSVAR_SLOT_HASHES_PUBKEY, // Sysvar slot hashes\n    //       lutSigner: lutSignerAccount, // AccountInfo for lut signer\n    //       lut: lutAccount, // AccountInfo for lut (lookup table)\n    //       programState: programStateAccountLoader, // AccountLoader for State\n    //     },\n    //     signers: [payer], // Add payer as the signer for the instruction\n    //   }\n    // );\n\n    throw new Error(\"Quote verify SVM not implemented yet.\");\n  }\n\n  async updateDelegationRewardPoolsIx(params: {\n    overrideStakePool?: PublicKey;\n    overrideMint?: PublicKey;\n    authority: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const program = this.program;\n    const stateKey = State.keyFromSeed(program);\n    const state = await State.loadData(program);\n    const switchMint = params.overrideMint ?? state.switchMint;\n    const stakePool = params.overrideStakePool ?? state.stakePool;\n    const stakeProgram = state.stakeProgram;\n    const payer = (program.provider as any).wallet.payer;\n    const oracleData = await this.loadData();\n    const oracleStats = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"OracleStats\"), this.pubkey.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), this.pubkey.toBuffer()],\n        program.programId\n      )\n    )[0];\n    const [delegationPool] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Delegation\"),\n        stateKey.toBuffer(),\n        oracleStats.toBuffer(),\n        stakePool.toBuffer(),\n      ],\n      stakeProgram\n    );\n    console.log(\"stakepool\", stakePool.toBase58());\n    console.log(\"delegationPool\", delegationPool.toBase58());\n    const lutSlot = oracleData.lutSlot.toNumber();\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: payer.publicKey,\n      recentSlot: lutSlot,\n    });\n    const [delegationGroup] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"Group\"),\n        stateKey.toBuffer(),\n        state.stakePool.toBuffer(),\n        oracleData.queue.toBuffer(),\n      ],\n      stakeProgram\n    );\n    const ix = await program.instruction.oracleUpdateDelegation(\n      {\n        recentSlot: new BN(lutSlot.toString()),\n      },\n      {\n        accounts: {\n          oracle: this.pubkey,\n          oracleStats,\n          queue: oracleData.queue,\n          authority: params.authority,\n          programState: stateKey,\n          payer: payer.publicKey,\n          systemProgram: SystemProgram.programId,\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          delegationPool,\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n          switchMint: switchMint,\n          nativeMint: spl.NATIVE_MINT,\n          wsolVault: PublicKey.findProgramAddressSync(\n            [\n              Buffer.from(\"RewardPool\"),\n              delegationPool.toBuffer(),\n              spl.NATIVE_MINT.toBuffer(),\n            ],\n            stakeProgram\n          )[0],\n          switchVault: PublicKey.findProgramAddressSync(\n            [\n              Buffer.from(\"RewardPool\"),\n              delegationPool.toBuffer(),\n              switchMint.toBuffer(),\n            ],\n            stakeProgram\n          )[0],\n          stakeProgram: stakeProgram,\n          stakePool: stakePool,\n          delegationGroup,\n        },\n      }\n    );\n    return ix;\n  }\n\n  async setConfigsIx(params: {\n    authority: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const data = await this.loadData();\n    const ix = await this.program.instruction.oracleSetConfigs(\n      {\n        authority: params.authority,\n        newSecpAuthority: null,\n      },\n      {\n        accounts: {\n          oracle: this.pubkey,\n          authority: params.authority,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Loads the oracle data for this {@linkcode Oracle} account from on chain.\n   *\n   *  @returns A promise that resolves to the oracle data.\n   *  @throws if the oracle account does not exist.\n   */\n  async loadData(): Promise<any> {\n    return await this.program.account[\"oracleAccountData\"].fetch(this.pubkey);\n  }\n\n  async fetchGateway(): Promise<string> {\n    const data = await this.loadData();\n    const gw = Buffer.from(data.gatewayUri).toString();\n    return gw.replace(/\\0+$/, \"\");\n  }\n\n  /**\n   * Loads the oracle data for a list of {@linkcode Oracle} accounts from on chain.\n   *\n   * @param program - The program that owns the oracle accounts.\n   * @param keys - The public keys of the oracle accounts to load.\n   * @returns A promise that resolves to an array of oracle data.\n   * @throws if any of the oracle accounts do not exist.\n   */\n  static async loadMany(program: Program, keys: PublicKey[]): Promise<any[]> {\n    const coder = new BorshAccountsCoder(program.idl);\n    const accountType = \"oracleAccountData\";\n    const oracleDatas = await utils.rpc\n      .getMultipleAccounts(program.provider.connection, keys)\n      .then((o) => o.map((x) => coder.decode(accountType, x!.account.data)));\n    return oracleDatas;\n  }\n\n  /**\n   * Loads the oracle data and checks if the oracle is verified.\n   *\n   * @returns A promise that resolves to a tuple containing a boolean indicating\n   * if the oracle is verified and the expiration time of the verification.\n   * @throws if the oracle account does not exist.\n   */\n  async verificationStatus(): Promise<[boolean, number]> {\n    const data = await this.loadData();\n    const now = +new Date() / 1000;\n    const status = data.enclave.verificationStatus;\n    const expiration = data.enclave.validUntil;\n    return [status === 4 && now < expiration, expiration.toNumber()];\n  }\n\n  /**\n   * Get the pubkey of the stats account for this oracle.\n   * @returns A promise that resolves to the pubkey of the stats account.\n   */\n  async statsKey(): Promise<PublicKey> {\n    return (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"OracleStats\"), this.pubkey.toBuffer()],\n        this.program.programId\n      )\n    )[0];\n  }\n\n  async lutKey(): Promise<PublicKey> {\n    const data = await this.loadData();\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), this.pubkey.toBuffer()],\n        this.program.programId\n      )\n    )[0];\n    const [_, lutKey] = await AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: PublicKey.default,\n      recentSlot: data.lutSlot,\n    });\n    return lutKey;\n  }\n\n  public lookupTableKey(data: any): PublicKey {\n    const lutSigner = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"LutSigner\"), this.pubkey.toBuffer()],\n      this.program.programId\n    )[0];\n    const [_, lutKey] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: PublicKey.default,\n      recentSlot: data.lutSlot,\n    });\n    return lutKey;\n  }\n\n  async loadLookupTable(): Promise<AddressLookupTableAccount> {\n    if (this.lut !== null && this.lut !== undefined) {\n      return this.lut;\n    }\n    const lutKey = await this.lutKey();\n    const accnt = await this.program.provider.connection.getAddressLookupTable(\n      lutKey\n    );\n    this.lut = accnt.value!;\n    return this.lut!;\n  }\n}\n"]}