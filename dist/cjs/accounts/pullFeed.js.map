{"version":3,"file":"pullFeed.js","sourceRoot":"","sources":["../../../src/accounts/pullFeed.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAAwD;AAMxD,oFAA8E;AAC9E,0EAAoE;AACpE,yDAA2C;AAC3C,kDAI6B;AAC7B,2CAAqC;AACrC,yCAAmC;AACnC,yCAAmC;AAEnC,mDAAgD;AAEhD,oDAA0D;AAC1D,6DAA+C;AAC/C,oDAA0C;AAQ1C,6CAKyB;AAEzB,oDAAoD;AACpD,oDAAmE;AAEnE,oDAAyB;AAEzB,MAAM,WAAW,GAAG,IAAI,mBAAQ,CAAgB;IAC9C,GAAG,EAAE,EAAE,GAAG,IAAI;IACd,GAAG,EAAE,EAAE;IACP,KAAK,EAAE,IAAI;CACZ,CAAC,CAAC;AAEH,MAAM,SAAS,GAAG,EAAE,CAAC;AAoDrB,MAAa,cAAc;IACzB,YACW,MAAc,EACd,KAAiB,EACjB,KAAa;QAFb,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAY;QACjB,UAAK,GAAL,KAAK,CAAQ;IACrB,CAAC;IAEJ,UAAU;QACR,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE,CAAC;YACxB,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;CACF;AAdD,wCAcC;AAQD,SAAS,sBAAsB,CAC7B,KAAa,EACb,gBAAwB,EAAE;IAE1B,MAAM,QAAQ,GAAG,IAAI,CAAC;IACtB,OAAO,KAAK,CAAC,MAAM,GAAG,aAAa,EAAE,CAAC;QACpC,KAAK,IAAI,QAAQ,CAAC;IACpB,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAID,SAAgB,WAAW,CACzB,WAA6B,EAC7B,SAAoB;IAEpB,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7D,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;AAVD,kCAUC;AAED;;;;;;;GAOG;AACH,SAAe,cAAc,CAC3B,UAAsB,EACtB,SAAoB,EACpB,MAAiB;;QAEjB,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,WAAW,KAAK,IAAI;YAAE,OAAO,IAAI,CAAC;QAEtC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;YAAE,OAAO,IAAI,CAAC;QAE1C,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAED;;;;;GAKG;AACH,MAAa,QAAQ;IAanB;;;;;OAKG;IACH,YAAqB,OAAgB,EAAE,MAA0B;QAA5C,YAAO,GAAP,OAAO,CAAS;QACnC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAS,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAgB;QAC9B,MAAM,OAAO,GAAG,iBAAO,CAAC,QAAQ,EAAE,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAO,MAAM,CACjB,OAAgB,EAChB,MAQmD;;YAEnD,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACvD,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,EAAE,GAAG,MAAM,sCAAgB,CAAC,oBAAoB,CAAC;gBACrD,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU;gBACvC,GAAG,EAAE,CAAC,EAAE,CAAC;aACV,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACnB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACxB,CAAC;KAAA;IAEO,QAAQ,CAAC,KAAiB;;QAChC,OAAO,MAAA,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,mCAAI,mBAAS,CAAC,OAAO,CAAC;IACvE,CAAC;IAED;;;OAGG;IACK,MAAM,CAAC,kBAAkB,CAAC,MAIjC;QACC,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE;;YACjB,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACpB,wCAAwC;gBACxC,OAAO,MAAM,CAAC,QAAQ,CAAC;YACzB,CAAC;iBAAM,IAAI,MAAA,MAAM,CAAC,IAAI,0CAAE,MAAM,EAAE,CAAC;gBAC/B,4EAA4E;gBAC5E,OAAO,iBAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YAChE,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACnE,CAAC,CAAC,EAAE,CAAC;QACL,IAAI,IAAI,CAAC,UAAU,KAAK,EAAE;YAAE,OAAO,IAAI,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;;;;;;OAWG;IACG,MAAM,CACV,MAQmD;;YAEnD,MAAM,QAAQ,GAAG,QAAQ,CAAC,kBAAkB,CAAC;gBAC3C,KAAK,EAAE,MAAM,CAAC,KAAK;gBACnB,QAAQ,EAAE,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;gBAC5D,IAAI,EAAE,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;aACjD,CAAC,CAAC;YACH,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;YACzD,MAAM,SAAS,GAAG,CAChB,MAAM,mBAAS,CAAC,kBAAkB,CAChC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAClD,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB,CACF,CAAC,CAAC,CAAC,CAAC;YACL,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAC/D,WAAW,CACZ,CAAC;YACF,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,mCAAyB,CAAC,iBAAiB,CAAC;gBAC3D,SAAS,EAAE,SAAS;gBACpB,KAAK,EAAE,cAAc;gBACrB,UAAU;aACX,CAAC,CAAC;YACH,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAC9C;gBACE,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC;gBACvC,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACtD,UAAU,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC;gBACrC,QAAQ,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,cAAc;gBAC5C,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,YAAY,EAAE,MAAM,CAAC,YAAY;aAClC,EACD;gBACE,QAAQ,EAAE;oBACR,QAAQ,EAAE,IAAI,CAAC,MAAM;oBACrB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,SAAS,EAAE,cAAc;oBACzB,KAAK,EAAE,cAAc;oBACrB,aAAa,EAAE,uBAAa,CAAC,SAAS;oBACtC,YAAY,EAAE,gBAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;oBAC7C,YAAY,EAAE,GAAG,CAAC,6BAA6B,CAC7C,GAAG,CAAC,WAAW,EACf,IAAI,CAAC,MAAM,CACZ;oBACD,YAAY,EAAE,GAAG,CAAC,gBAAgB;oBAClC,sBAAsB,EAAE,GAAG,CAAC,2BAA2B;oBACvD,cAAc,EAAE,GAAG,CAAC,WAAW;oBAC/B,SAAS;oBACT,GAAG;oBACH,yBAAyB,EAAE,mCAAyB,CAAC,SAAS;iBAC/D;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAEK,OAAO,CAAC,MAEb;;YACC,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnD,MAAM,SAAS,GAAG,CAChB,MAAM,mBAAS,CAAC,kBAAkB,CAChC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAClD,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB,CACF,CAAC,CAAC,CAAC,CAAC;YACL,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,mCAAyB,CAAC,iBAAiB,CAAC;gBAC3D,SAAS,EAAE,SAAS;gBACpB,KAAK,EAAE,cAAc;gBACrB,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;aAC5C,CAAC,CAAC;YACH,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,CAC/C,EAAE,EACF;gBACE,QAAQ,EAAE;oBACR,QAAQ,EAAE,IAAI,CAAC,MAAM;oBACrB,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,KAAK,EAAE,cAAc;oBACrB,YAAY,EAAE,GAAG,CAAC,6BAA6B,CAC7C,GAAG,CAAC,WAAW,EACf,IAAI,CAAC,MAAM,CACZ;oBACD,SAAS;oBACT,GAAG;oBACH,KAAK,EAAE,gBAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;oBACtC,YAAY,EAAE,GAAG,CAAC,gBAAgB;oBAClC,sBAAsB,EAAE,GAAG,CAAC,2BAA2B;oBACvD,aAAa,EAAE,uBAAa,CAAC,SAAS;oBACtC,yBAAyB,EAAE,mCAAyB,CAAC,SAAS;iBAC/D;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAED;;;;;;;;;;;OAWG;IACG,YAAY,CAAC,MASlB;;;YACC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,IAAI,GACR,MAAM,CAAC,IAAI,KAAK,SAAS;gBACvB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClD,CAAC,CAAC,IAAI,CAAC;YACX,MAAM,QAAQ,GACZ,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI;gBAC5B,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC;oBAC1B,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;iBAClB,CAAC;gBACJ,CAAC,CAAC,IAAI,CAAC;YAEX,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,kBAAkB,CACpD;gBACE,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,MAAA,MAAM,CAAC,SAAS,mCAAI,IAAI;gBACnC,WAAW,EACT,MAAM,CAAC,WAAW,KAAK,SAAS;oBAC9B,CAAC,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;oBACrD,CAAC,CAAC,IAAI;gBACV,YAAY,EAAE,MAAA,MAAM,CAAC,YAAY,mCAAI,IAAI;gBACzC,aAAa,EAAE,MAAA,MAAM,CAAC,aAAa,mCAAI,IAAI;gBAC3C,YAAY,EAAE,MAAA,MAAM,CAAC,YAAY,mCAAI,IAAI;gBACzC,QAAQ,EAAE,IAAI,EAAE,cAAc;aAC/B,EACD;gBACE,QAAQ,EAAE;oBACR,QAAQ,EAAE,IAAI,CAAC,MAAM;oBACrB,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC1B;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;OAiBG;IACG,aAAa;6DACjB,OAWC,EACD,gBAA6C,EAC7C,eAAoC,EACpC,QAAiB,KAAK,EACtB,KAAiB;;YAUjB,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE,CAAC;gBAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1C,CAAC;YAED,OAAO,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;YACxB,OAAO,CAAC,OAAO,GAAG,MAAA,OAAO,CAAC,OAAO,mCAAI,CAAC,CAAC;YACvC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;YACjC,MAAM,aAAa,GACjB,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,mCACtB,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;YACvE,MAAM,QAAQ,GACZ,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,MAAK,SAAS,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,MAAK,QAAQ,CAAC;YAC9D,MAAM,SAAS,GACb,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,MAAK,SAAS,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,MAAK,cAAc,CAAC;YAExE,IAAI,YAAY,GAAG,IAAI,gBAAK,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;YAE9D,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,mBAAmB;gBACnB,YAAY,GAAG,SAAS;oBACtB,CAAC,CAAC,MAAM,IAAA,0BAAe,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,CAAC;oBAC9C,CAAC,CAAC,MAAM,IAAA,gCAAqB,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,CAAC,CAAC;YACzD,CAAC;YAED,IAAI,IAAI,CAAC,UAAU,KAAK,EAAE,EAAE,CAAC;gBAC3B,IAAI,CAAC,UAAU;oBACb,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,mCAChB,CAAC,MAAM,YAAY,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAC1D,CAAC;YACD,IAAI,IAAI,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,mCAAI,IAAI,CAAC,IAAI,CAAC;YACtC,IAAI,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,CAAA,EAAE,CAAC;gBAClB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACnC,IAAI,GAAG,MAAM,CAAC,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,mCAAI,uBAAc,CAAC,OAAO,EAAE,CAAC;qBAC/D,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBACjD,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;oBACb,OAAO,IAAI,CAAC,IAAI,CAAC;gBACnB,CAAC,CAAC,CAAC;gBACL,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,CAAC;YACD,MAAM,MAAM,+CACV,IAAI,EAAE,IAAI,CAAC,MAAM,EACjB,OAAO,EAAE,IAAI,CAAC,UAAU,IACrB,WAAW,GACX,OAAO,KACV,aAAa,EACb,IAAI,EAAE,IAAI,GACX,CAAC;YACF,IAAI,GAAG,GAAG,IAAI,CAAC;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxC,IAAI,CAAC;oBACH,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,aAAa,CACrC,IAAI,CAAC,OAAO,EACZ,MAAM,EACN,gBAAgB,EAChB,eAAe,EACf,KAAK,EACL,cAAc,CACf,CAAC;oBACF,OAAO,EAAE,CAAC;gBACZ,CAAC;gBAAC,OAAO,IAAS,EAAE,CAAC;oBACnB,GAAG,GAAG,IAAI,CAAC;gBACb,CAAC;YACH,CAAC;YACD,MAAM,GAAG,CAAC;QACZ,CAAC;KAAA;IAED;;;;OAIG;IACG,WAAW;;YAOf,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;YACtD,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,WAAW;gBACxB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACpC,aAAa,EAAE,IAAI,CAAC,aAAa;aAClC,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM,CAAO,aAAa;6DACxB,OAAgB,EAChB,OAYC,EACD,gBAA6C,EAC7C,eAAoC,EACpC,QAAiB,KAAK,EACtB,KAAiB;YAUjB,IAAI,UAAU,GAAG,gBAAgB,CAAC;YAClC,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;gBAC7B,UAAU,GAAG,MAAM,sCAAgB,CAAC,sBAAsB,CACxD,OAAO,CAAC,QAAQ,CAAC,UAAU,EAC3B,EAAE,CACH,CAAC;YACJ,CAAC;YACD,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,OAAO,CAAC;YACvB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACzB,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC;YACzE,MAAM,SAAS,GACb,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,KAAK,cAAc,CAAC;YACpE,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAEzB,IAAI,SAAS,GAAa,EAAE,CAAC;YAC7B,IAAI,eAAe,KAAK,SAAS,IAAI,eAAe,KAAK,IAAI,EAAE,CAAC;gBAC9D,IAAI,aAAa,GAAG,OAAO,CAAC;gBAE5B,gBAAgB;gBAChB,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACd,mBAAmB;oBACnB,MAAM,YAAY,GAAG,SAAS;wBAC5B,CAAC,CAAC,MAAM,IAAA,0BAAe,EAAC,MAAM,CAAC,YAAY,CAAC;wBAC5C,CAAC,CAAC,MAAM,IAAA,gCAAqB,EAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oBAErD,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC;oBAC5B,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC;gBACvC,CAAC;gBAED,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,MAAM,gBAAK,CAAC,eAAe,CACzD,aAAa,kCAER,MAAM,KACT,KAAK,EACL,IAAI,EAAE,IAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,kBAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAC/C,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAE/B,CAAC;gBACF,eAAe,GAAG,SAAS,CAAC;gBAC5B,SAAS,GAAG,QAAQ,CAAC;YACvB,CAAC;YAED,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrB,OAAO,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gBAChD,MAAM,KAAK,GAAG,gBAAG,CAAC,EAAE,CAAC;gBACrB,gBAAG,CAAC,EAAE,GAAG,EAAE,CAAC;gBACZ,MAAM,KAAK,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,gBAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC1E,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;oBACnB,YAAY,IAAI,CAAC,CAAC;gBACpB,CAAC;gBACD,gBAAG,CAAC,EAAE,GAAG,KAAK,CAAC;gBACf,IAAI,MAAM,GAAG,IAAI,mBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;gBAChE,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACd,CAAC,MAAM,CAAC,GAAG,mBAAS,CAAC,sBAAsB,CACzC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,EACnE,OAAO,CAAC,SAAS,CAClB,CAAC;gBACJ,CAAC;gBACD,OAAO,IAAI,cAAc,CACvB,IAAI,kBAAM,CAAC,OAAO,EAAE,MAAM,CAAC,EAC3B,KAAK,EACL,CAAC,CAAC,aAAa,CAChB,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAa,IAAI,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChD,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAChD,IAAI,SAAS,GAAG,KAAK,CAAC;oBACtB,KAAK,MAAM,eAAe,IAAI,eAAe,CAAC,CAAC,CAAC;yBAC7C,0BAA0B,EAAE,CAAC;wBAC9B,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC;4BAC1D,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;4BACpC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,eAAe,CAAC,WAAW,EAAE,CAAC;gCAChD,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC;gCACrC,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;gCACpB,SAAS,GAAG,IAAI,CAAC;gCACjB,MAAM;4BACR,CAAC;wBACH,CAAC;wBACD,IAAI,SAAS,EAAE,CAAC;4BACd,MAAM;wBACR,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;YACD,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,kBAAkB,GAAuC,SAAS,CAAC;YACvE,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;gBACrB,kBAAkB,GAAG,IAAI,CAAC,2BAA2B,CAAC;oBACpD,KAAK,EAAE,eAAe;oBACtB,OAAO,EAAE,OAAO;oBAChB,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtB,KAAK;oBACL,KAAK,EAAE,MAAM,CAAC,KAAK;iBACpB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,SAAS,GAAG,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;YAClE,MAAM,IAAI,GAAG,MAAM,IAAA,2BAAgB,EAAC,SAAS,CAAC,CAAC;YAC/C,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,IAAI,KAAK,CACb,mCAAmC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CACzE,CAAC;YACJ,CAAC;YACD,OAAO,CAAC,kBAAkB,EAAE,eAAe,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QAC9E,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,MAAM,CAAO,kBAAkB;6DAC7B,OAAgB,EAChB,OAMC,EACD,gBAA6C,EAC7C,QAAiB,KAAK,EACtB,KAAiB;;YAkBjB,MAAM,UAAU,GACd,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAChB,CAAC,MAAM,sCAAgB,CAAC,sBAAsB,CAC5C,OAAO,CAAC,QAAQ,CAAC,UAAU,EAC3B,EAAE,CACH,CAAC,CAAC;YACL,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACvE,MAAM,MAAM,GAAG,OAAO,CAAC;YACvB,MAAM,WAAW,GAIX,EAAE,CAAC;YACT,IAAI,KAAK,GAA0B,SAAS,CAAC;YAE7C,oFAAoF;YACpF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAkB,CAAC;YAEjD,kCAAkC;YAClC,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAA8B,CAAC;YAElE,mDAAmD;YACnD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,4BAA4B;gBAC5B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACnC,IAAI,KAAK,KAAK,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrD,MAAM,IAAI,KAAK,CACb,uDAAuD,CACxD,CAAC;gBACJ,CAAC;gBACD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACnB,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;gBACtD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBACvC,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAE5D,wCAAwC;gBACxC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAErD,gDAAgD;gBAChD,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAEtC,2BAA2B;gBAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,MAAA,OAAO,CAAC,cAAc,mCAAI,uBAAc,CAAC,OAAO,EAAE,CAAC;qBACpE,KAAK,CAAC,QAAQ,CAAC;qBACf,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;oBACb,OAAO,IAAI,CAAC,IAAI,CAAC;gBACnB,CAAC,CAAC,CAAC;gBAEL,0BAA0B;gBAC1B,WAAW,CAAC,IAAI,CAAC;oBACf,WAAW;oBACX,YAAY;oBACZ,IAAI;iBACL,CAAC,CAAC;YACL,CAAC;YAED,yCAAyC;YACzC,MAAM,QAAQ,GAAG,MAAM,gBAAK,CAAC,oBAAoB,CAAC,OAAO,kCACpD,MAAM,KACT,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5B,WAAW,EACX,KAAK,EAAE,KAAM,IACb,CAAC;YAEH,MAAM,OAAO,GAAgB,EAAE,CAAC;YAEhC,yBAAyB;YACzB,KAAK,MAAM,cAAc,IAAI,QAAQ,CAAC,gBAAgB,EAAE,CAAC;gBACvD,4BAA4B;gBAC5B,MAAM,YAAY,GAAG,IAAI,mBAAS,CAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,KAAK,CAAC,CACnE,CAAC;gBAEF,gCAAgC;gBAChC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE3B,gCAAgC;gBAChC,KAAK,MAAM,YAAY,IAAI,cAAc,CAAC,cAAc,EAAE,CAAC;oBACzD,MAAM,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC;oBACxC,MAAA,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,0CAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBACxD,CAAC;YACH,CAAC;YAED,kDAAkD;YAClD,MAAM,SAAS,GAAG,EAAE,CAAC;YACrB,MAAM,QAAQ,GAAG,EAAE,CAAC;YAEpB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAE5D,yCAAyC;gBACzC,MAAM,SAAS,GAAG,MAAA,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,mCAAI,EAAE,CAAC;gBAE1D,gDAAgD;gBAChD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC3B,QAAQ,CAAC,IAAI,CAAC;wBACZ,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,KAAK,EAAE,qCAAqC,QAAQ,aAAa;qBAClE,CAAC,CAAC;oBACH,SAAS;gBACX,CAAC;gBAED,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;oBAC1C,MAAM,KAAK,GAAG,gBAAG,CAAC,EAAE,CAAC;oBACrB,gBAAG,CAAC,EAAE,GAAG,EAAE,CAAC;oBACZ,MAAM,KAAK,GAAG,CAAC,CAAC,aAAa;wBAC3B,CAAC,CAAC,IAAI,gBAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;wBACpC,CAAC,CAAC,IAAI,CAAC;oBACT,gBAAG,CAAC,EAAE,GAAG,KAAK,CAAC;oBACf,OAAO;wBACL,KAAK;wBACL,KAAK,EAAE,CAAC,CAAC,aAAa;wBACtB,MAAM,EAAE,IAAI,kBAAM,CAChB,OAAO,EACP,IAAI,mBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CACnD;qBACF,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,+BAA+B;gBAC/B,MAAM,OAAO,GAAa,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAE1D,IAAI,KAAK,EAAE,CAAC;oBACV,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;gBAC5C,CAAC;gBAED,IAAI,kBAAkB,GAAuC,SAAS,CAAC;gBACvE,IAAI,YAAY,GAAG,CAAC,CAAC;gBACrB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACzB,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CACrC,CAAC,CAAC,EAAE,EAAE,WAAC,OAAA,CAAC,MAAA,CAAC,CAAC,SAAS,mCAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA,EAAA,CACtC,CAAC;oBACF,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC;oBACrC,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;wBACrB,kBAAkB,GAAG,IAAI,CAAC,2BAA2B,CAAC;4BACpD,KAAK,EAAE,cAAc;4BACrB,OAAO,EAAE,OAAO;4BAChB,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACtB,KAAK,EAAE,MAAA,MAAM,CAAC,KAAK,mCAAI,OAAO,CAAC,QAAQ,CAAC,SAAS;yBAClD,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;gBAED,mCAAmC;gBACnC,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,MAAM,OAAO,GAAG;wBACd,IAAI,EAAE,IAAI,CAAC,MAAM;wBACjB,KAAK,EAAE,mCAAmC,eAAe,CAAC,GAAG,CAC3D,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CACf,EAAE;qBACJ,CAAC;oBACF,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACvB,SAAS;gBACX,CAAC;gBAED,oCAAoC;gBACpC,MAAM,SAAS,GAAG,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBAClE,MAAM,IAAI,GAAG,MAAM,IAAA,2BAAgB,EAAC,SAAS,CAAC,CAAC;gBAE/C,wCAAwC;gBACxC,SAAS,CAAC,IAAI,CAAC;oBACb,IAAI,EAAE,IAAI,CAAC,MAAM;oBACjB,kBAAkB;oBAClB,eAAe;oBACf,YAAY;oBACZ,IAAI;oBACJ,QAAQ,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;iBAChD,CAAC,CAAC;YACL,CAAC;YAED,OAAO;gBACL,SAAS;gBACT,QAAQ;aACT,CAAC;QACJ,CAAC;KAAA;IAED;;;;OAIG;IACG,WAAW;;YACf,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,KAAK,GAAG,IAAI,gBAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,eAAe,EAAE,CAAC;YACjD,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,kBAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,SAAS,GAAG,CAAC,GAAG,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC5C,MAAM,IAAI,GAAG,MAAM,IAAA,2BAAgB,EAAC,SAAS,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;;;;;;;;OAeG;IACH,MAAM,CAAO,iBAAiB;6DAC5B,OAAgB,EAChB,OAMC,EACD,gBAA6C,EAC7C,QAAiB,KAAK;;YAQtB,MAAM,UAAU,GACd,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAChB,CAAC,MAAM,sCAAgB,CAAC,sBAAsB,CAC5C,OAAO,CAAC,QAAQ,CAAC,UAAU,EAC3B,EAAE,CACH,CAAC,CAAC;YACL,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YACvE,MAAM,MAAM,GAAG,OAAO,CAAC;YACvB,MAAM,WAAW,GAIX,EAAE,CAAC;YACT,IAAI,KAAK,GAA0B,SAAS,CAAC;YAC7C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACnC,IAAI,KAAK,KAAK,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrD,MAAM,IAAI,KAAK,CACb,uDAAuD,CACxD,CAAC;gBACJ,CAAC;gBACD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACnB,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;gBACtD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBACvC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAA,OAAO,CAAC,cAAc,mCAAI,uBAAc,CAAC,OAAO,EAAE,CAAC;qBACpE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBACjD,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC7B,WAAW,CAAC,IAAI,CAAC;oBACf,WAAW;oBACX,YAAY;oBACZ,IAAI;iBACL,CAAC,CAAC;YACL,CAAC;YACD,MAAM,QAAQ,GAAG,MAAM,gBAAK,CAAC,oBAAoB,CAAC,OAAO,kCACpD,MAAM,KACT,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5B,WAAW,EACX,KAAK,EAAE,KAAM,IACb,CAAC;YACH,MAAM,OAAO,GAAgB,EAAE,CAAC;YAChC,MAAM,WAAW,GAAU,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAI,cAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,cAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1D,OAAO,CAAC,IAAI,CACV,IAAI,mBAAS,CACX,MAAM,CAAC,IAAI,CACT,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,aAAa,EAC5D,KAAK,CACN,CACF,CACF,CAAC;gBACF,MAAM,cAAc,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,aAAa,GAAG,cAAc,CAAC,cAAc,CAAC;gBACpD,MAAM,gBAAgB,GAAG;oBACvB,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;;wBACnC,IAAI,CAAC,MAAA,CAAC,CAAC,aAAa,mCAAI,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC;4BACnC,OAAO,OAAO,CAAC;wBACjB,CAAC;wBACD,OAAO,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;oBACxC,CAAC,CAAC;oBACF,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC;oBAC1D,UAAU,EAAE,cAAc,CAAC,WAAW;iBACvC,CAAC;gBACF,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACrC,CAAC;YAED,MAAM,cAAc,GAClB,MAAA,MAAA,MAAM,CAAC,KAAK,mCAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,mCAAI,mBAAS,CAAC,OAAO,CAAC;YAClE,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CACjC,CAAC,MAAM,EAAE,EAAE,CACT,mBAAS,CAAC,sBAAsB,CAC9B,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,EAC/C,OAAO,CAAC,SAAS,CAClB,CAAC,CAAC,CAAC,CACP,CAAC;YACF,MAAM,eAAe,GAAG;gBACtB,IAAI,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrC,WAAW;aACZ,CAAC;YAEF,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,KAAM;gBACb,YAAY,EAAE,gBAAK,CAAC,WAAW,CAAC,OAAO,CAAC;gBACxC,gBAAgB,EAAE,oCAAqB;gBACvC,KAAK,EAAE,cAAc;gBACrB,aAAa,EAAE,uBAAa,CAAC,SAAS;gBACtC,WAAW,EAAE,GAAG,CAAC,6BAA6B,CAAC,GAAG,CAAC,WAAW,EAAE,KAAM,CAAC;gBACvE,YAAY,EAAE,GAAG,CAAC,gBAAgB;gBAClC,SAAS,EAAE,GAAG,CAAC,WAAW;aAC3B,CAAC;YACF,MAAM,iBAAiB,GAAkB;gBACvC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACnB,MAAM,EAAE,CAAC,CAAC,MAAM;oBAChB,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;gBACH,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACrB,MAAM,EAAE,CAAC;oBACT,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,KAAK;iBAClB,CAAC,CAAC;gBACH,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC7B,MAAM,EAAE,CAAC;oBACT,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;aACJ,CAAC;YACF,MAAM,UAAU,GAAU,EAAE,CAAC;YAC7B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;YAC1C,CAAC;YACD,KAAK,MAAM,SAAS,IAAI,OAAO,EAAE,CAAC;gBAChC,MAAM,MAAM,GAAG,IAAI,kBAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAC9C,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;YAC5C,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,0BAA0B,CAAC,eAAe,EAAE;gBACzE,QAAQ;gBACR,iBAAiB;aAClB,CAAC,CAAC;YACH,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9B,CAAC;KAAA;IAED;;;;;;OAMG;IACH,2BAA2B,CAAC,MAM3B;;QACC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,cAAc,GAClB,MAAA,MAAA,MAAM,CAAC,KAAK,mCAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,mCAAI,mBAAS,CAAC,OAAO,CAAC;QAClE,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,WAAC,OAAA,CAAC,MAAA,CAAC,CAAC,SAAS,mCAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA,EAAA,CAAC,CAAC;QACzE,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC;QAEzE,IAAI,KAAK,GAAG,IAAI,mBAAS,CACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CACrD,CAAC;QACF,MAAM,cAAc,GAAG,IAAI,mBAAS,CAClC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CACrD,CAAC;QACF,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,mBAAS,CAAC,sBAAsB,CACnD,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,EACxC,OAAO,CAAC,SAAS,CAClB,CAAC;QACJ,CAAC;QAED,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YAC9B,MAAM,eAAe,GAAG,IAAI,mBAAS,CACnC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAC/C,CAAC;YACF,IAAI,QAAQ,EAAE,CAAC;gBACb,OAAO,eAAe,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,SAAS,CAAC,GAAG,mBAAS,CAAC,sBAAsB,CAClD,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,eAAe,CAAC,QAAQ,EAAE,CAAC,EACrE,OAAO,CAAC,SAAS,CAClB,CAAC;gBACF,OAAO,SAAS,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CACjC,CAAC,MAAM,EAAE,EAAE,CACT,mBAAS,CAAC,sBAAsB,CAC9B,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,EAC/C,OAAO,CAAC,SAAS,CAClB,CAAC,CAAC,CAAC,CACP,CAAC;QAEF,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;YAC5C,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YACnD,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,UAAU,EAAE,IAAI,CAAC,WAAW;YAE5B,iDAAiD;YACjD,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS;SACvD,CAAC,CAAC,CAAC;QAEJ,MAAM,eAAe,GAAG;YACtB,IAAI,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YAChC,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;gBACtC,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;gBACjD,OAAO,CAAC,CAAC;YACX,CAAC,CAAC;YACF,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc;YACrD,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;SAC5C,CAAC;QAEF,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,MAAM;YACjB,KAAK,EAAE,KAAK;YACZ,YAAY,EAAE,gBAAK,CAAC,WAAW,CAAC,OAAO,CAAC;YACxC,gBAAgB,EAAE,oCAAqB;YACvC,KAAK,EAAE,cAAc;YACrB,aAAa,EAAE,uBAAa,CAAC,SAAS;YACtC,WAAW,EAAE,GAAG,CAAC,6BAA6B,CAC5C,GAAG,CAAC,WAAW,EACf,KAAK,EACL,CAAC,QAAQ,CACV;YACD,YAAY,EAAE,GAAG,CAAC,gBAAgB;YAClC,SAAS,EAAE,GAAG,CAAC,WAAW;SAC3B,CAAC;QAEF,MAAM,iBAAiB,GAAkB;YACvC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBACrB,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;YACH,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC7B,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;SACJ,CAAC;QAEF,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,OAAO,CAAC,WAAW,CAAC,sBAAsB,CAAC,eAAe,EAAE;gBACjE,QAAQ;gBACR,iBAAiB;aAClB,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,OAAO,CAAC,WAAW,CAAC,yBAAyB,CAAC,eAAe,EAAE;gBACpE,QAAQ;gBACR,iBAAiB;aAClB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;OAIG;IACG,kBAAkB;;YACtB,OAAO,CAAC,CAAC,MAAM,cAAc,CAC3B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,EAChC,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,MAAM,CACZ,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACG,QAAQ;;YACZ,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9E,CAAC;KAAA;IAED;;;;;OAKG;IACG,UAAU;;YAGd,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC,WAAW;iBACpB,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAS,CAAC,OAAO,CAAC,CAAC;iBACvD,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;gBACd,gBAAG,CAAC,EAAE,GAAG,EAAE,CAAC;gBACZ,OAAO;oBACL,KAAK,EAAE,IAAI,gBAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;oBAC5C,IAAI,EAAE,IAAI,cAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAC/B,MAAM,EAAE,IAAI,mBAAS,CAAC,CAAC,CAAC,MAAM,CAAC;iBAChC,CAAC;YACJ,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAED;;;;;;OAMG;IACG,iBAAiB,CAAC,SAAoB;;YAK1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACvC,OAAO,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACxC,CAAC;KAAA;IAED;;;;;OAKG;IACG,uBAAuB,CAAC,QAAa;;YACzC,MAAM,KAAK,GAAG,IAAI,8BAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,CACrE,IAAI,CAAC,MAAM,EACX,CAAO,WAAW,EAAE,OAAO,EAAE,EAAE;gBAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,qBAAqB,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;gBACnE,MAAM,QAAQ,CACZ,IAAI,CAAC,WAAW;qBACb,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAS,CAAC,OAAO,CAAC,CAAC;qBACvD,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;oBACd,gBAAG,CAAC,EAAE,GAAG,EAAE,CAAC;oBACZ,OAAO;wBACL,KAAK,EAAE,IAAI,gBAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;wBAC5C,IAAI,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;wBACtC,MAAM,EAAE,IAAI,mBAAS,CAAC,CAAC,CAAC,MAAM,CAAC;qBAChC,CAAC;gBACJ,CAAC,CAAC,CACL,CAAC;YACJ,CAAC,CAAA,EACD,WAAW,CACZ,CAAC;YACF,OAAO,cAAc,CAAC;QACxB,CAAC;KAAA;IAED;;;;;;OAMG;IACH,MAAM,CAAO,qBAAqB,CAChC,OAAgB,EAChB,QAEkB;;YAElB,MAAM,KAAK,GAAG,IAAI,8BAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAClD,MAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CACvE,OAAO,CAAC,SAAS,EACjB,CAAO,gBAAgB,EAAE,GAAG,EAAE,EAAE;gBAC9B,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC;gBACpD,IAAI,CAAC;oBACH,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,qBAAqB,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;oBACnE,MAAM,QAAQ,CAAC;wBACb,GAAG,CAAC,IAAI;wBACR;4BACE,MAAM,EAAE,SAAS;4BACjB,WAAW,EAAE,IAAI,CAAC,WAAW;iCAC1B,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAS,CAAC,OAAO,CAAC,CAAC;iCAClD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gCACT,gBAAG,CAAC,EAAE,GAAG,EAAE,CAAC;gCACZ,OAAO;oCACL,KAAK,EAAE,IAAI,gBAAG,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;oCAC5C,IAAI,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;oCACtC,MAAM,EAAE,IAAI,mBAAS,CAAC,CAAC,CAAC,MAAM,CAAC;iCAChC,CAAC;4BACJ,CAAC,CAAC;yBACL;qBACF,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;gBACpC,CAAC;YACH,CAAC,CAAA,EACD,WAAW,EACX;gBACE;oBACE,MAAM,EAAE;wBACN,KAAK,EAAE,aAAa;wBACpB,MAAM,EAAE,CAAC;qBACV;iBACF;aACF,CACF,CAAC;YACF,OAAO,cAAc,CAAC;QACxB,CAAC;KAAA;IAEM,cAAc,CAAC,IAAS;QAC7B,MAAM,SAAS,GAAG,mBAAS,CAAC,sBAAsB,CAChD,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAClD,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB,CAAC,CAAC,CAAC,CAAC;QAEL,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,mCAAyB,CAAC,iBAAiB,CAAC;YAC9D,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,mBAAS,CAAC,OAAO;YACxB,UAAU,EAAE,IAAI,CAAC,OAAO;SACzB,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAEK,eAAe;;YACnB,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;gBAChD,OAAO,IAAI,CAAC,GAAG,CAAC;YAClB,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CACxE,MAAM,CACP,CAAC;YACF,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,KAAM,CAAC;YACxB,OAAO,IAAI,CAAC,GAAI,CAAC;QACnB,CAAC;KAAA;IAEK,2BAA2B,CAC/B,KAA2B;;YAE3B,MAAM,IAAI,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB;iBAClC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBACnC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACtC,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;CACF;AAluCD,4BAkuCC","sourcesContent":["import { SLOT_HASHES_SYSVAR_ID } from \"../constants.js\";\nimport type {\n  FeedEvalResponse,\n  FetchSignaturesMultiResponse,\n} from \"../oracle-interfaces/gateway.js\";\n\nimport { InstructionUtils } from \"./../instruction-utils/InstructionUtils.js\";\nimport { RecentSlotHashes } from \"./../sysvars/recentSlothashes.js\";\nimport * as spl from \"./../utils/index.js\";\nimport {\n  getDefaultDevnetQueue,\n  getDefaultQueue,\n  loadLookupTables,\n} from \"./../utils/index.js\";\nimport { Oracle } from \"./oracle.js\";\nimport { Queue } from \"./queue.js\";\nimport { State } from \"./state.js\";\n\nimport { TTLCache } from \"@brokerloop/ttlcache\";\nimport type { Program } from \"@coral-xyz/anchor-30\";\nimport { BorshAccountsCoder } from \"@coral-xyz/anchor-30\";\nimport * as anchor from \"@coral-xyz/anchor-30\";\nimport { BN } from \"@coral-xyz/anchor-30\";\nimport type {\n  AccountMeta,\n  AddressLookupTableAccount,\n  Connection,\n  TransactionInstruction,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport {\n  AddressLookupTableProgram,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport type { IOracleJob } from \"@switchboard-xyz/common\";\nimport { OracleJob } from \"@switchboard-xyz/common\";\nimport { CrossbarClient, FeedHash } from \"@switchboard-xyz/common\";\nimport { bs58 } from \"@switchboard-xyz/common\";\nimport Big from \"big.js\";\n\nconst QUEUE_CACHE = new TTLCache<string, Queue>({\n  ttl: 60 * 1000,\n  max: 50,\n  clock: Date,\n});\n\nconst PRECISION = 18;\n\nexport interface CurrentResult {\n  value: BN;\n  stdDev: BN;\n  mean: BN;\n  range: BN;\n  minValue: BN;\n  maxValue: BN;\n  slot: BN;\n  minSlot: BN;\n  maxSlot: BN;\n}\n\nexport interface CompactResult {\n  stdDev: number;\n  mean: number;\n  slot: BN;\n}\n\nexport interface OracleSubmission {\n  oracle: PublicKey;\n  slot: BN;\n  value: BN;\n}\n\nexport interface PullFeedAccountData {\n  submissions: OracleSubmission[];\n  authority: PublicKey;\n  queue: PublicKey;\n  feedHash: Uint8Array;\n  initializedAt: BN;\n  permissions: BN;\n  maxVariance: BN;\n  minResponses: number;\n  name: Uint8Array;\n  sampleSize: number;\n  lastUpdateTimestamp: BN;\n  lutSlot: BN;\n  result: CurrentResult;\n  maxStaleness: number;\n  minSampleSize: number;\n  historicalResultIdx: number;\n  historicalResults: CompactResult[];\n}\n\nexport type MultiSubmission = {\n  values: anchor.BN[];\n  signature: Buffer; // TODO: Does this need to be made a Uint8Array too?\n  recoveryId: number;\n};\n\nexport class OracleResponse {\n  constructor(\n    readonly oracle: Oracle,\n    readonly value: Big | null,\n    readonly error: string\n  ) {}\n\n  shortError(): string | undefined {\n    if (this.error === \"[]\") {\n      return undefined;\n    }\n    const parts = this.error.split(\"\\n\");\n    return parts[0];\n  }\n}\n\nexport type FeedRequest = {\n  maxVariance: number;\n  minResponses: number;\n  jobs: OracleJob[];\n};\n\nfunction padStringWithNullBytes(\n  input: string,\n  desiredLength: number = 32\n): string {\n  const nullByte = \"\\0\";\n  while (input.length < desiredLength) {\n    input += nullByte;\n  }\n  return input;\n}\n\nexport type FeedSubmission = { value: Big; slot: anchor.BN; oracle: PublicKey };\n\nexport function toFeedValue(\n  submissions: FeedSubmission[],\n  onlyAfter: anchor.BN\n): FeedSubmission | null {\n  let values = submissions.filter((x) => x.slot.gt(onlyAfter));\n  if (values.length === 0) {\n    return null;\n  }\n  values = values.sort((x, y) => (x.value.lt(y.value) ? -1 : 1));\n  return values[Math.floor(values.length / 2)];\n}\n\n/**\n *  Checks if the pull feed account needs to be initialized.\n *\n *  @param connection The connection to use.\n *  @param programId The program ID.\n *  @param pubkey The public key of the pull feed account.\n *  @returns A promise that resolves to a boolean indicating if the account needs to be initialized.\n */\nasync function checkNeedsInit(\n  connection: Connection,\n  programId: PublicKey,\n  pubkey: PublicKey\n): Promise<boolean> {\n  const accountInfo = await connection.getAccountInfo(pubkey);\n  if (accountInfo === null) return true;\n\n  const owner = accountInfo.owner;\n  if (!owner.equals(programId)) return true;\n\n  return false;\n}\n\n/**\n *  Abstraction around the Switchboard-On-Demand Feed account\n *\n *  This account is used to store the feed data and the oracle responses\n *  for a given feed.\n */\nexport class PullFeed {\n  gatewayUrl: string;\n  pubkey: PublicKey;\n  configs: {\n    queue: PublicKey;\n    maxVariance: number;\n    minResponses: number;\n    feedHash: Buffer;\n    minSampleSize: number;\n  } | null;\n  jobs: IOracleJob[] | null;\n  lut: AddressLookupTableAccount | null;\n\n  /**\n   * Constructs a `PullFeed` instance.\n   *\n   * @param program - The Anchor program instance.\n   * @param pubkey - The public key of the pull feed account.\n   */\n  constructor(readonly program: Program, pubkey: PublicKey | string) {\n    this.gatewayUrl = \"\";\n    this.pubkey = new PublicKey(pubkey);\n    this.configs = null;\n    this.jobs = null;\n  }\n\n  static generate(program: Program): [PullFeed, Keypair] {\n    const keypair = Keypair.generate();\n    const feed = new PullFeed(program, keypair.publicKey);\n    return [feed, keypair];\n  }\n\n  static async initTx(\n    program: Program,\n    params: {\n      name: string;\n      queue: PublicKey;\n      maxVariance: number;\n      minResponses: number;\n      minSampleSize: number;\n      maxStaleness: number;\n      payer?: PublicKey;\n    } & ({ feedHash: Buffer } | { jobs: IOracleJob[] })\n  ): Promise<[PullFeed, VersionedTransaction]> {\n    const [pullFeed, keypair] = PullFeed.generate(program);\n    const ix = await pullFeed.initIx(params);\n    const tx = await InstructionUtils.asV0TxWithComputeIxs({\n      connection: program.provider.connection,\n      ixs: [ix],\n    });\n    tx.sign([keypair]);\n    return [pullFeed, tx];\n  }\n\n  private getPayer(payer?: PublicKey): PublicKey {\n    return payer ?? this.program.provider.publicKey ?? PublicKey.default;\n  }\n\n  /**\n   *  Calls to initialize a pull feed account and to update the configuration account need to\n   *  compute the feed hash for the account (if one is not specified).\n   */\n  private static feedHashFromParams(params: {\n    queue: PublicKey;\n    feedHash?: Buffer;\n    jobs?: IOracleJob[];\n  }): Buffer {\n    const hash = (() => {\n      if (params.feedHash) {\n        // If the feed hash is provided, use it.\n        return params.feedHash;\n      } else if (params.jobs?.length) {\n        // Else if jobs are provided, compute the feed hash from the queue and jobs.\n        return FeedHash.compute(params.queue.toBuffer(), params.jobs);\n      }\n      throw new Error('Either \"feedHash\" or \"jobs\" must be provided.');\n    })();\n    if (hash.byteLength === 32) return hash;\n    throw new Error(\"Feed hash must be 32 bytes\");\n  }\n\n  /**\n   * Initializes a pull feed account.\n   *\n   * @param {anchor.Program} program - The Anchor program instance.\n   * @param {PublicKey} queue - The queue account public key.\n   * @param {Array<OracleJob>} jobs - The oracle jobs to execute.\n   * @param {number} maxVariance - The maximum variance allowed for the feed.\n   * @param {number} minResponses - The minimum number of job responses required.\n   * @param {number} minSampleSize - The minimum number of samples required for setting feed value.\n   * @param {number} maxStaleness - The maximum number of slots that can pass before a feed value is considered stale.\n   * @returns {Promise<[PullFeed, string]>} A promise that resolves to a tuple containing the pull feed instance and the transaction signature.\n   */\n  async initIx(\n    params: {\n      name: string;\n      queue: PublicKey;\n      maxVariance: number;\n      minResponses: number;\n      payer?: PublicKey;\n      minSampleSize: number;\n      maxStaleness: number;\n    } & ({ feedHash: Buffer } | { jobs: IOracleJob[] })\n  ): Promise<TransactionInstruction> {\n    const feedHash = PullFeed.feedHashFromParams({\n      queue: params.queue,\n      feedHash: \"feedHash\" in params ? params.feedHash : undefined,\n      jobs: \"jobs\" in params ? params.jobs : undefined,\n    });\n    const payerPublicKey = this.getPayer(params.payer);\n    const maxVariance = Math.floor(params.maxVariance * 1e9);\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), this.pubkey.toBuffer()],\n        this.program.programId\n      )\n    )[0];\n    const recentSlot = await this.program.provider.connection.getSlot(\n      \"finalized\"\n    );\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: payerPublicKey,\n      recentSlot,\n    });\n    const ix = this.program.instruction.pullFeedInit(\n      {\n        feedHash: feedHash,\n        maxVariance: new anchor.BN(maxVariance),\n        minResponses: params.minResponses,\n        name: Buffer.from(padStringWithNullBytes(params.name)),\n        recentSlot: new anchor.BN(recentSlot),\n        ipfsHash: new Uint8Array(32), // Deprecated.\n        minSampleSize: params.minSampleSize,\n        maxStaleness: params.maxStaleness,\n      },\n      {\n        accounts: {\n          pullFeed: this.pubkey,\n          queue: params.queue,\n          authority: payerPublicKey,\n          payer: payerPublicKey,\n          systemProgram: SystemProgram.programId,\n          programState: State.keyFromSeed(this.program),\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            this.pubkey\n          ),\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          associatedTokenProgram: spl.ASSOCIATED_TOKEN_PROGRAM_ID,\n          wrappedSolMint: spl.NATIVE_MINT,\n          lutSigner,\n          lut,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n\n  async closeIx(params: {\n    payer?: PublicKey;\n  }): Promise<TransactionInstruction> {\n    const payerPublicKey = this.getPayer(params.payer);\n    const lutSigner = (\n      await PublicKey.findProgramAddress(\n        [Buffer.from(\"LutSigner\"), this.pubkey.toBuffer()],\n        this.program.programId\n      )\n    )[0];\n    const data = await this.loadData();\n    const [_, lut] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: payerPublicKey,\n      recentSlot: BigInt(data.lutSlot.toString()),\n    });\n    const ix = this.program.instruction.pullFeedClose(\n      {},\n      {\n        accounts: {\n          pullFeed: this.pubkey,\n          authority: data.authority,\n          payer: payerPublicKey,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            spl.NATIVE_MINT,\n            this.pubkey\n          ),\n          lutSigner,\n          lut,\n          state: State.keyFromSeed(this.program),\n          tokenProgram: spl.TOKEN_PROGRAM_ID,\n          associatedTokenProgram: spl.ASSOCIATED_TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          addressLookupTableProgram: AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Set configurations for the feed.\n   *\n   * @param params\n   * @param params.feedHash - The hash of the feed as a `Uint8Array` or hexadecimal `string`. Only results signed with this hash will be accepted.\n   * @param params.authority - The authority of the feed.\n   * @param params.maxVariance - The maximum variance allowed for the feed.\n   * @param params.minResponses - The minimum number of responses required.\n   * @param params.minSampleSize - The minimum number of samples required for setting feed value.\n   * @param params.maxStaleness - The maximum number of slots that can pass before a feed value is considered stale.\n   * @returns A promise that resolves to the transaction instruction to set feed configs.\n   */\n  async setConfigsIx(params: {\n    name?: string;\n    authority?: PublicKey;\n    maxVariance?: number;\n    minResponses?: number;\n    feedHash?: Buffer;\n    jobs?: IOracleJob[];\n    minSampleSize?: number;\n    maxStaleness?: number;\n  }): Promise<TransactionInstruction> {\n    const data = await this.loadData();\n    const name =\n      params.name !== undefined\n        ? Buffer.from(padStringWithNullBytes(params.name))\n        : null;\n    const feedHash =\n      params.feedHash || params.jobs\n        ? PullFeed.feedHashFromParams({\n            queue: data.queue,\n            feedHash: params.feedHash,\n            jobs: params.jobs,\n          })\n        : null;\n\n    const ix = this.program.instruction.pullFeedSetConfigs(\n      {\n        name: name,\n        feedHash: feedHash,\n        authority: params.authority ?? null,\n        maxVariance:\n          params.maxVariance !== undefined\n            ? new anchor.BN(Math.floor(params.maxVariance * 1e9))\n            : null,\n        minResponses: params.minResponses ?? null,\n        minSampleSize: params.minSampleSize ?? null,\n        maxStaleness: params.maxStaleness ?? null,\n        ipfsHash: null, // Deprecated.\n      },\n      {\n        accounts: {\n          pullFeed: this.pubkey,\n          authority: data.authority,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Fetch updates for the feed.\n   *\n   * @param {object} params_ - The parameters object.\n   * @param {string} [params_.gateway] - Optionally specify the gateway to use. If not specified, the gateway is automatically fetched.\n   * @param {number} [params_.numSignatures] - Number of signatures to fetch.\n   * @param {FeedRequest} [params_.feedConfigs] - Optionally specify the feed configs. If not specified, the feed configs are automatically fetched.\n   * @param {IOracleJob[]} [params_.jobs] - An array of `IOracleJob` representing the jobs to be executed.\n   * @param {CrossbarClient} [params_.crossbarClient] - Optionally specify the CrossbarClient to use.\n   * @param {Array<[anchor.BN, string]>} [recentSlothashes] - An optional array of recent slothashes as `[anchor.BN, string]` tuples.\n   * @param {FeedEvalResponse[]} [priceSignatures] - An optional array of `FeedEvalResponse` representing the price signatures.\n   * @param {boolean} [debug=false] - A boolean flag to enable or disable debug mode. Defaults to `false`.\n   * @returns {Promise<[TransactionInstruction | undefined, OracleResponse[], number, any[]]>} A promise that resolves to a tuple containing:\n   * - The transaction instruction to fetch updates, or `undefined` if not applicable.\n   * - An array of `OracleResponse` objects.\n   * - A number representing the successful responses.\n   * - An array containing usable lookup tables.\n   */\n  async fetchUpdateIx(\n    params_?: {\n      // Optionally specify the gateway to use. Else, the gateway is automatically fetched.\n      gateway?: string;\n      // Number of signatures to fetch.\n      numSignatures?: number;\n      jobs?: IOracleJob[];\n      crossbarClient?: CrossbarClient;\n      retries?: number;\n      chain?: string;\n      network?: \"mainnet\" | \"mainnet-beta\" | \"testnet\" | \"devnet\";\n      solanaRpcUrl?: string;\n    },\n    recentSlothashes?: Array<[anchor.BN, string]>,\n    priceSignatures?: FeedEvalResponse[],\n    debug: boolean = false,\n    payer?: PublicKey\n  ): Promise<\n    [\n      TransactionInstruction | undefined,\n      OracleResponse[],\n      number,\n      AddressLookupTableAccount[],\n      string[]\n    ]\n  > {\n    const payerPublicKey = this.getPayer(payer);\n    if (this.configs === null) {\n      this.configs = await this.loadConfigs();\n    }\n\n    params_ = params_ ?? {};\n    params_.retries = params_.retries ?? 3;\n    const feedConfigs = this.configs;\n    const numSignatures =\n      params_?.numSignatures ??\n      feedConfigs.minSampleSize + Math.ceil(feedConfigs.minSampleSize / 3);\n    const isSolana =\n      params_?.chain === undefined || params_?.chain === \"solana\";\n    const isMainnet =\n      params_?.network === \"mainnet\" || params_?.network === \"mainnet-beta\";\n\n    let queueAccount = new Queue(this.program, feedConfigs.queue);\n\n    if (!isSolana) {\n      // TODO: cache this\n      queueAccount = isMainnet\n        ? await getDefaultQueue(params_?.solanaRpcUrl)\n        : await getDefaultDevnetQueue(params_?.solanaRpcUrl);\n    }\n\n    if (this.gatewayUrl === \"\") {\n      this.gatewayUrl =\n        params_?.gateway ??\n        (await queueAccount.fetchAllGateways())[0].gatewayUrl;\n    }\n    let jobs = params_?.jobs ?? this.jobs;\n    if (!jobs?.length) {\n      const data = await this.loadData();\n      jobs = await (params_?.crossbarClient ?? CrossbarClient.default())\n        .fetch(Buffer.from(data.feedHash).toString(\"hex\"))\n        .then((resp) => {\n          return resp.jobs;\n        });\n      this.jobs = jobs;\n    }\n    const params = {\n      feed: this.pubkey,\n      gateway: this.gatewayUrl,\n      ...feedConfigs,\n      ...params_,\n      numSignatures,\n      jobs: jobs,\n    };\n    let err = null;\n    for (let i = 0; i < params.retries; i++) {\n      try {\n        const ix = await PullFeed.fetchUpdateIx(\n          this.program,\n          params,\n          recentSlothashes,\n          priceSignatures,\n          debug,\n          payerPublicKey\n        );\n        return ix;\n      } catch (err_: any) {\n        err = err_;\n      }\n    }\n    throw err;\n  }\n\n  /**\n   * Loads the feed configurations for this {@linkcode PullFeed} account from on chain.\n   * @returns A promise that resolves to the feed configurations.\n   * @throws if the feed account does not exist.\n   */\n  async loadConfigs(): Promise<{\n    queue: PublicKey;\n    maxVariance: number;\n    minResponses: number;\n    feedHash: Buffer;\n    minSampleSize: number;\n  }> {\n    const data = await this.loadData();\n    const maxVariance = data.maxVariance.toNumber() / 1e9;\n    return {\n      queue: data.queue,\n      maxVariance: maxVariance,\n      minResponses: data.minResponses,\n      feedHash: Buffer.from(data.feedHash),\n      minSampleSize: data.minSampleSize,\n    };\n  }\n\n  /**\n   * Fetch updates for the feed.\n   *\n   * @param params_ - The parameters object.\n   * @param params_.gateway - Optionally specify the gateway to use. If not specified, the gateway is automatically fetched.\n   * @param params._chain - Optionally specify the chain to use. If not specified, Solana is used.\n   * @param params_.numSignatures - Number of signatures to fetch.\n   * @param params_.feedConfigs - Optionally specify the feed configs. If not specified, the feed configs are automatically fetched.\n   * @param params_.jobs - An array of `IOracleJob` representing the jobs to be executed.\n   * @param params_.crossbarClient - Optionally specify the CrossbarClient to use.\n   * @param recentSlothashes - An optional array of recent slothashes as `[anchor.BN, string]` tuples.\n   * @param priceSignatures - An optional array of `FeedEvalResponse` representing the price signatures.\n   * @param debug - A boolean flag to enable or disable debug mode. Defaults to `false`.\n   * @param payer - Optionally specify the payer public key.\n   * @returns A promise that resolves to a tuple containing:\n   * - The transaction instruction to fetch updates, or `undefined` if not applicable.\n   * - An array of `OracleResponse` objects.\n   * - A number representing the successful responses.\n   * - An array containing usable lookup tables.\n   */\n  static async fetchUpdateIx(\n    program: Program,\n    params_: {\n      gateway?: string;\n      chain?: string;\n      network?: \"mainnet\" | \"mainnet-beta\" | \"testnet\" | \"devnet\";\n      solanaRpcUrl?: string;\n      queue: PublicKey;\n      feed: PublicKey;\n      numSignatures: number;\n      maxVariance: number;\n      minResponses: number;\n      jobs: IOracleJob[];\n      crossbarClient?: CrossbarClient;\n    },\n    recentSlothashes?: Array<[anchor.BN, string]>,\n    priceSignatures?: FeedEvalResponse[],\n    debug: boolean = false,\n    payer?: PublicKey\n  ): Promise<\n    [\n      TransactionInstruction | undefined,\n      OracleResponse[],\n      number,\n      AddressLookupTableAccount[],\n      string[]\n    ]\n  > {\n    let slotHashes = recentSlothashes;\n    if (slotHashes === undefined) {\n      slotHashes = await RecentSlotHashes.fetchLatestNSlothashes(\n        program.provider.connection,\n        30\n      );\n    }\n    const feed = new PullFeed(program, params_.feed);\n    const params = params_;\n    const jobs = params.jobs;\n    const isSolana = params.chain === undefined || params.chain === \"solana\";\n    const isMainnet =\n      params.network === \"mainnet\" || params.network === \"mainnet-beta\";\n    let queue = params.queue;\n\n    let failures_: string[] = [];\n    if (priceSignatures === undefined || priceSignatures === null) {\n      let solanaProgram = program;\n\n      // get the queue\n      if (!isSolana) {\n        // TODO: cache this\n        const defaultQueue = isMainnet\n          ? await getDefaultQueue(params.solanaRpcUrl)\n          : await getDefaultDevnetQueue(params.solanaRpcUrl);\n\n        queue = defaultQueue.pubkey;\n        solanaProgram = defaultQueue.program;\n      }\n\n      const { responses, failures } = await Queue.fetchSignatures(\n        solanaProgram,\n        {\n          ...params,\n          queue,\n          jobs: jobs!.map((x) => OracleJob.fromObject(x)),\n          recentHash: slotHashes[0][1],\n        }\n      );\n      priceSignatures = responses;\n      failures_ = failures;\n    }\n\n    let numSuccesses = 0;\n    if (!priceSignatures) {\n      return [undefined, [], 0, [], []];\n    }\n    const oracleResponses = priceSignatures.map((x) => {\n      const oldDP = Big.DP;\n      Big.DP = 40;\n      const value = x.success_value ? new Big(x.success_value).div(1e18) : null;\n      if (value !== null) {\n        numSuccesses += 1;\n      }\n      Big.DP = oldDP;\n      let oracle = new PublicKey(Buffer.from(x.oracle_pubkey, \"hex\"));\n      if (!isSolana) {\n        [oracle] = PublicKey.findProgramAddressSync(\n          [Buffer.from(\"Oracle\"), params.queue.toBuffer(), oracle.toBuffer()],\n          program.programId\n        );\n      }\n      return new OracleResponse(\n        new Oracle(program, oracle),\n        value,\n        x.failure_error\n      );\n    });\n\n    const offsets: number[] = new Array(priceSignatures.length).fill(0);\n    for (let i = 0; i < priceSignatures.length; i++) {\n      if (priceSignatures[i].failure_error.length > 0) {\n        let validResp = false;\n        for (const recentSignature of priceSignatures[i]\n          .recent_successes_if_failed) {\n          for (let offset = 0; offset < slotHashes.length; offset++) {\n            const slotHash = slotHashes[offset];\n            if (slotHash[1] === recentSignature.recent_hash) {\n              priceSignatures[i] = recentSignature;\n              offsets[i] = offset;\n              validResp = true;\n              break;\n            }\n          }\n          if (validResp) {\n            break;\n          }\n        }\n      }\n    }\n    if (debug) {\n      console.log(\"priceSignatures\", priceSignatures);\n    }\n\n    let submitSignaturesIx: TransactionInstruction | undefined = undefined;\n    if (numSuccesses > 0) {\n      submitSignaturesIx = feed.getSolanaSubmitSignaturesIx({\n        resps: priceSignatures,\n        offsets: offsets,\n        slot: slotHashes[0][0],\n        payer,\n        chain: params.chain,\n      });\n    }\n\n    const lutOwners = [...oracleResponses.map((x) => x.oracle), feed];\n    const luts = await loadLookupTables(lutOwners);\n    if (!numSuccesses) {\n      throw new Error(\n        `PullFeed.fetchUpdateIx Failure: ${oracleResponses.map((x) => x.error)}`\n      );\n    }\n    return [submitSignaturesIx, oracleResponses, numSuccesses, luts, failures_];\n  }\n\n  /**\n   * Fetches updates for multiple feeds at once into SEPARATE intructions (one for each)\n   *\n   * @param program - The Anchor program instance.\n   * @param params_ - The parameters object.\n   * @param params_.gateway - The gateway URL to use. If not provided, the gateway is automatically fetched.\n   * @param params_.feeds - An array of feed account public keys.\n   * @param params_.numSignatures - The number of signatures to fetch.\n   * @param params_.crossbarClient - Optionally specify the CrossbarClient to use.\n   * @param recentSlothashes - An optional array of recent slothashes as `[anchor.BN, string]` tuples.\n   * @param debug - A boolean flag to enable or disable debug mode. Defaults to `false`.\n   * @param payer - Optionally specify the payer public key.\n   * @returns A promise that resolves to a tuple containing:\n   * - The transaction instruction for fetching updates.\n   * - An array of `AddressLookupTableAccount` to use.\n   * - The raw response data.\n   */\n  static async fetchUpdateManyIxs(\n    program: Program,\n    params_: {\n      gateway?: string;\n      feeds: PublicKey[];\n      numSignatures: number;\n      crossbarClient?: CrossbarClient;\n      payer?: PublicKey;\n    },\n    recentSlothashes?: Array<[anchor.BN, string]>,\n    debug: boolean = false,\n    payer?: PublicKey\n  ): Promise<{\n    successes: {\n      submitSignaturesIx: TransactionInstruction;\n      oracleResponses: {\n        value: Big.Big;\n        error: string;\n        oracle: Oracle;\n      };\n      numSuccesses: number;\n      luts: AddressLookupTableAccount[];\n      failures: string[];\n    }[];\n    failures: {\n      feed: PublicKey;\n      error: string;\n    }[];\n  }> {\n    const slotHashes =\n      recentSlothashes ??\n      (await RecentSlotHashes.fetchLatestNSlothashes(\n        program.provider.connection,\n        30\n      ));\n    const feeds = params_.feeds.map((feed) => new PullFeed(program, feed));\n    const params = params_;\n    const feedConfigs: {\n      maxVariance: number;\n      minResponses: number;\n      jobs: any;\n    }[] = [];\n    let queue: PublicKey | undefined = undefined;\n\n    // Map from feed hash to feed - this will help in mapping the responses to the feeds\n    const feedToFeedHash = new Map<string, string>();\n\n    // Map from feed hash to responses\n    const feedHashToResponses = new Map<string, FeedEvalResponse[]>();\n\n    // Iterate over all feeds to fetch the feed configs\n    for (const feed of feeds) {\n      // Load the feed from Solana\n      const data = await feed.loadData();\n      if (queue !== undefined && !queue.equals(data.queue)) {\n        throw new Error(\n          \"fetchUpdateManyIx: All feeds must have the same queue\"\n        );\n      }\n      queue = data.queue;\n      const maxVariance = data.maxVariance.toNumber() / 1e9;\n      const minResponses = data.minResponses;\n      const feedHash = Buffer.from(data.feedHash).toString(\"hex\");\n\n      // Store the feed in a map for later use\n      feedToFeedHash.set(feed.pubkey.toString(), feedHash);\n\n      // Add an entry for the feed in the response map\n      feedHashToResponses.set(feedHash, []);\n\n      // Pull the job definitions\n      const jobs = await (params_.crossbarClient ?? CrossbarClient.default())\n        .fetch(feedHash)\n        .then((resp) => {\n          return resp.jobs;\n        });\n\n      // Collect the feed config\n      feedConfigs.push({\n        maxVariance,\n        minResponses,\n        jobs,\n      });\n    }\n\n    // Fetch the responses from the oracle(s)\n    const response = await Queue.fetchSignaturesBatch(program, {\n      ...params,\n      recentHash: slotHashes[0][1],\n      feedConfigs,\n      queue: queue!,\n    });\n\n    const oracles: PublicKey[] = [];\n\n    // Assemble the responses\n    for (const oracleResponse of response.oracle_responses) {\n      // Get the oracle public key\n      const oraclePubkey = new PublicKey(\n        Buffer.from(oracleResponse.feed_responses[0].oracle_pubkey, \"hex\")\n      );\n\n      // Add it to the list of oracles\n      oracles.push(oraclePubkey);\n\n      // Map the responses to the feed\n      for (const feedResponse of oracleResponse.feed_responses) {\n        const feedHash = feedResponse.feed_hash;\n        feedHashToResponses.get(feedHash)?.push(feedResponse);\n      }\n    }\n\n    // loop over the feeds and create the instructions\n    const successes = [];\n    const failures = [];\n\n    for (const feed of feeds) {\n      const feedHash = feedToFeedHash.get(feed.pubkey.toString());\n\n      // Get registered responses for this feed\n      const responses = feedHashToResponses.get(feedHash) ?? [];\n\n      // If there are no responses for this feed, skip\n      if (responses.length === 0) {\n        failures.push({\n          feed: feed.pubkey,\n          error: `No responses found for feed hash: ${feedHash}. Skipping.`,\n        });\n        continue;\n      }\n\n      const oracleResponses = responses.map((x) => {\n        const oldDP = Big.DP;\n        Big.DP = 40;\n        const value = x.success_value\n          ? new Big(x.success_value).div(1e18)\n          : null;\n        Big.DP = oldDP;\n        return {\n          value,\n          error: x.failure_error,\n          oracle: new Oracle(\n            program,\n            new PublicKey(Buffer.from(x.oracle_pubkey, \"hex\"))\n          ),\n        };\n      });\n\n      // offsets currently deprecated\n      const offsets: number[] = Array(responses.length).fill(0);\n\n      if (debug) {\n        console.log(\"priceSignatures\", responses);\n      }\n\n      let submitSignaturesIx: TransactionInstruction | undefined = undefined;\n      let numSuccesses = 0;\n      if (responses.length > 0) {\n        const validResponses = responses.filter(\n          (x) => (x.signature ?? \"\").length > 0\n        );\n        numSuccesses = validResponses.length;\n        if (numSuccesses > 0) {\n          submitSignaturesIx = feed.getSolanaSubmitSignaturesIx({\n            resps: validResponses,\n            offsets: offsets,\n            slot: slotHashes[0][0],\n            payer: params.payer ?? program.provider.publicKey,\n          });\n        }\n      }\n\n      // Bounce if there are no successes\n      if (!numSuccesses) {\n        const failure = {\n          feed: feed.pubkey,\n          error: `PullFeed.fetchUpdateIx Failure: ${oracleResponses.map(\n            (x) => x.error\n          )}`,\n        };\n        failures.push(failure);\n        continue;\n      }\n\n      // Get lookup tables for the oracles\n      const lutOwners = [...oracleResponses.map((x) => x.oracle), feed];\n      const luts = await loadLookupTables(lutOwners);\n\n      // Add the result to the successes array\n      successes.push({\n        feed: feed.pubkey,\n        submitSignaturesIx,\n        oracleResponses,\n        numSuccesses,\n        luts,\n        failures: responses.map((x) => x.failure_error),\n      });\n    }\n\n    return {\n      successes,\n      failures,\n    };\n  }\n\n  /**\n   * Prefetch all lookup tables needed for the feed and queue.\n   * @returns A promise that resolves to an array of lookup tables.\n   * @throws if the lookup tables cannot be loaded.\n   */\n  async preHeatLuts(): Promise<AddressLookupTableAccount[]> {\n    const data = await this.loadData();\n    const queue = new Queue(this.program, data.queue);\n    const oracleKeys = await queue.fetchOracleKeys();\n    const oracles = oracleKeys.map((k) => new Oracle(this.program, k));\n    const lutOwners = [...oracles, queue, this];\n    const luts = await loadLookupTables(lutOwners);\n    return luts;\n  }\n\n  /**\n   * Fetches updates for multiple feeds at once into a SINGLE tightly packed intruction\n   *\n   * @param program - The Anchor program instance.\n   * @param params_ - The parameters object.\n   * @param params_.gateway - The gateway URL to use. If not provided, the gateway is automatically fetched.\n   * @param params_.feeds - An array of feed account public keys.\n   * @param params_.numSignatures - The number of signatures to fetch.\n   * @param params_.crossbarClient - Optionally specify the CrossbarClient to use.\n   * @param recentSlothashes - An optional array of recent slothashes as `[anchor.BN, string]` tuples.\n   * @param debug - A boolean flag to enable or disable debug mode. Defaults to `false`.\n   * @returns A promise that resolves to a tuple containing:\n   * - The transaction instruction for fetching updates.\n   * - An array of `AddressLookupTableAccount` to use.\n   * - The raw response data.\n   */\n  static async fetchUpdateManyIx(\n    program: Program,\n    params_: {\n      gateway?: string;\n      feeds: PublicKey[];\n      numSignatures: number;\n      crossbarClient?: CrossbarClient;\n      payer?: PublicKey;\n    },\n    recentSlothashes?: Array<[anchor.BN, string]>,\n    debug: boolean = false\n  ): Promise<\n    [\n      TransactionInstruction,\n      AddressLookupTableAccount[],\n      FetchSignaturesMultiResponse\n    ]\n  > {\n    const slotHashes =\n      recentSlothashes ??\n      (await RecentSlotHashes.fetchLatestNSlothashes(\n        program.provider.connection,\n        30\n      ));\n    const feeds = params_.feeds.map((feed) => new PullFeed(program, feed));\n    const params = params_;\n    const feedConfigs: {\n      maxVariance: number;\n      minResponses: number;\n      jobs: any;\n    }[] = [];\n    let queue: PublicKey | undefined = undefined;\n    for (const feed of feeds) {\n      const data = await feed.loadData();\n      if (queue !== undefined && !queue.equals(data.queue)) {\n        throw new Error(\n          \"fetchUpdateManyIx: All feeds must have the same queue\"\n        );\n      }\n      queue = data.queue;\n      const maxVariance = data.maxVariance.toNumber() / 1e9;\n      const minResponses = data.minResponses;\n      const jobs = await (params_.crossbarClient ?? CrossbarClient.default())\n        .fetch(Buffer.from(data.feedHash).toString(\"hex\"))\n        .then((resp) => resp.jobs);\n      feedConfigs.push({\n        maxVariance,\n        minResponses,\n        jobs,\n      });\n    }\n    const response = await Queue.fetchSignaturesMulti(program, {\n      ...params,\n      recentHash: slotHashes[0][1],\n      feedConfigs,\n      queue: queue!,\n    });\n    const oracles: PublicKey[] = [];\n    const submissions: any[] = [];\n    const maxI128 = new BN(2).pow(new BN(127)).sub(new BN(1));\n    for (let i = 0; i < response.oracle_responses.length; i++) {\n      oracles.push(\n        new PublicKey(\n          Buffer.from(\n            response.oracle_responses[i].feed_responses[0].oracle_pubkey,\n            \"hex\"\n          )\n        )\n      );\n      const oracleResponse = response.oracle_responses[i];\n      const feedResponses = oracleResponse.feed_responses;\n      const multisSubmission = {\n        values: feedResponses.map((x: any) => {\n          if ((x.success_value ?? \"\") === \"\") {\n            return maxI128;\n          }\n          return new anchor.BN(x.success_value);\n        }),\n        signature: Buffer.from(oracleResponse.signature, \"base64\"),\n        recoveryId: oracleResponse.recovery_id,\n      };\n      submissions.push(multisSubmission);\n    }\n\n    const payerPublicKey =\n      params.payer ?? program.provider.publicKey ?? PublicKey.default;\n    const oracleFeedStats = oracles.map(\n      (oracle) =>\n        PublicKey.findProgramAddressSync(\n          [Buffer.from(\"OracleStats\"), oracle.toBuffer()],\n          program.programId\n        )[0]\n    );\n    const instructionData = {\n      slot: new anchor.BN(slotHashes[0][0]),\n      submissions,\n    };\n\n    const accounts = {\n      queue: queue!,\n      programState: State.keyFromSeed(program),\n      recentSlothashes: SLOT_HASHES_SYSVAR_ID,\n      payer: payerPublicKey,\n      systemProgram: SystemProgram.programId,\n      rewardVault: spl.getAssociatedTokenAddressSync(spl.NATIVE_MINT, queue!),\n      tokenProgram: spl.TOKEN_PROGRAM_ID,\n      tokenMint: spl.NATIVE_MINT,\n    };\n    const remainingAccounts: AccountMeta[] = [\n      ...feeds.map((k) => ({\n        pubkey: k.pubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n      ...oracles.map((k) => ({\n        pubkey: k,\n        isSigner: false,\n        isWritable: false,\n      })),\n      ...oracleFeedStats.map((k) => ({\n        pubkey: k,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n    const lutLoaders: any[] = [];\n    for (const feed of feeds) {\n      lutLoaders.push(feed.loadLookupTable());\n    }\n    for (const oracleKey of oracles) {\n      const oracle = new Oracle(program, oracleKey);\n      lutLoaders.push(oracle.loadLookupTable());\n    }\n    const luts = await Promise.all(lutLoaders);\n    const ix = program.instruction.pullFeedSubmitResponseMany(instructionData, {\n      accounts,\n      remainingAccounts,\n    });\n    return [ix, luts, response];\n  }\n\n  /**\n   *  Compiles a transaction instruction to submit oracle signatures for a given feed.\n   *\n   *  @param resps The oracle responses. This may be obtained from the `Gateway` class.\n   *  @param slot The slot at which the oracles signed the feed with the current slothash.\n   *  @returns A promise that resolves to the transaction instruction.\n   */\n  getSolanaSubmitSignaturesIx(params: {\n    resps: FeedEvalResponse[];\n    offsets: number[];\n    slot: anchor.BN;\n    payer?: PublicKey;\n    chain?: string;\n  }): TransactionInstruction {\n    const program = this.program;\n    const payerPublicKey =\n      params.payer ?? program.provider.publicKey ?? PublicKey.default;\n    const resps = params.resps.filter((x) => (x.signature ?? \"\").length > 0);\n    const isSolana = params.chain === \"solana\" || params.chain === undefined;\n\n    let queue = new PublicKey(\n      Buffer.from(resps[0].queue_pubkey.toString(), \"hex\")\n    );\n    const sourceQueueKey = new PublicKey(\n      Buffer.from(resps[0].queue_pubkey.toString(), \"hex\")\n    );\n    let queueBump = 0;\n\n    if (!isSolana) {\n      [queue, queueBump] = PublicKey.findProgramAddressSync(\n        [Buffer.from(\"Queue\"), queue.toBuffer()],\n        program.programId\n      );\n    }\n\n    const oracles = resps.map((x) => {\n      const sourceOracleKey = new PublicKey(\n        Buffer.from(x.oracle_pubkey.toString(), \"hex\")\n      );\n      if (isSolana) {\n        return sourceOracleKey;\n      } else {\n        const [oraclePDA] = PublicKey.findProgramAddressSync(\n          [Buffer.from(\"Oracle\"), queue.toBuffer(), sourceOracleKey.toBuffer()],\n          program.programId\n        );\n        return oraclePDA;\n      }\n    });\n\n    const oracleFeedStats = oracles.map(\n      (oracle) =>\n        PublicKey.findProgramAddressSync(\n          [Buffer.from(\"OracleStats\"), oracle.toBuffer()],\n          program.programId\n        )[0]\n    );\n\n    const submissions = resps.map((resp, idx) => ({\n      value: new anchor.BN(resp.success_value.toString()),\n      signature: resp.signature,\n      recoveryId: resp.recovery_id,\n\n      // offsets aren't used in the non-solana endpoint\n      slotOffset: isSolana ? params.offsets[idx] : undefined,\n    }));\n\n    const instructionData = {\n      slot: new anchor.BN(params.slot),\n      submissions: submissions.map((x: any) => {\n        x.signature = Buffer.from(x.signature, \"base64\");\n        return x;\n      }),\n      sourceQueueKey: isSolana ? undefined : sourceQueueKey,\n      queueBump: isSolana ? undefined : queueBump,\n    };\n\n    const accounts = {\n      feed: this.pubkey,\n      queue: queue,\n      programState: State.keyFromSeed(program),\n      recentSlothashes: SLOT_HASHES_SYSVAR_ID,\n      payer: payerPublicKey,\n      systemProgram: SystemProgram.programId,\n      rewardVault: spl.getAssociatedTokenAddressSync(\n        spl.NATIVE_MINT,\n        queue,\n        !isSolana\n      ),\n      tokenProgram: spl.TOKEN_PROGRAM_ID,\n      tokenMint: spl.NATIVE_MINT,\n    };\n\n    const remainingAccounts: AccountMeta[] = [\n      ...oracles.map((k) => ({\n        pubkey: k,\n        isSigner: false,\n        isWritable: false,\n      })),\n      ...oracleFeedStats.map((k) => ({\n        pubkey: k,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    if (isSolana) {\n      return program.instruction.pullFeedSubmitResponse(instructionData, {\n        accounts,\n        remainingAccounts,\n      });\n    } else {\n      return program.instruction.pullFeedSubmitResponseSvm(instructionData, {\n        accounts,\n        remainingAccounts,\n      });\n    }\n  }\n\n  /**\n   *  Checks if the pull feed account has been initialized.\n   *\n   *  @returns A promise that resolves to a boolean indicating if the account has been initialized.\n   */\n  async isInitializedAsync(): Promise<boolean> {\n    return !(await checkNeedsInit(\n      this.program.provider.connection,\n      this.program.programId,\n      this.pubkey\n    ));\n  }\n\n  /**\n   *  Loads the feed data for this {@linkcode PullFeed} account from on chain.\n   *\n   *  @returns A promise that resolves to the feed data.\n   *  @throws if the feed account does not exist.\n   */\n  async loadData(): Promise<PullFeedAccountData> {\n    return await this.program.account[\"pullFeedAccountData\"].fetch(this.pubkey);\n  }\n\n  /**\n   *  Loads the feed data for this {@linkcode PullFeed} account from on chain.\n   *\n   *  @returns A promise that resolves to the values currently stored in the feed.\n   *  @throws if the feed account does not exist.\n   */\n  async loadValues(): Promise<\n    Array<{ value: Big; slot: anchor.BN; oracle: PublicKey }>\n  > {\n    const data = await this.loadData();\n    return data.submissions\n      .filter((x: any) => !x.oracle.equals(PublicKey.default))\n      .map((x: any) => {\n        Big.DP = 40;\n        return {\n          value: new Big(x.value.toString()).div(1e18),\n          slot: new BN(x.slot.toString()),\n          oracle: new PublicKey(x.oracle),\n        };\n      });\n  }\n\n  /**\n   *  Loads the feed data for this {@linkcode PullFeed} account from on chain.\n   *\n   *  @param onlyAfter Call will ignore data signed before this slot.\n   *  @returns A promise that resolves to the observed value as it would be\n   *           seen on-chain.\n   */\n  async loadObservedValue(onlyAfter: anchor.BN): Promise<{\n    value: Big;\n    slot: anchor.BN;\n    oracle: PublicKey;\n  } | null> {\n    const values = await this.loadValues();\n    return toFeedValue(values, onlyAfter);\n  }\n\n  /**\n   * Watches for any on-chain updates to the feed data.\n   *\n   * @param callback The callback to call when the feed data is updated.\n   * @returns A promise that resolves to a subscription ID.\n   */\n  async subscribeToValueChanges(callback: any): Promise<number> {\n    const coder = new BorshAccountsCoder(this.program.idl);\n    const subscriptionId = this.program.provider.connection.onAccountChange(\n      this.pubkey,\n      async (accountInfo, context) => {\n        const feed = coder.decode(\"pullFeedAccountData\", accountInfo.data);\n        await callback(\n          feed.submissions\n            .filter((x: any) => !x.oracle.equals(PublicKey.default))\n            .map((x: any) => {\n              Big.DP = 40;\n              return {\n                value: new Big(x.value.toString()).div(1e18),\n                slot: new anchor.BN(x.slot.toString()),\n                oracle: new PublicKey(x.oracle),\n              };\n            })\n        );\n      },\n      \"processed\"\n    );\n    return subscriptionId;\n  }\n\n  /**\n   * Watches for any on-chain updates to any data feed.\n   *\n   * @param program The Anchor program instance.\n   * @param callback The callback to call when the feed data is updated.\n   * @returns A promise that resolves to a subscription ID.\n   */\n  static async subscribeToAllUpdates(\n    program: Program,\n    callback: (\n      event: [number, { pubkey: PublicKey; submissions: FeedSubmission[] }]\n    ) => Promise<void>\n  ): Promise<number> {\n    const coder = new BorshAccountsCoder(program.idl);\n    const subscriptionId = program.provider.connection.onProgramAccountChange(\n      program.programId,\n      async (keyedAccountInfo, ctx) => {\n        const { accountId, accountInfo } = keyedAccountInfo;\n        try {\n          const feed = coder.decode(\"pullFeedAccountData\", accountInfo.data);\n          await callback([\n            ctx.slot,\n            {\n              pubkey: accountId,\n              submissions: feed.submissions\n                .filter((x) => !x.oracle.equals(PublicKey.default))\n                .map((x) => {\n                  Big.DP = 40;\n                  return {\n                    value: new Big(x.value.toString()).div(1e18),\n                    slot: new anchor.BN(x.slot.toString()),\n                    oracle: new PublicKey(x.oracle),\n                  };\n                }),\n            },\n          ]);\n        } catch (e) {\n          console.log(`ParseFailure: ${e}`);\n        }\n      },\n      \"processed\",\n      [\n        {\n          memcmp: {\n            bytes: \"ZoV7s83c7bd\",\n            offset: 0,\n          },\n        },\n      ]\n    );\n    return subscriptionId;\n  }\n\n  public lookupTableKey(data: any): PublicKey {\n    const lutSigner = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"LutSigner\"), this.pubkey.toBuffer()],\n      this.program.programId\n    )[0];\n\n    const [_, lutKey] = AddressLookupTableProgram.createLookupTable({\n      authority: lutSigner,\n      payer: PublicKey.default,\n      recentSlot: data.lutSlot,\n    });\n    return lutKey;\n  }\n\n  async loadLookupTable(): Promise<AddressLookupTableAccount> {\n    if (this.lut !== null && this.lut !== undefined) {\n      return this.lut;\n    }\n    const data = await this.loadData();\n    const lutKey = this.lookupTableKey(data);\n    const accnt = await this.program.provider.connection.getAddressLookupTable(\n      lutKey\n    );\n    this.lut = accnt.value!;\n    return this.lut!;\n  }\n\n  async loadHistoricalValuesCompact(\n    data_?: PullFeedAccountData\n  ): Promise<CompactResult[]> {\n    const data = data_ ?? (await this.loadData());\n    const values = data.historicalResults\n      .filter((x) => x.slot.gt(new BN(0)))\n      .sort((a, b) => a.slot.cmp(b.slot));\n    return values;\n  }\n}\n"]}